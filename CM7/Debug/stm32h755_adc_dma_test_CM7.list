
stm32h755_adc_dma_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008134  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080083e8  080083e8  000183e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  24040000  080083ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000140  2404001c  08008408  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2404015c  08008408  0002015c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f934  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003363  00000000  00000000  0003f97e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001270  00000000  00000000  00042ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001128  00000000  00000000  00043f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b285  00000000  00000000  00045080  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010f33  00000000  00000000  00080305  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018d0f7  00000000  00000000  00091238  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0021e32f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004d70  00000000  00000000  0021e3ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2404001c 	.word	0x2404001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080083b4 	.word	0x080083b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24040020 	.word	0x24040020
 80002d4:	080083b4 	.word	0x080083b4

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b2f      	ldr	r3, [pc, #188]	; (800039c <SystemInit+0xc4>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a2e      	ldr	r2, [pc, #184]	; (800039c <SystemInit+0xc4>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80002ec:	4b2b      	ldr	r3, [pc, #172]	; (800039c <SystemInit+0xc4>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a2a      	ldr	r2, [pc, #168]	; (800039c <SystemInit+0xc4>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80002f8:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <SystemInit+0xc8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a28      	ldr	r2, [pc, #160]	; (80003a0 <SystemInit+0xc8>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000304:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <SystemInit+0xc8>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <SystemInit+0xc8>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	4924      	ldr	r1, [pc, #144]	; (80003a0 <SystemInit+0xc8>)
 8000310:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <SystemInit+0xcc>)
 8000312:	4013      	ands	r3, r2
 8000314:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000316:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <SystemInit+0xc8>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <SystemInit+0xc8>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <SystemInit+0xc8>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <SystemInit+0xc8>)
 800032a:	2200      	movs	r2, #0
 800032c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800032e:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <SystemInit+0xc8>)
 8000330:	2200      	movs	r2, #0
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
 8000336:	2200      	movs	r2, #0
 8000338:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <SystemInit+0xc8>)
 800033c:	2200      	movs	r2, #0
 800033e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <SystemInit+0xc8>)
 8000342:	2200      	movs	r2, #0
 8000344:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <SystemInit+0xc8>)
 8000348:	2200      	movs	r2, #0
 800034a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <SystemInit+0xc8>)
 800034e:	2200      	movs	r2, #0
 8000350:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <SystemInit+0xc8>)
 8000354:	2200      	movs	r2, #0
 8000356:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <SystemInit+0xc8>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <SystemInit+0xc8>)
 800035e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000362:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemInit+0xc8>)
 8000366:	2200      	movs	r2, #0
 8000368:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <SystemInit+0xd0>)
 800036c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <SystemInit+0xd0>)
 8000370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000374:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <SystemInit+0xd4>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <SystemInit+0xd8>)
 800037c:	4013      	ands	r3, r2
 800037e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000382:	d202      	bcs.n	800038a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <SystemInit+0xdc>)
 8000386:	2201      	movs	r2, #1
 8000388:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SystemInit+0xc4>)
 800038c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000390:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00
 80003a0:	58024400 	.word	0x58024400
 80003a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a8:	580000c0 	.word	0x580000c0
 80003ac:	5c001000 	.word	0x5c001000
 80003b0:	ffff0000 	.word	0xffff0000
 80003b4:	51008108 	.word	0x51008108

080003b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80003be:	f107 031c 	add.w	r3, r7, #28
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ca:	463b      	mov	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]
 80003da:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80003dc:	4b4b      	ldr	r3, [pc, #300]	; (800050c <MX_ADC1_Init+0x154>)
 80003de:	4a4c      	ldr	r2, [pc, #304]	; (8000510 <MX_ADC1_Init+0x158>)
 80003e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003e2:	4b4a      	ldr	r3, [pc, #296]	; (800050c <MX_ADC1_Init+0x154>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003e8:	4b48      	ldr	r3, [pc, #288]	; (800050c <MX_ADC1_Init+0x154>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003ee:	4b47      	ldr	r3, [pc, #284]	; (800050c <MX_ADC1_Init+0x154>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003f4:	4b45      	ldr	r3, [pc, #276]	; (800050c <MX_ADC1_Init+0x154>)
 80003f6:	2208      	movs	r2, #8
 80003f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003fa:	4b44      	ldr	r3, [pc, #272]	; (800050c <MX_ADC1_Init+0x154>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000400:	4b42      	ldr	r3, [pc, #264]	; (800050c <MX_ADC1_Init+0x154>)
 8000402:	2200      	movs	r2, #0
 8000404:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 5;
 8000406:	4b41      	ldr	r3, [pc, #260]	; (800050c <MX_ADC1_Init+0x154>)
 8000408:	2205      	movs	r2, #5
 800040a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800040c:	4b3f      	ldr	r3, [pc, #252]	; (800050c <MX_ADC1_Init+0x154>)
 800040e:	2200      	movs	r2, #0
 8000410:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000412:	4b3e      	ldr	r3, [pc, #248]	; (800050c <MX_ADC1_Init+0x154>)
 8000414:	2200      	movs	r2, #0
 8000416:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000418:	4b3c      	ldr	r3, [pc, #240]	; (800050c <MX_ADC1_Init+0x154>)
 800041a:	2200      	movs	r2, #0
 800041c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800041e:	4b3b      	ldr	r3, [pc, #236]	; (800050c <MX_ADC1_Init+0x154>)
 8000420:	2203      	movs	r2, #3
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000424:	4b39      	ldr	r3, [pc, #228]	; (800050c <MX_ADC1_Init+0x154>)
 8000426:	2200      	movs	r2, #0
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800042a:	4b38      	ldr	r3, [pc, #224]	; (800050c <MX_ADC1_Init+0x154>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000430:	4b36      	ldr	r3, [pc, #216]	; (800050c <MX_ADC1_Init+0x154>)
 8000432:	2200      	movs	r2, #0
 8000434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000438:	4834      	ldr	r0, [pc, #208]	; (800050c <MX_ADC1_Init+0x154>)
 800043a:	f000 ff27 	bl	800128c <HAL_ADC_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000444:	f000 fb06 	bl	8000a54 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	4619      	mov	r1, r3
 8000452:	482e      	ldr	r0, [pc, #184]	; (800050c <MX_ADC1_Init+0x154>)
 8000454:	f001 ffcc 	bl	80023f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800045e:	f000 faf9 	bl	8000a54 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000462:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <MX_ADC1_Init+0x15c>)
 8000464:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000466:	2306      	movs	r3, #6
 8000468:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800046a:	2300      	movs	r3, #0
 800046c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000472:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000474:	2304      	movs	r3, #4
 8000476:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047c:	463b      	mov	r3, r7
 800047e:	4619      	mov	r1, r3
 8000480:	4822      	ldr	r0, [pc, #136]	; (800050c <MX_ADC1_Init+0x154>)
 8000482:	f001 f973 	bl	800176c <HAL_ADC_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800048c:	f000 fae2 	bl	8000a54 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <MX_ADC1_Init+0x160>)
 8000492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000494:	230c      	movs	r3, #12
 8000496:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	481b      	ldr	r0, [pc, #108]	; (800050c <MX_ADC1_Init+0x154>)
 800049e:	f001 f965 	bl	800176c <HAL_ADC_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80004a8:	f000 fad4 	bl	8000a54 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_ADC1_Init+0x164>)
 80004ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004b0:	2312      	movs	r3, #18
 80004b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b4:	463b      	mov	r3, r7
 80004b6:	4619      	mov	r1, r3
 80004b8:	4814      	ldr	r0, [pc, #80]	; (800050c <MX_ADC1_Init+0x154>)
 80004ba:	f001 f957 	bl	800176c <HAL_ADC_ConfigChannel>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80004c4:	f000 fac6 	bl	8000a54 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <MX_ADC1_Init+0x168>)
 80004ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004cc:	2318      	movs	r3, #24
 80004ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d0:	463b      	mov	r3, r7
 80004d2:	4619      	mov	r1, r3
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <MX_ADC1_Init+0x154>)
 80004d6:	f001 f949 	bl	800176c <HAL_ADC_ConfigChannel>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80004e0:	f000 fab8 	bl	8000a54 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_ADC1_Init+0x16c>)
 80004e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80004e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ee:	463b      	mov	r3, r7
 80004f0:	4619      	mov	r1, r3
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <MX_ADC1_Init+0x154>)
 80004f4:	f001 f93a 	bl	800176c <HAL_ADC_ConfigChannel>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 80004fe:	f000 faa9 	bl	8000a54 <Error_Handler>
  }

}
 8000502:	bf00      	nop
 8000504:	3728      	adds	r7, #40	; 0x28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	2404003c 	.word	0x2404003c
 8000510:	40022000 	.word	0x40022000
 8000514:	1d500080 	.word	0x1d500080
 8000518:	21800100 	.word	0x21800100
 800051c:	2e300800 	.word	0x2e300800
 8000520:	3ac04000 	.word	0x3ac04000
 8000524:	3ef08000 	.word	0x3ef08000

08000528 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	; 0x28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a3d      	ldr	r2, [pc, #244]	; (800063c <HAL_ADC_MspInit+0x114>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d174      	bne.n	8000634 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800054a:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <HAL_ADC_MspInit+0x118>)
 800054c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000550:	4a3b      	ldr	r2, [pc, #236]	; (8000640 <HAL_ADC_MspInit+0x118>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800055a:	4b39      	ldr	r3, [pc, #228]	; (8000640 <HAL_ADC_MspInit+0x118>)
 800055c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000560:	f003 0320 	and.w	r3, r3, #32
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000568:	4b35      	ldr	r3, [pc, #212]	; (8000640 <HAL_ADC_MspInit+0x118>)
 800056a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056e:	4a34      	ldr	r2, [pc, #208]	; (8000640 <HAL_ADC_MspInit+0x118>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000578:	4b31      	ldr	r3, [pc, #196]	; (8000640 <HAL_ADC_MspInit+0x118>)
 800057a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <HAL_ADC_MspInit+0x118>)
 8000588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800058c:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <HAL_ADC_MspInit+0x118>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <HAL_ADC_MspInit+0x118>)
 8000598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    PA7     ------> ADC1_INP7
    PC5     ------> ADC1_INP8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80005a4:	2322      	movs	r3, #34	; 0x22
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a8:	2303      	movs	r3, #3
 80005aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	4823      	ldr	r0, [pc, #140]	; (8000644 <HAL_ADC_MspInit+0x11c>)
 80005b8:	f003 ffca 	bl	8004550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 80005bc:	238c      	movs	r3, #140	; 0x8c
 80005be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c0:	2303      	movs	r3, #3
 80005c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	481e      	ldr	r0, [pc, #120]	; (8000648 <HAL_ADC_MspInit+0x120>)
 80005d0:	f003 ffbe 	bl	8004550 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <HAL_ADC_MspInit+0x128>)
 80005d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005dc:	2209      	movs	r2, #9
 80005de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000602:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_ADC_MspInit+0x124>)
 8000606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_ADC_MspInit+0x124>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_ADC_MspInit+0x124>)
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <HAL_ADC_MspInit+0x124>)
 800061a:	f002 f8e7 	bl	80027ec <HAL_DMA_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8000624:	f000 fa16 	bl	8000a54 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_ADC_MspInit+0x124>)
 800062c:	64da      	str	r2, [r3, #76]	; 0x4c
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_ADC_MspInit+0x124>)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40022000 	.word	0x40022000
 8000640:	58024400 	.word	0x58024400
 8000644:	58020800 	.word	0x58020800
 8000648:	58020000 	.word	0x58020000
 800064c:	240400a0 	.word	0x240400a0
 8000650:	40020010 	.word	0x40020010

08000654 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_DMA_Init+0x3c>)
 800065c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000660:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <MX_DMA_Init+0x3c>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_DMA_Init+0x3c>)
 800066c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	200b      	movs	r0, #11
 800067e:	f002 f86c 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000682:	200b      	movs	r0, #11
 8000684:	f002 f883 	bl	800278e <HAL_NVIC_EnableIRQ>

}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	58024400 	.word	0x58024400

08000694 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ce:	4a19      	ldr	r2, [pc, #100]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006ee:	f043 0302 	orr.w	r3, r3, #2
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2101      	movs	r1, #1
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <MX_GPIO_Init+0xa4>)
 800070a:	f004 f8d1 	bl	80048b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800070e:	2301      	movs	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	4619      	mov	r1, r3
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_GPIO_Init+0xa4>)
 8000726:	f003 ff13 	bl	8004550 <HAL_GPIO_Init>

}
 800072a:	bf00      	nop
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58024400 	.word	0x58024400
 8000738:	58020400 	.word	0x58020400

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000746:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000748:	bf00      	nop
 800074a:	4b45      	ldr	r3, [pc, #276]	; (8000860 <main+0x124>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x24>
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	1e5a      	subs	r2, r3, #1
 800075a:	60fa      	str	r2, [r7, #12]
 800075c:	2b00      	cmp	r3, #0
 800075e:	dcf4      	bgt.n	800074a <main+0xe>
  if ( timeout < 0 )
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b00      	cmp	r3, #0
 8000764:	da01      	bge.n	800076a <main+0x2e>
  {
  Error_Handler();
 8000766:	f000 f975 	bl	8000a54 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 facb 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f887 	bl	8000880 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000772:	4b3b      	ldr	r3, [pc, #236]	; (8000860 <main+0x124>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	4a39      	ldr	r2, [pc, #228]	; (8000860 <main+0x124>)
 800077a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000782:	4b37      	ldr	r3, [pc, #220]	; (8000860 <main+0x124>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000790:	2000      	movs	r0, #0
 8000792:	f004 f8c1 	bl	8004918 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000796:	2100      	movs	r1, #0
 8000798:	2000      	movs	r0, #0
 800079a:	f004 f8d7 	bl	800494c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800079e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a2:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007a4:	bf00      	nop
 80007a6:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <main+0x124>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d104      	bne.n	80007bc <main+0x80>
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	1e5a      	subs	r2, r3, #1
 80007b6:	60fa      	str	r2, [r7, #12]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dcf4      	bgt.n	80007a6 <main+0x6a>
if ( timeout < 0 )
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	da01      	bge.n	80007c6 <main+0x8a>
{
Error_Handler();
 80007c2:	f000 f947 	bl	8000a54 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f7ff ff65 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f7ff ff43 	bl	8000654 <MX_DMA_Init>
  MX_ADC1_Init();
 80007ce:	f7ff fdf3 	bl	80003b8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80007d2:	f000 f999 	bl	8000b08 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80007d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007da:	2100      	movs	r1, #0
 80007dc:	4821      	ldr	r0, [pc, #132]	; (8000864 <main+0x128>)
 80007de:	f001 fda3 	bl	8002328 <HAL_ADCEx_Calibration_Start>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <main+0xb0>
  {
    /* Calibration Error */
    Error_Handler();
 80007e8:	f000 f934 	bl	8000a54 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	481e      	ldr	r0, [pc, #120]	; (8000868 <main+0x12c>)
 80007f0:	f006 feec 	bl	80075cc <HAL_TIM_PWM_Start>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <main+0xc2>
  {
    /* PWM Generation Error */
    Error_Handler();
 80007fa:	f000 f92b 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float i = 45.5555;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <main+0x130>)
 8000800:	607b      	str	r3, [r7, #4]
  float z = 32.222;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <main+0x134>)
 8000804:	60bb      	str	r3, [r7, #8]
  static float r = 0;
  while (1)
  {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)aADCDualConvertedValues1, 5);
 8000806:	2205      	movs	r2, #5
 8000808:	491a      	ldr	r1, [pc, #104]	; (8000874 <main+0x138>)
 800080a:	4816      	ldr	r0, [pc, #88]	; (8000864 <main+0x128>)
 800080c:	f000 fede 	bl	80015cc <HAL_ADC_Start_DMA>
    r = i/z;
 8000810:	edd7 6a01 	vldr	s13, [r7, #4]
 8000814:	ed97 7a02 	vldr	s14, [r7, #8]
 8000818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <main+0x13c>)
 800081e:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay((uint16_t)(r));
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <main+0x13c>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800082c:	ee17 3a90 	vmov	r3, s15
 8000830:	b29b      	uxth	r3, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fb0e 	bl	8000e54 <HAL_Delay>
    z = z + 1.00;
 8000838:	edd7 7a02 	vldr	s15, [r7, #8]
 800083c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000844:	edc7 7a02 	vstr	s15, [r7, #8]

    if(z > 100.000)
 8000848:	edd7 7a02 	vldr	s15, [r7, #8]
 800084c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800087c <main+0x140>
 8000850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000858:	dd01      	ble.n	800085e <main+0x122>
    {
      z =  32.222;
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <main+0x134>)
 800085c:	60bb      	str	r3, [r7, #8]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)aADCDualConvertedValues1, 5);
 800085e:	e7d2      	b.n	8000806 <main+0xca>
 8000860:	58024400 	.word	0x58024400
 8000864:	2404003c 	.word	0x2404003c
 8000868:	24040118 	.word	0x24040118
 800086c:	423638d5 	.word	0x423638d5
 8000870:	4200e354 	.word	0x4200e354
 8000874:	24040008 	.word	0x24040008
 8000878:	24040038 	.word	0x24040038
 800087c:	42c80000 	.word	0x42c80000

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0cc      	sub	sp, #304	; 0x130
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800088a:	224c      	movs	r2, #76	; 0x4c
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f007 fd88 	bl	80083a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f007 fd81 	bl	80083a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4618      	mov	r0, r3
 80008a8:	23bc      	movs	r3, #188	; 0xbc
 80008aa:	461a      	mov	r2, r3
 80008ac:	2100      	movs	r1, #0
 80008ae:	f007 fd79 	bl	80083a4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008b2:	2004      	movs	r0, #4
 80008b4:	f004 f85e 	bl	8004974 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	4b5b      	ldr	r3, [pc, #364]	; (8000a2c <SystemClock_Config+0x1ac>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a5a      	ldr	r2, [pc, #360]	; (8000a2c <SystemClock_Config+0x1ac>)
 80008c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b58      	ldr	r3, [pc, #352]	; (8000a2c <SystemClock_Config+0x1ac>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	4b56      	ldr	r3, [pc, #344]	; (8000a30 <SystemClock_Config+0x1b0>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008da:	4a55      	ldr	r2, [pc, #340]	; (8000a30 <SystemClock_Config+0x1b0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e2:	4b53      	ldr	r3, [pc, #332]	; (8000a30 <SystemClock_Config+0x1b0>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	f003 0201 	and.w	r2, r3, #1
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f2:	bf00      	nop
 80008f4:	4b4d      	ldr	r3, [pc, #308]	; (8000a2c <SystemClock_Config+0x1ac>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000900:	d1f8      	bne.n	80008f4 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <SystemClock_Config+0x1b4>)
 8000904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000906:	4a4b      	ldr	r2, [pc, #300]	; (8000a34 <SystemClock_Config+0x1b4>)
 8000908:	f023 0303 	bic.w	r3, r3, #3
 800090c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090e:	2302      	movs	r3, #2
 8000910:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000914:	2301      	movs	r3, #1
 8000916:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091a:	2320      	movs	r3, #32
 800091c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800092c:	2304      	movs	r3, #4
 800092e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000932:	231e      	movs	r3, #30
 8000934:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800094a:	230c      	movs	r3, #12
 800094c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000960:	4618      	mov	r0, r3
 8000962:	f004 f85f 	bl	8004a24 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800096c:	f000 f872 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	233f      	movs	r3, #63	; 0x3f
 8000972:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2303      	movs	r3, #3
 8000978:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000988:	2340      	movs	r3, #64	; 0x40
 800098a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800098e:	2340      	movs	r3, #64	; 0x40
 8000990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800099c:	2340      	movs	r3, #64	; 0x40
 800099e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009a6:	2104      	movs	r1, #4
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 fbf3 	bl	8005194 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x138>
  {
    Error_Handler();
 80009b4:	f000 f84e 	bl	8000a54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009c0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2204      	movs	r2, #4
 80009c8:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	2209      	movs	r2, #9
 80009d0:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2201      	movs	r2, #1
 80009d8:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	2202      	movs	r2, #2
 80009e0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	2202      	movs	r2, #2
 80009e8:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	22c0      	movs	r2, #192	; 0xc0
 80009f0:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2220      	movs	r2, #32
 80009f8:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000a02:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 fef0 	bl	80057f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x1a2>
  {
    Error_Handler();
 8000a1e:	f000 f819 	bl	8000a54 <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	58024800 	.word	0x58024800
 8000a30:	58000400 	.word	0x58000400
 8000a34:	58024400 	.word	0x58024400

08000a38 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000a40:	2101      	movs	r1, #1
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <HAL_ADC_ConvCpltCallback+0x18>)
 8000a44:	f003 ff4d 	bl	80048e2 <HAL_GPIO_TogglePin>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	58020400 	.word	0x58020400

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //while(1);
  /* USER CODE END Error_Handler_Debug */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_MspInit+0x30>)
 8000a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a70:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x30>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x30>)
 8000a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	58024400 	.word	0x58024400

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f992 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <DMA1_Stream0_IRQHandler+0x10>)
 8000afa:	f002 faa5 	bl	8003048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	240400a0 	.word	0x240400a0

08000b08 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b3c:	4a2d      	ldr	r2, [pc, #180]	; (8000bf4 <MX_TIM3_Init+0xec>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b42:	2264      	movs	r2, #100	; 0x64
 8000b44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b60:	4823      	ldr	r0, [pc, #140]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b62:	f006 fcd3 	bl	800750c <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b6c:	f7ff ff72 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b7e:	f006 fe95 	bl	80078ac <HAL_TIM_ConfigClockSource>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b88:	f7ff ff64 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b8c:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b8e:	f006 fce8 	bl	8007562 <HAL_TIM_PWM_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b98:	f7ff ff5c 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000bac:	f007 fb7a 	bl	80082a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000bb6:	f7ff ff4d 	bl	8000a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bba:	2360      	movs	r3, #96	; 0x60
 8000bbc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8000bbe:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000bd4:	f006 fd52 	bl	800767c <HAL_TIM_PWM_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000bde:	f7ff ff39 	bl	8000a54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000be4:	f000 f82a 	bl	8000c3c <HAL_TIM_MspPostInit>

}
 8000be8:	bf00      	nop
 8000bea:	3738      	adds	r7, #56	; 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	24040118 	.word	0x24040118
 8000bf4:	40000400 	.word	0x40000400

08000bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_TIM_Base_MspInit+0x3c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d10e      	bne.n	8000c28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_TIM_Base_MspInit+0x40>)
 8000c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c10:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <HAL_TIM_Base_MspInit+0x40>)
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <HAL_TIM_Base_MspInit+0x40>)
 8000c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40000400 	.word	0x40000400
 8000c38:	58024400 	.word	0x58024400

08000c3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <HAL_TIM_MspPostInit+0x68>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d11e      	bne.n	8000c9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_TIM_MspPostInit+0x6c>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_TIM_MspPostInit+0x6c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_TIM_MspPostInit+0x6c>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_TIM_MspPostInit+0x70>)
 8000c98:	f003 fc5a 	bl	8004550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40000400 	.word	0x40000400
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58020000 	.word	0x58020000

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cb6:	e003      	b.n	8000cc0 <LoopCopyDataInit>

08000cb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cbe:	3104      	adds	r1, #4

08000cc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cc8:	d3f6      	bcc.n	8000cb8 <CopyDataInit>
  ldr  r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ccc:	e002      	b.n	8000cd4 <LoopFillZerobss>

08000cce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cd0:	f842 3b04 	str.w	r3, [r2], #4

08000cd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cd8:	d3f9      	bcc.n	8000cce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cda:	f7ff fafd 	bl	80002d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f007 fb3d 	bl	800835c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fd2b 	bl	800073c <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000cec:	080083ec 	.word	0x080083ec
  ldr  r0, =_sdata
 8000cf0:	24040000 	.word	0x24040000
  ldr  r3, =_edata
 8000cf4:	2404001c 	.word	0x2404001c
  ldr  r2, =_sbss
 8000cf8:	2404001c 	.word	0x2404001c
  ldr  r3, = _ebss
 8000cfc:	2404015c 	.word	0x2404015c

08000d00 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC3_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f001 fd1b 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d0e:	f004 fbe5 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8000d12:	4601      	mov	r1, r0
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <HAL_Init+0x60>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <HAL_Init+0x64>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	fa21 f303 	lsr.w	r3, r1, r3
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <HAL_Init+0x68>)
 8000d2c:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_Init+0x68>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_Init+0x60>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	490b      	ldr	r1, [pc, #44]	; (8000d68 <HAL_Init+0x64>)
 8000d3c:	5ccb      	ldrb	r3, [r1, r3]
 8000d3e:	f003 031f 	and.w	r3, r3, #31
 8000d42:	fa22 f303 	lsr.w	r3, r2, r3
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_Init+0x6c>)
 8000d48:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f812 	bl	8000d74 <HAL_InitTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e002      	b.n	8000d60 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5a:	f7ff fe83 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	58024400 	.word	0x58024400
 8000d68:	080083cc 	.word	0x080083cc
 8000d6c:	24040000 	.word	0x24040000
 8000d70:	24040004 	.word	0x24040004

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_InitTick+0x94>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e03a      	b.n	8000dfe <HAL_InitTick+0x8a>
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8000d88:	f001 fd1c 	bl	80027c4 <HAL_GetCurrentCPUID>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d112      	bne.n	8000db8 <HAL_InitTick+0x44>
  {
    /* Cortex-M7 detected */
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_InitTick+0x98>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_InitTick+0x94>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 fcfe 	bl	80027aa <HAL_SYSTICK_Config>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d015      	beq.n	8000de0 <HAL_InitTick+0x6c>
    {
      return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e022      	b.n	8000dfe <HAL_InitTick+0x8a>
  }
  else
  {
    /* Cortex-M4 detected */
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000db8:	f004 fd02 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x94>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fcea 	bl	80027aa <HAL_SYSTICK_Config>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_InitTick+0x6c>
    {
      return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e00e      	b.n	8000dfe <HAL_InitTick+0x8a>
    return HAL_ERROR;
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	d80a      	bhi.n	8000dfc <HAL_InitTick+0x88>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de6:	2200      	movs	r2, #0
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	f04f 30ff 	mov.w	r0, #4294967295
 8000dee:	f001 fcb4 	bl	800275a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_InitTick+0x9c>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e000      	b.n	8000dfe <HAL_InitTick+0x8a>
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	24040018 	.word	0x24040018
 8000e0c:	24040000 	.word	0x24040000
 8000e10:	24040014 	.word	0x24040014

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	24040018 	.word	0x24040018
 8000e38:	24040158 	.word	0x24040158

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	24040158 	.word	0x24040158

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_Delay+0x40>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	24040018 	.word	0x24040018

08000e98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetREVID+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	0c1b      	lsrs	r3, r3, #16
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	5c001000 	.word	0x5c001000

08000eb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	609a      	str	r2, [r3, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f18:	b490      	push	{r4, r7}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3360      	adds	r3, #96	; 0x60
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	430b      	orrs	r3, r1
 8000f44:	4313      	orrs	r3, r2
 8000f46:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc90      	pop	{r4, r7}
 8000f50:	4770      	bx	lr

08000f52 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b085      	sub	sp, #20
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	f003 031f 	and.w	r3, r3, #31
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	431a      	orrs	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	611a      	str	r2, [r3, #16]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000f84:	b490      	push	{r4, r7}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3360      	adds	r3, #96	; 0x60
 8000f94:	461a      	mov	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	6023      	str	r3, [r4, #0]
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc90      	pop	{r4, r7}
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fda:	b490      	push	{r4, r7}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3330      	adds	r3, #48	; 0x30
 8000fea:	461a      	mov	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	4413      	add	r3, r2
 8000ff8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000ffa:	6822      	ldr	r2, [r4, #0]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	211f      	movs	r1, #31
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	401a      	ands	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	0e9b      	lsrs	r3, r3, #26
 8001010:	f003 011f 	and.w	r1, r3, #31
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bc90      	pop	{r4, r7}
 800102a:	4770      	bx	lr

0800102c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800102c:	b490      	push	{r4, r7}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3314      	adds	r3, #20
 800103c:	461a      	mov	r2, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	0e5b      	lsrs	r3, r3, #25
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	4413      	add	r3, r2
 800104a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800104c:	6822      	ldr	r2, [r4, #0]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	0d1b      	lsrs	r3, r3, #20
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	2107      	movs	r1, #7
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	401a      	ands	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	0d1b      	lsrs	r3, r3, #20
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bc90      	pop	{r4, r7}
 800107a:	4770      	bx	lr

0800107c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001094:	43db      	mvns	r3, r3
 8001096:	401a      	ands	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0318 	and.w	r3, r3, #24
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	400b      	ands	r3, r1
 80010a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010aa:	431a      	orrs	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	000fffff 	.word	0x000fffff

080010c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 031f 	and.w	r3, r3, #31
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <LL_ADC_DisableDeepPowerDown+0x20>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6093      	str	r3, [r2, #8]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	5fffffc0 	.word	0x5fffffc0

08001104 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001118:	d101      	bne.n	800111e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <LL_ADC_EnableInternalRegulator+0x24>)
 800113a:	4013      	ands	r3, r2
 800113c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	6fffffc0 	.word	0x6fffffc0

08001154 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001168:	d101      	bne.n	800116e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <LL_ADC_Enable+0x24>)
 800118a:	4013      	ands	r3, r2
 800118c:	f043 0201 	orr.w	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	7fffffc0 	.word	0x7fffffc0

080011a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <LL_ADC_Disable+0x24>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	f043 0202 	orr.w	r2, r3, #2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	7fffffc0 	.word	0x7fffffc0

080011cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <LL_ADC_IsEnabled+0x18>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <LL_ADC_IsEnabled+0x1a>
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b02      	cmp	r3, #2
 8001204:	d101      	bne.n	800120a <LL_ADC_IsDisableOngoing+0x18>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <LL_ADC_IsDisableOngoing+0x1a>
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <LL_ADC_REG_StartConversion+0x24>)
 8001226:	4013      	ands	r3, r2
 8001228:	f043 0204 	orr.w	r2, r3, #4
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	7fffffc0 	.word	0x7fffffc0

08001240 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b04      	cmp	r3, #4
 8001252:	d101      	bne.n	8001258 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b08      	cmp	r3, #8
 8001278:	d101      	bne.n	800127e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e18e      	b.n	80015c4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff f937 	bl	8000528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff19 	bl	8001104 <LL_ADC_IsDeepPowerDownEnabled>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff feff 	bl	80010e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff34 	bl	8001154 <LL_ADC_IsInternalRegulatorEnabled>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d113      	bne.n	800131a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff18 	bl	800112c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012fc:	4b9a      	ldr	r3, [pc, #616]	; (8001568 <HAL_ADC_Init+0x2dc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	4a9a      	ldr	r2, [pc, #616]	; (800156c <HAL_ADC_Init+0x2e0>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800130c:	e002      	b.n	8001314 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff18 	bl	8001154 <LL_ADC_IsInternalRegulatorEnabled>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10d      	bne.n	8001346 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff78 	bl	8001240 <LL_ADC_REG_IsConversionOngoing>
 8001350:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 8129 	bne.w	80015b2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f040 8125 	bne.w	80015b2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001370:	f043 0202 	orr.w	r2, r3, #2
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff25 	bl	80011cc <LL_ADC_IsEnabled>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d136      	bne.n	80013f6 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a78      	ldr	r2, [pc, #480]	; (8001570 <HAL_ADC_Init+0x2e4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d004      	beq.n	800139c <HAL_ADC_Init+0x110>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a77      	ldr	r2, [pc, #476]	; (8001574 <HAL_ADC_Init+0x2e8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d10e      	bne.n	80013ba <HAL_ADC_Init+0x12e>
 800139c:	4874      	ldr	r0, [pc, #464]	; (8001570 <HAL_ADC_Init+0x2e4>)
 800139e:	f7ff ff15 	bl	80011cc <LL_ADC_IsEnabled>
 80013a2:	4604      	mov	r4, r0
 80013a4:	4873      	ldr	r0, [pc, #460]	; (8001574 <HAL_ADC_Init+0x2e8>)
 80013a6:	f7ff ff11 	bl	80011cc <LL_ADC_IsEnabled>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4323      	orrs	r3, r4
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bf0c      	ite	eq
 80013b2:	2301      	moveq	r3, #1
 80013b4:	2300      	movne	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	e008      	b.n	80013cc <HAL_ADC_Init+0x140>
 80013ba:	486f      	ldr	r0, [pc, #444]	; (8001578 <HAL_ADC_Init+0x2ec>)
 80013bc:	f7ff ff06 	bl	80011cc <LL_ADC_IsEnabled>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bf0c      	ite	eq
 80013c6:	2301      	moveq	r3, #1
 80013c8:	2300      	movne	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d012      	beq.n	80013f6 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a66      	ldr	r2, [pc, #408]	; (8001570 <HAL_ADC_Init+0x2e4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d004      	beq.n	80013e4 <HAL_ADC_Init+0x158>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a65      	ldr	r2, [pc, #404]	; (8001574 <HAL_ADC_Init+0x2e8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d101      	bne.n	80013e8 <HAL_ADC_Init+0x15c>
 80013e4:	4a65      	ldr	r2, [pc, #404]	; (800157c <HAL_ADC_Init+0x2f0>)
 80013e6:	e000      	b.n	80013ea <HAL_ADC_Init+0x15e>
 80013e8:	4a65      	ldr	r2, [pc, #404]	; (8001580 <HAL_ADC_Init+0x2f4>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4619      	mov	r1, r3
 80013f0:	4610      	mov	r0, r2
 80013f2:	f7ff fd5d 	bl	8000eb0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80013f6:	f7ff fd4f 	bl	8000e98 <HAL_GetREVID>
 80013fa:	4602      	mov	r2, r0
 80013fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8001400:	429a      	cmp	r2, r3
 8001402:	d914      	bls.n	800142e <HAL_ADC_Init+0x1a2>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b10      	cmp	r3, #16
 800140a:	d110      	bne.n	800142e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7d5b      	ldrb	r3, [r3, #21]
 8001410:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001416:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800141c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7f1b      	ldrb	r3, [r3, #28]
 8001422:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001424:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001426:	f043 030c 	orr.w	r3, r3, #12
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	e00d      	b.n	800144a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7d5b      	ldrb	r3, [r3, #21]
 8001432:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001438:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800143e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7f1b      	ldrb	r3, [r3, #28]
 8001444:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
    }


    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7f1b      	ldrb	r3, [r3, #28]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d106      	bne.n	8001460 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	3b01      	subs	r3, #1
 8001458:	045b      	lsls	r3, r3, #17
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	2b00      	cmp	r3, #0
 8001466:	d009      	beq.n	800147c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <HAL_ADC_Init+0x2f8>)
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	430b      	orrs	r3, r1
 800148e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fed3 	bl	8001240 <LL_ADC_REG_IsConversionOngoing>
 800149a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fee0 	bl	8001266 <LL_ADC_INJ_IsConversionOngoing>
 80014a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d14a      	bne.n	8001544 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d147      	bne.n	8001544 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7d1b      	ldrb	r3, [r3, #20]
 80014b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <HAL_ADC_Init+0x2fc>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	69b9      	ldr	r1, [r7, #24]
 80014d2:	430b      	orrs	r3, r1
 80014d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d11b      	bne.n	8001518 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <HAL_ADC_Init+0x300>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014f4:	3a01      	subs	r2, #1
 80014f6:	0411      	lsls	r1, r2, #16
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014fc:	4311      	orrs	r1, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001508:	430a      	orrs	r2, r1
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0201 	orr.w	r2, r2, #1
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	e007      	b.n	8001528 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fd98 	bl	8002074 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d121      	bne.n	8001590 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f023 010f 	bic.w	r1, r3, #15
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
 8001564:	e01c      	b.n	80015a0 <HAL_ADC_Init+0x314>
 8001566:	bf00      	nop
 8001568:	24040000 	.word	0x24040000
 800156c:	053e2d63 	.word	0x053e2d63
 8001570:	40022000 	.word	0x40022000
 8001574:	40022100 	.word	0x40022100
 8001578:	58026000 	.word	0x58026000
 800157c:	40022300 	.word	0x40022300
 8001580:	58026300 	.word	0x58026300
 8001584:	fff0c003 	.word	0xfff0c003
 8001588:	ffffbffc 	.word	0xffffbffc
 800158c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 020f 	bic.w	r2, r2, #15
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a4:	f023 0303 	bic.w	r3, r3, #3
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	655a      	str	r2, [r3, #84]	; 0x54
 80015b0:	e007      	b.n	80015c2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b6:	f043 0210 	orr.w	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3724      	adds	r7, #36	; 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}

080015cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a51      	ldr	r2, [pc, #324]	; (8001724 <HAL_ADC_Start_DMA+0x158>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d004      	beq.n	80015ec <HAL_ADC_Start_DMA+0x20>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a50      	ldr	r2, [pc, #320]	; (8001728 <HAL_ADC_Start_DMA+0x15c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d101      	bne.n	80015f0 <HAL_ADC_Start_DMA+0x24>
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <HAL_ADC_Start_DMA+0x160>)
 80015ee:	e000      	b.n	80015f2 <HAL_ADC_Start_DMA+0x26>
 80015f0:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <HAL_ADC_Start_DMA+0x164>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fd66 	bl	80010c4 <LL_ADC_GetMultimode>
 80015f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fe1e 	bl	8001240 <LL_ADC_REG_IsConversionOngoing>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 8084 	bne.w	8001714 <HAL_ADC_Start_DMA+0x148>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_ADC_Start_DMA+0x4e>
 8001616:	2302      	movs	r3, #2
 8001618:	e07f      	b.n	800171a <HAL_ADC_Start_DMA+0x14e>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d002      	beq.n	8001634 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b09      	cmp	r3, #9
 8001632:	d168      	bne.n	8001706 <HAL_ADC_Start_DMA+0x13a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 fbad 	bl	8001d94 <ADC_Enable>
 800163a:	4603      	mov	r3, r0
 800163c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d15b      	bne.n	80016fc <HAL_ADC_Start_DMA+0x130>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001648:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_ADC_Start_DMA+0x168>)
 800164a:	4013      	ands	r3, r2
 800164c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a33      	ldr	r2, [pc, #204]	; (8001728 <HAL_ADC_Start_DMA+0x15c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d002      	beq.n	8001664 <HAL_ADC_Start_DMA+0x98>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e000      	b.n	8001666 <HAL_ADC_Start_DMA+0x9a>
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <HAL_ADC_Start_DMA+0x158>)
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	4293      	cmp	r3, r2
 800166c:	d002      	beq.n	8001674 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001678:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f023 0206 	bic.w	r2, r3, #6
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	659a      	str	r2, [r3, #88]	; 0x58
 8001698:	e002      	b.n	80016a0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	4a24      	ldr	r2, [pc, #144]	; (8001738 <HAL_ADC_Start_DMA+0x16c>)
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <HAL_ADC_Start_DMA+0x170>)
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <HAL_ADC_Start_DMA+0x174>)
 80016b6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	221c      	movs	r2, #28
 80016be:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0210 	orr.w	r2, r2, #16
 80016d6:	605a      	str	r2, [r3, #4]


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3340      	adds	r3, #64	; 0x40
 80016e2:	4619      	mov	r1, r3
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f001 fad2 	bl	8002c90 <HAL_DMA_Start_IT>
 80016ec:	4603      	mov	r3, r0
 80016ee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fd8f 	bl	8001218 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80016fa:	e00d      	b.n	8001718 <HAL_ADC_Start_DMA+0x14c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001704:	e008      	b.n	8001718 <HAL_ADC_Start_DMA+0x14c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001712:	e001      	b.n	8001718 <HAL_ADC_Start_DMA+0x14c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001714:	2302      	movs	r3, #2
 8001716:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001718:	7dfb      	ldrb	r3, [r7, #23]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000
 8001728:	40022100 	.word	0x40022100
 800172c:	40022300 	.word	0x40022300
 8001730:	58026300 	.word	0x58026300
 8001734:	fffff0fe 	.word	0xfffff0fe
 8001738:	08001f4d 	.word	0x08001f4d
 800173c:	08002025 	.word	0x08002025
 8001740:	08002041 	.word	0x08002041

08001744 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b099      	sub	sp, #100	; 0x64
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a99      	ldr	r2, [pc, #612]	; (80019ec <HAL_ADC_ConfigChannel+0x280>)
 8001786:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x2a>
 8001792:	2302      	movs	r3, #2
 8001794:	e2e6      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x5f8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fd4c 	bl	8001240 <LL_ADC_REG_IsConversionOngoing>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 82cb 	bne.w	8001d46 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d108      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x62>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0e9b      	lsrs	r3, r3, #26
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	2201      	movs	r2, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	e00f      	b.n	80017ee <HAL_ADC_ConfigChannel+0x82>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	2201      	movs	r2, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	69d1      	ldr	r1, [r2, #28]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	430b      	orrs	r3, r1
 80017fa:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	f7ff fbe6 	bl	8000fda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fd14 	bl	8001240 <LL_ADC_REG_IsConversionOngoing>
 8001818:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fd21 	bl	8001266 <LL_ADC_INJ_IsConversionOngoing>
 8001824:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 80b3 	bne.w	8001994 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800182e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 80af 	bne.w	8001994 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6819      	ldr	r1, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	461a      	mov	r2, r3
 8001844:	f7ff fbf2 	bl	800102c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001848:	4b69      	ldr	r3, [pc, #420]	; (80019f0 <HAL_ADC_ConfigChannel+0x284>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001850:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001854:	d10b      	bne.n	800186e <HAL_ADC_ConfigChannel+0x102>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	e01d      	b.n	80018aa <HAL_ADC_ConfigChannel+0x13e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10b      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x128>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	e00a      	b.n	80018aa <HAL_ADC_ConfigChannel+0x13e>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d027      	beq.n	8001904 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6919      	ldr	r1, [r3, #16]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c2:	f7ff fb29 	bl	8000f18 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	7e5b      	ldrb	r3, [r3, #25]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d102      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x170>
 80018d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80018da:	e000      	b.n	80018de <HAL_ADC_ConfigChannel+0x172>
 80018dc:	2300      	movs	r3, #0
 80018de:	461a      	mov	r2, r3
 80018e0:	f7ff fb50 	bl	8000f84 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6919      	ldr	r1, [r3, #16]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	7e1b      	ldrb	r3, [r3, #24]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d102      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x18e>
 80018f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018f8:	e000      	b.n	80018fc <HAL_ADC_ConfigChannel+0x190>
 80018fa:	2300      	movs	r3, #0
 80018fc:	461a      	mov	r2, r3
 80018fe:	f7ff fb28 	bl	8000f52 <LL_ADC_SetDataRightShift>
 8001902:	e047      	b.n	8001994 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	069b      	lsls	r3, r3, #26
 8001914:	429a      	cmp	r2, r3
 8001916:	d107      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001926:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800192e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	069b      	lsls	r3, r3, #26
 8001938:	429a      	cmp	r2, r3
 800193a:	d107      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800194a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001952:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	069b      	lsls	r3, r3, #26
 800195c:	429a      	cmp	r2, r3
 800195e:	d107      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800196e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001976:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	069b      	lsls	r3, r3, #26
 8001980:	429a      	cmp	r2, r3
 8001982:	d107      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001992:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fc17 	bl	80011cc <LL_ADC_IsEnabled>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 81d9 	bne.w	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	461a      	mov	r2, r3
 80019b4:	f7ff fb62 	bl	800107c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <HAL_ADC_ConfigChannel+0x280>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	f040 8101 	bne.w	8001bc6 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10f      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x288>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0e9b      	lsrs	r3, r3, #26
 80019da:	3301      	adds	r3, #1
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	2b09      	cmp	r3, #9
 80019e2:	bf94      	ite	ls
 80019e4:	2301      	movls	r3, #1
 80019e6:	2300      	movhi	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e016      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x2ae>
 80019ec:	47ff0000 	.word	0x47ff0000
 80019f0:	5c001000 	.word	0x5c001000
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	bf94      	ite	ls
 8001a14:	2301      	movls	r3, #1
 8001a16:	2300      	movhi	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d064      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x2ce>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	3301      	adds	r3, #1
 8001a32:	069b      	lsls	r3, r3, #26
 8001a34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a38:	e00e      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x2ec>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	069b      	lsls	r3, r3, #26
 8001a54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x30c>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0e9b      	lsrs	r3, r3, #26
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	e010      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x32e>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	ea42 0103 	orr.w	r1, r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10a      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x354>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	0e9b      	lsrs	r3, r3, #26
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f003 021f 	and.w	r2, r3, #31
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	051b      	lsls	r3, r3, #20
 8001abe:	e011      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x378>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	e069      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x398>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0e9b      	lsrs	r3, r3, #26
 8001afa:	3301      	adds	r3, #1
 8001afc:	069b      	lsls	r3, r3, #26
 8001afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b02:	e00e      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x3b6>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	61fb      	str	r3, [r7, #28]
  return result;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	069b      	lsls	r3, r3, #26
 8001b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x3d6>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0e9b      	lsrs	r3, r3, #26
 8001b34:	3301      	adds	r3, #1
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	e010      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x3f8>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  return result;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	ea42 0103 	orr.w	r1, r2, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10d      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x424>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0e9b      	lsrs	r3, r3, #26
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	3b1e      	subs	r3, #30
 8001b88:	051b      	lsls	r3, r3, #20
 8001b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	e014      	b.n	8001bba <HAL_ADC_ConfigChannel+0x44e>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	60fb      	str	r3, [r7, #12]
  return result;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b1e      	subs	r3, #30
 8001bb4:	051b      	lsls	r3, r3, #20
 8001bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	6892      	ldr	r2, [r2, #8]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff fa33 	bl	800102c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f280 80c4 	bge.w	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a65      	ldr	r2, [pc, #404]	; (8001d6c <HAL_ADC_ConfigChannel+0x600>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0x478>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a64      	ldr	r2, [pc, #400]	; (8001d70 <HAL_ADC_ConfigChannel+0x604>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x47c>
 8001be4:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <HAL_ADC_ConfigChannel+0x608>)
 8001be6:	e000      	b.n	8001bea <HAL_ADC_ConfigChannel+0x47e>
 8001be8:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_ADC_ConfigChannel+0x60c>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f986 	bl	8000efc <LL_ADC_GetCommonPathInternalCh>
 8001bf0:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5d      	ldr	r2, [pc, #372]	; (8001d6c <HAL_ADC_ConfigChannel+0x600>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d004      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x49a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5b      	ldr	r2, [pc, #364]	; (8001d70 <HAL_ADC_ConfigChannel+0x604>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10e      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x4b8>
 8001c06:	4859      	ldr	r0, [pc, #356]	; (8001d6c <HAL_ADC_ConfigChannel+0x600>)
 8001c08:	f7ff fae0 	bl	80011cc <LL_ADC_IsEnabled>
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	4858      	ldr	r0, [pc, #352]	; (8001d70 <HAL_ADC_ConfigChannel+0x604>)
 8001c10:	f7ff fadc 	bl	80011cc <LL_ADC_IsEnabled>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4323      	orrs	r3, r4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e008      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x4ca>
 8001c24:	4855      	ldr	r0, [pc, #340]	; (8001d7c <HAL_ADC_ConfigChannel+0x610>)
 8001c26:	f7ff fad1 	bl	80011cc <LL_ADC_IsEnabled>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d07b      	beq.n	8001d32 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_ADC_ConfigChannel+0x614>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d12e      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x536>
 8001c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d129      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a4a      	ldr	r2, [pc, #296]	; (8001d7c <HAL_ADC_ConfigChannel+0x610>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d17f      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a43      	ldr	r2, [pc, #268]	; (8001d6c <HAL_ADC_ConfigChannel+0x600>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_ADC_ConfigChannel+0x500>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a42      	ldr	r2, [pc, #264]	; (8001d70 <HAL_ADC_ConfigChannel+0x604>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x504>
 8001c6c:	4a41      	ldr	r2, [pc, #260]	; (8001d74 <HAL_ADC_ConfigChannel+0x608>)
 8001c6e:	e000      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x506>
 8001c70:	4a41      	ldr	r2, [pc, #260]	; (8001d78 <HAL_ADC_ConfigChannel+0x60c>)
 8001c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f7ff f92b 	bl	8000ed6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c80:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <HAL_ADC_ConfigChannel+0x618>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	4a40      	ldr	r2, [pc, #256]	; (8001d88 <HAL_ADC_ConfigChannel+0x61c>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001c92:	e002      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f9      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ca0:	e05a      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <HAL_ADC_ConfigChannel+0x620>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d11e      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x57e>
 8001cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d119      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <HAL_ADC_ConfigChannel+0x610>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d14b      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a29      	ldr	r2, [pc, #164]	; (8001d6c <HAL_ADC_ConfigChannel+0x600>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_ADC_ConfigChannel+0x568>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a28      	ldr	r2, [pc, #160]	; (8001d70 <HAL_ADC_ConfigChannel+0x604>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x56c>
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_ADC_ConfigChannel+0x608>)
 8001cd6:	e000      	b.n	8001cda <HAL_ADC_ConfigChannel+0x56e>
 8001cd8:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <HAL_ADC_ConfigChannel+0x60c>)
 8001cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f7ff f8f7 	bl	8000ed6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ce8:	e036      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_ADC_ConfigChannel+0x624>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d131      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
 8001cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d12c      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_ADC_ConfigChannel+0x610>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d127      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_ADC_ConfigChannel+0x600>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_ADC_ConfigChannel+0x5b0>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <HAL_ADC_ConfigChannel+0x604>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x5b4>
 8001d1c:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <HAL_ADC_ConfigChannel+0x608>)
 8001d1e:	e000      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x5b6>
 8001d20:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <HAL_ADC_ConfigChannel+0x60c>)
 8001d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f7ff f8d3 	bl	8000ed6 <LL_ADC_SetCommonPathInternalCh>
 8001d30:	e012      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001d44:	e008      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4a:	f043 0220 	orr.w	r2, r3, #32
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3764      	adds	r7, #100	; 0x64
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	40022100 	.word	0x40022100
 8001d74:	40022300 	.word	0x40022300
 8001d78:	58026300 	.word	0x58026300
 8001d7c:	58026000 	.word	0x58026000
 8001d80:	cb840000 	.word	0xcb840000
 8001d84:	24040000 	.word	0x24040000
 8001d88:	053e2d63 	.word	0x053e2d63
 8001d8c:	c7520000 	.word	0xc7520000
 8001d90:	cfb80000 	.word	0xcfb80000

08001d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fa13 	bl	80011cc <LL_ADC_IsEnabled>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d167      	bne.n	8001e7c <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <ADC_Enable+0xf4>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e053      	b.n	8001e7e <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f9ce 	bl	800117c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001de0:	f7ff f82c 	bl	8000e3c <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a28      	ldr	r2, [pc, #160]	; (8001e8c <ADC_Enable+0xf8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d004      	beq.n	8001dfa <ADC_Enable+0x66>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <ADC_Enable+0xfc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <ADC_Enable+0x6a>
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <ADC_Enable+0x100>)
 8001dfc:	e000      	b.n	8001e00 <ADC_Enable+0x6c>
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <ADC_Enable+0x104>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f95f 	bl	80010c4 <LL_ADC_GetMultimode>
 8001e06:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <ADC_Enable+0xfc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d002      	beq.n	8001e18 <ADC_Enable+0x84>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	e000      	b.n	8001e1a <ADC_Enable+0x86>
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <ADC_Enable+0xf8>)
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d025      	beq.n	8001e6e <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d129      	bne.n	8001e7c <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e28:	e021      	b.n	8001e6e <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f9cc 	bl	80011cc <LL_ADC_IsEnabled>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d104      	bne.n	8001e44 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f99c 	bl	800117c <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e44:	f7fe fffa 	bl	8000e3c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d90d      	bls.n	8001e6e <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e007      	b.n	8001e7e <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d1d6      	bne.n	8001e2a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	8000003f 	.word	0x8000003f
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40022100 	.word	0x40022100
 8001e94:	40022300 	.word	0x40022300
 8001e98:	58026300 	.word	0x58026300

08001e9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff f9a2 	bl	80011f2 <LL_ADC_IsDisableOngoing>
 8001eae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f989 	bl	80011cc <LL_ADC_IsEnabled>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d040      	beq.n	8001f42 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d13d      	bne.n	8001f42 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030d 	and.w	r3, r3, #13
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10c      	bne.n	8001eee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff f963 	bl	80011a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ee6:	f7fe ffa9 	bl	8000e3c <HAL_GetTick>
 8001eea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001eec:	e022      	b.n	8001f34 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f043 0210 	orr.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e01c      	b.n	8001f44 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f0a:	f7fe ff97 	bl	8000e3c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d90d      	bls.n	8001f34 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1c:	f043 0210 	orr.w	r2, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e007      	b.n	8001f44 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1e3      	bne.n	8001f0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d14b      	bne.n	8001ffe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d021      	beq.n	8001fc4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f815 	bl	8000fb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d032      	beq.n	8001ff6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d12b      	bne.n	8001ff6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d11f      	bne.n	8001ff6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
 8001fc2:	e018      	b.n	8001ff6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d111      	bne.n	8001ff6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7fe fd1e 	bl	8000a38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ffc:	e00e      	b.n	800201c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fba4 	bl	8001758 <HAL_ADC_ErrorCallback>
}
 8002010:	e004      	b.n	800201c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff fb86 	bl	8001744 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f043 0204 	orr.w	r2, r3, #4
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff fb76 	bl	8001758 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a74      	ldr	r2, [pc, #464]	; (8002254 <ADC_ConfigureBoostMode+0x1e0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <ADC_ConfigureBoostMode+0x1c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a73      	ldr	r2, [pc, #460]	; (8002258 <ADC_ConfigureBoostMode+0x1e4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d109      	bne.n	80020a4 <ADC_ConfigureBoostMode+0x30>
 8002090:	4b72      	ldr	r3, [pc, #456]	; (800225c <ADC_ConfigureBoostMode+0x1e8>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf14      	ite	ne
 800209c:	2301      	movne	r3, #1
 800209e:	2300      	moveq	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e008      	b.n	80020b6 <ADC_ConfigureBoostMode+0x42>
 80020a4:	4b6e      	ldr	r3, [pc, #440]	; (8002260 <ADC_ConfigureBoostMode+0x1ec>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d01a      	beq.n	80020f0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80020ba:	f003 fb81 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 80020be:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020c8:	d006      	beq.n	80020d8 <ADC_ConfigureBoostMode+0x64>
 80020ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020ce:	d00b      	beq.n	80020e8 <ADC_ConfigureBoostMode+0x74>
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d4:	d000      	beq.n	80020d8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80020d6:	e05d      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	60fb      	str	r3, [r7, #12]
        break;
 80020e6:	e055      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	60fb      	str	r3, [r7, #12]
        break;
 80020ee:	e051      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80020f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020f4:	f004 fa70 	bl	80065d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80020f8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002102:	d02a      	beq.n	800215a <ADC_ConfigureBoostMode+0xe6>
 8002104:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002108:	d813      	bhi.n	8002132 <ADC_ConfigureBoostMode+0xbe>
 800210a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800210e:	d024      	beq.n	800215a <ADC_ConfigureBoostMode+0xe6>
 8002110:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002114:	d806      	bhi.n	8002124 <ADC_ConfigureBoostMode+0xb0>
 8002116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800211a:	d01e      	beq.n	800215a <ADC_ConfigureBoostMode+0xe6>
 800211c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002120:	d01b      	beq.n	800215a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002122:	e037      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002128:	d017      	beq.n	800215a <ADC_ConfigureBoostMode+0xe6>
 800212a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800212e:	d014      	beq.n	800215a <ADC_ConfigureBoostMode+0xe6>
        break;
 8002130:	e030      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002132:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002136:	d021      	beq.n	800217c <ADC_ConfigureBoostMode+0x108>
 8002138:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800213c:	d806      	bhi.n	800214c <ADC_ConfigureBoostMode+0xd8>
 800213e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002142:	d013      	beq.n	800216c <ADC_ConfigureBoostMode+0xf8>
 8002144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002148:	d014      	beq.n	8002174 <ADC_ConfigureBoostMode+0x100>
        break;
 800214a:	e023      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800214c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002150:	d018      	beq.n	8002184 <ADC_ConfigureBoostMode+0x110>
 8002152:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002156:	d019      	beq.n	800218c <ADC_ConfigureBoostMode+0x118>
        break;
 8002158:	e01c      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0c9b      	lsrs	r3, r3, #18
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	60fb      	str	r3, [r7, #12]
        break;
 800216a:	e013      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
      break;
 8002172:	e00f      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	60fb      	str	r3, [r7, #12]
        break;
 800217a:	e00b      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	099b      	lsrs	r3, r3, #6
 8002180:	60fb      	str	r3, [r7, #12]
        break;
 8002182:	e007      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	09db      	lsrs	r3, r3, #7
 8002188:	60fb      	str	r3, [r7, #12]
        break;
 800218a:	e003      	b.n	8002194 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	60fb      	str	r3, [r7, #12]
        break;
 8002192:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002194:	f7fe fe80 	bl	8000e98 <HAL_GetREVID>
 8002198:	4602      	mov	r2, r0
 800219a:	f241 0303 	movw	r3, #4099	; 0x1003
 800219e:	429a      	cmp	r2, r3
 80021a0:	d815      	bhi.n	80021ce <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <ADC_ConfigureBoostMode+0x1f0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d908      	bls.n	80021bc <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021b8:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 80021ba:	e047      	b.n	800224c <ADC_ConfigureBoostMode+0x1d8>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ca:	609a      	str	r2, [r3, #8]
}
 80021cc:	e03e      	b.n	800224c <ADC_ConfigureBoostMode+0x1d8>
    freq /= 2U; /* divider by 2 for Rev.V */
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	085b      	lsrs	r3, r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a24      	ldr	r2, [pc, #144]	; (8002268 <ADC_ConfigureBoostMode+0x1f4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d808      	bhi.n	80021ee <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80021ea:	609a      	str	r2, [r3, #8]
}
 80021ec:	e02e      	b.n	800224c <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <ADC_ConfigureBoostMode+0x1f4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d90e      	bls.n	8002214 <ADC_ConfigureBoostMode+0x1a0>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <ADC_ConfigureBoostMode+0x1f8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d80a      	bhi.n	8002214 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	e01b      	b.n	800224c <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a15      	ldr	r2, [pc, #84]	; (800226c <ADC_ConfigureBoostMode+0x1f8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d90e      	bls.n	800223a <ADC_ConfigureBoostMode+0x1c6>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a14      	ldr	r2, [pc, #80]	; (8002270 <ADC_ConfigureBoostMode+0x1fc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d80a      	bhi.n	800223a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e008      	b.n	800224c <ADC_ConfigureBoostMode+0x1d8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002248:	609a      	str	r2, [r3, #8]
}
 800224a:	e7ff      	b.n	800224c <ADC_ConfigureBoostMode+0x1d8>
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40022000 	.word	0x40022000
 8002258:	40022100 	.word	0x40022100
 800225c:	40022300 	.word	0x40022300
 8002260:	58026300 	.word	0x58026300
 8002264:	01312d00 	.word	0x01312d00
 8002268:	005f5e10 	.word	0x005f5e10
 800226c:	00bebc20 	.word	0x00bebc20
 8002270:	017d7840 	.word	0x017d7840

08002274 <LL_ADC_IsEnabled>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <LL_ADC_IsEnabled+0x18>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <LL_ADC_IsEnabled+0x1a>
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <LL_ADC_StartCalibration>:
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <LL_ADC_StartCalibration+0x38>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022bc:	430a      	orrs	r2, r1
 80022be:	4313      	orrs	r3, r2
 80022c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	3ffeffc0 	.word	0x3ffeffc0

080022d8 <LL_ADC_IsCalibrationOnGoing>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022ec:	d101      	bne.n	80022f2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_REG_IsConversionOngoing>:
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b04      	cmp	r3, #4
 8002312:	d101      	bne.n	8002318 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADCEx_Calibration_Start+0x1e>
 8002342:	2302      	movs	r3, #2
 8002344:	e04c      	b.n	80023e0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff fda4 	bl	8001e9c <ADC_Disable>
 8002354:	4603      	mov	r3, r0
 8002356:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d135      	bne.n	80023ca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002362:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002364:	4013      	ands	r3, r2
 8002366:	f043 0202 	orr.w	r2, r3, #2
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff90 	bl	800229c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800237c:	e014      	b.n	80023a8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3301      	adds	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_ADCEx_Calibration_Start+0xc4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d90d      	bls.n	80023a8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	f023 0312 	bic.w	r3, r3, #18
 8002394:	f043 0210 	orr.w	r2, r3, #16
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e01b      	b.n	80023e0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff93 	bl	80022d8 <LL_ADC_IsCalibrationOnGoing>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e2      	bne.n	800237e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	f023 0303 	bic.w	r3, r3, #3
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54
 80023c8:	e005      	b.n	80023d6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f043 0210 	orr.w	r2, r3, #16
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023de:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	ffffeefd 	.word	0xffffeefd
 80023ec:	25c3f7ff 	.word	0x25c3f7ff

080023f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b09f      	sub	sp, #124	; 0x7c
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800240a:	2302      	movs	r3, #2
 800240c:	e0ba      	b.n	8002584 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a5c      	ldr	r2, [pc, #368]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d102      	bne.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002420:	4b5b      	ldr	r3, [pc, #364]	; (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	e001      	b.n	800242a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e09d      	b.n	8002584 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff58 	bl	8002300 <LL_ADC_REG_IsConversionOngoing>
 8002450:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff52 	bl	8002300 <LL_ADC_REG_IsConversionOngoing>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d17f      	bne.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002464:	2b00      	cmp	r3, #0
 8002466:	d17c      	bne.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a47      	ldr	r2, [pc, #284]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a46      	ldr	r2, [pc, #280]	; (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d101      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 800247c:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800247e:	e000      	b.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002480:	4b45      	ldr	r3, [pc, #276]	; (8002598 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002482:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d039      	beq.n	8002500 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800248c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	431a      	orrs	r2, r3
 800249a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3a      	ldr	r2, [pc, #232]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a38      	ldr	r2, [pc, #224]	; (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10e      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80024b2:	4836      	ldr	r0, [pc, #216]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80024b4:	f7ff fede 	bl	8002274 <LL_ADC_IsEnabled>
 80024b8:	4604      	mov	r4, r0
 80024ba:	4835      	ldr	r0, [pc, #212]	; (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80024bc:	f7ff feda 	bl	8002274 <LL_ADC_IsEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4323      	orrs	r3, r4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e008      	b.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80024d0:	4832      	ldr	r0, [pc, #200]	; (800259c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80024d2:	f7ff fecf 	bl	8002274 <LL_ADC_IsEnabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d047      	beq.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	6892      	ldr	r2, [r2, #8]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024fe:	e03a      	b.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d10e      	bne.n	800253e <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002520:	481a      	ldr	r0, [pc, #104]	; (800258c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002522:	f7ff fea7 	bl	8002274 <LL_ADC_IsEnabled>
 8002526:	4604      	mov	r4, r0
 8002528:	4819      	ldr	r0, [pc, #100]	; (8002590 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800252a:	f7ff fea3 	bl	8002274 <LL_ADC_IsEnabled>
 800252e:	4603      	mov	r3, r0
 8002530:	4323      	orrs	r3, r4
 8002532:	2b00      	cmp	r3, #0
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	e008      	b.n	8002550 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 800253e:	4817      	ldr	r0, [pc, #92]	; (800259c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002540:	f7ff fe98 	bl	8002274 <LL_ADC_IsEnabled>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800255a:	4013      	ands	r3, r2
 800255c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800255e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002560:	e009      	b.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002574:	e000      	b.n	8002578 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002576:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002580:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002584:	4618      	mov	r0, r3
 8002586:	377c      	adds	r7, #124	; 0x7c
 8002588:	46bd      	mov	sp, r7
 800258a:	bd90      	pop	{r4, r7, pc}
 800258c:	40022000 	.word	0x40022000
 8002590:	40022100 	.word	0x40022100
 8002594:	40022300 	.word	0x40022300
 8002598:	58026300 	.word	0x58026300
 800259c:	58026000 	.word	0x58026000
 80025a0:	fffff0e0 	.word	0xfffff0e0

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <__NVIC_SetPriorityGrouping+0x40>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <__NVIC_SetPriorityGrouping+0x40>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60d3      	str	r3, [r2, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00
 80025e8:	05fa0000 	.word	0x05fa0000

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <__NVIC_EnableIRQ+0x38>)
 8002622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f7ff ff8e 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff29 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002768:	f7ff ff40 	bl	80025ec <__NVIC_GetPriorityGrouping>
 800276c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7ff ff90 	bl	8002698 <NVIC_EncodePriority>
 8002778:	4602      	mov	r2, r0
 800277a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff5f 	bl	8002644 <__NVIC_SetPriority>
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff33 	bl	8002608 <__NVIC_EnableIRQ>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff ffa4 	bl	8002700 <SysTick_Config>
 80027b8:	4603      	mov	r3, r0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <HAL_GetCurrentCPUID+0x24>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	2b07      	cmp	r3, #7
 80027d4:	d101      	bne.n	80027da <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e000      	b.n	80027dc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80027da:	2301      	movs	r3, #1
  }
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7fe fb22 	bl	8000e3c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e228      	b.n	8002c56 <HAL_DMA_Init+0x46a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a66      	ldr	r2, [pc, #408]	; (80029a4 <HAL_DMA_Init+0x1b8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d04a      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a65      	ldr	r2, [pc, #404]	; (80029a8 <HAL_DMA_Init+0x1bc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d045      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a63      	ldr	r2, [pc, #396]	; (80029ac <HAL_DMA_Init+0x1c0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d040      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a62      	ldr	r2, [pc, #392]	; (80029b0 <HAL_DMA_Init+0x1c4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d03b      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <HAL_DMA_Init+0x1c8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d036      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a5f      	ldr	r2, [pc, #380]	; (80029b8 <HAL_DMA_Init+0x1cc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d031      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a5d      	ldr	r2, [pc, #372]	; (80029bc <HAL_DMA_Init+0x1d0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d02c      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a5c      	ldr	r2, [pc, #368]	; (80029c0 <HAL_DMA_Init+0x1d4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d027      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a5a      	ldr	r2, [pc, #360]	; (80029c4 <HAL_DMA_Init+0x1d8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d022      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a59      	ldr	r2, [pc, #356]	; (80029c8 <HAL_DMA_Init+0x1dc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01d      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a57      	ldr	r2, [pc, #348]	; (80029cc <HAL_DMA_Init+0x1e0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d018      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a56      	ldr	r2, [pc, #344]	; (80029d0 <HAL_DMA_Init+0x1e4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a54      	ldr	r2, [pc, #336]	; (80029d4 <HAL_DMA_Init+0x1e8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a53      	ldr	r2, [pc, #332]	; (80029d8 <HAL_DMA_Init+0x1ec>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a51      	ldr	r2, [pc, #324]	; (80029dc <HAL_DMA_Init+0x1f0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_Init+0xb8>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a50      	ldr	r2, [pc, #320]	; (80029e0 <HAL_DMA_Init+0x1f4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_DMA_Init+0xbc>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_DMA_Init+0xbe>
 80028a8:	2300      	movs	r3, #0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 810b 	beq.w	8002ac6 <HAL_DMA_Init+0x2da>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a37      	ldr	r2, [pc, #220]	; (80029a4 <HAL_DMA_Init+0x1b8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d04a      	beq.n	8002960 <HAL_DMA_Init+0x174>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a36      	ldr	r2, [pc, #216]	; (80029a8 <HAL_DMA_Init+0x1bc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d045      	beq.n	8002960 <HAL_DMA_Init+0x174>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a34      	ldr	r2, [pc, #208]	; (80029ac <HAL_DMA_Init+0x1c0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d040      	beq.n	8002960 <HAL_DMA_Init+0x174>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a33      	ldr	r2, [pc, #204]	; (80029b0 <HAL_DMA_Init+0x1c4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d03b      	beq.n	8002960 <HAL_DMA_Init+0x174>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a31      	ldr	r2, [pc, #196]	; (80029b4 <HAL_DMA_Init+0x1c8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d036      	beq.n	8002960 <HAL_DMA_Init+0x174>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a30      	ldr	r2, [pc, #192]	; (80029b8 <HAL_DMA_Init+0x1cc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d031      	beq.n	8002960 <HAL_DMA_Init+0x174>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a2e      	ldr	r2, [pc, #184]	; (80029bc <HAL_DMA_Init+0x1d0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02c      	beq.n	8002960 <HAL_DMA_Init+0x174>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <HAL_DMA_Init+0x1d4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d027      	beq.n	8002960 <HAL_DMA_Init+0x174>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2b      	ldr	r2, [pc, #172]	; (80029c4 <HAL_DMA_Init+0x1d8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d022      	beq.n	8002960 <HAL_DMA_Init+0x174>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2a      	ldr	r2, [pc, #168]	; (80029c8 <HAL_DMA_Init+0x1dc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d01d      	beq.n	8002960 <HAL_DMA_Init+0x174>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a28      	ldr	r2, [pc, #160]	; (80029cc <HAL_DMA_Init+0x1e0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d018      	beq.n	8002960 <HAL_DMA_Init+0x174>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_DMA_Init+0x1e4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <HAL_DMA_Init+0x174>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <HAL_DMA_Init+0x1e8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00e      	beq.n	8002960 <HAL_DMA_Init+0x174>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a24      	ldr	r2, [pc, #144]	; (80029d8 <HAL_DMA_Init+0x1ec>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_DMA_Init+0x174>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a22      	ldr	r2, [pc, #136]	; (80029dc <HAL_DMA_Init+0x1f0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_DMA_Init+0x174>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <HAL_DMA_Init+0x1f4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d108      	bne.n	8002972 <HAL_DMA_Init+0x186>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e007      	b.n	8002982 <HAL_DMA_Init+0x196>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002982:	e02f      	b.n	80029e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002984:	f7fe fa5a 	bl	8000e3c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b05      	cmp	r3, #5
 8002990:	d928      	bls.n	80029e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2203      	movs	r2, #3
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e158      	b.n	8002c56 <HAL_DMA_Init+0x46a>
 80029a4:	40020010 	.word	0x40020010
 80029a8:	40020028 	.word	0x40020028
 80029ac:	40020040 	.word	0x40020040
 80029b0:	40020058 	.word	0x40020058
 80029b4:	40020070 	.word	0x40020070
 80029b8:	40020088 	.word	0x40020088
 80029bc:	400200a0 	.word	0x400200a0
 80029c0:	400200b8 	.word	0x400200b8
 80029c4:	40020410 	.word	0x40020410
 80029c8:	40020428 	.word	0x40020428
 80029cc:	40020440 	.word	0x40020440
 80029d0:	40020458 	.word	0x40020458
 80029d4:	40020470 	.word	0x40020470
 80029d8:	40020488 	.word	0x40020488
 80029dc:	400204a0 	.word	0x400204a0
 80029e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1c8      	bne.n	8002984 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4b98      	ldr	r3, [pc, #608]	; (8002c60 <HAL_DMA_Init+0x474>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002a0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d107      	bne.n	8002a48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	4313      	orrs	r3, r2
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 0307 	bic.w	r3, r3, #7
 8002a5e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d117      	bne.n	8002aa2 <HAL_DMA_Init+0x2b6>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00e      	beq.n	8002aa2 <HAL_DMA_Init+0x2b6>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f001 fbd9 	bl	800423c <DMA_CheckFifoParam>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_DMA_Init+0x2b6>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2240      	movs	r2, #64	; 0x40
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0d9      	b.n	8002c56 <HAL_DMA_Init+0x46a>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f001 fb14 	bl	80040d8 <DMA_CalcBaseAndBitshift>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	223f      	movs	r2, #63	; 0x3f
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	e08c      	b.n	8002be0 <HAL_DMA_Init+0x3f4>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a66      	ldr	r2, [pc, #408]	; (8002c64 <HAL_DMA_Init+0x478>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d022      	beq.n	8002b16 <HAL_DMA_Init+0x32a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a64      	ldr	r2, [pc, #400]	; (8002c68 <HAL_DMA_Init+0x47c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01d      	beq.n	8002b16 <HAL_DMA_Init+0x32a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a63      	ldr	r2, [pc, #396]	; (8002c6c <HAL_DMA_Init+0x480>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d018      	beq.n	8002b16 <HAL_DMA_Init+0x32a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a61      	ldr	r2, [pc, #388]	; (8002c70 <HAL_DMA_Init+0x484>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_DMA_Init+0x32a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a60      	ldr	r2, [pc, #384]	; (8002c74 <HAL_DMA_Init+0x488>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00e      	beq.n	8002b16 <HAL_DMA_Init+0x32a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a5e      	ldr	r2, [pc, #376]	; (8002c78 <HAL_DMA_Init+0x48c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_DMA_Init+0x32a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a5d      	ldr	r2, [pc, #372]	; (8002c7c <HAL_DMA_Init+0x490>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_DMA_Init+0x32a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a5b      	ldr	r2, [pc, #364]	; (8002c80 <HAL_DMA_Init+0x494>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d101      	bne.n	8002b1a <HAL_DMA_Init+0x32e>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_DMA_Init+0x330>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d056      	beq.n	8002bce <HAL_DMA_Init+0x3e2>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_REQUEST(hdma->Init.Request));

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <HAL_DMA_Init+0x498>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d008      	beq.n	8002b5a <HAL_DMA_Init+0x36e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d102      	bne.n	8002b56 <HAL_DMA_Init+0x36a>
 8002b50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b54:	e002      	b.n	8002b5c <HAL_DMA_Init+0x370>
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_DMA_Init+0x370>
 8002b5a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68d2      	ldr	r2, [r2, #12]
 8002b60:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002b62:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8002b6a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8002b72:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8002b7a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8002b82:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8002b8a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_DMA_Init+0x49c>)
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_DMA_Init+0x4a0>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	009a      	lsls	r2, r3, #2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f001 fa90 	bl	80040d8 <DMA_CalcBaseAndBitshift>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	e008      	b.n	8002be0 <HAL_DMA_Init+0x3f4>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2240      	movs	r2, #64	; 0x40
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e03a      	b.n	8002c56 <HAL_DMA_Init+0x46a>
  }

  /* Initialize parameters for DMAMUX channel :
  DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f001 fba7 	bl	8004334 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d102      	bne.n	8002bf4 <HAL_DMA_Init+0x408>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c08:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
  if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d010      	beq.n	8002c34 <HAL_DMA_Init+0x448>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d80c      	bhi.n	8002c34 <HAL_DMA_Init+0x448>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f001 fc24 	bl	8004468 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register */
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	e008      	b.n	8002c46 <HAL_DMA_Init+0x45a>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	fe10803f 	.word	0xfe10803f
 8002c64:	58025408 	.word	0x58025408
 8002c68:	5802541c 	.word	0x5802541c
 8002c6c:	58025430 	.word	0x58025430
 8002c70:	58025444 	.word	0x58025444
 8002c74:	58025458 	.word	0x58025458
 8002c78:	5802546c 	.word	0x5802546c
 8002c7c:	58025480 	.word	0x58025480
 8002c80:	58025494 	.word	0x58025494
 8002c84:	fffe000f 	.word	0xfffe000f
 8002c88:	a7fdabf8 	.word	0xa7fdabf8
 8002c8c:	cccccccd 	.word	0xcccccccd

08002c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e1a9      	b.n	8003000 <HAL_DMA_Start_IT+0x370>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_DMA_Start_IT+0x2a>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e1a2      	b.n	8003000 <HAL_DMA_Start_IT+0x370>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f040 818d 	bne.w	8002fea <HAL_DMA_Start_IT+0x35a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a68      	ldr	r2, [pc, #416]	; (8002e84 <HAL_DMA_Start_IT+0x1f4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d04a      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a66      	ldr	r2, [pc, #408]	; (8002e88 <HAL_DMA_Start_IT+0x1f8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d045      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a65      	ldr	r2, [pc, #404]	; (8002e8c <HAL_DMA_Start_IT+0x1fc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d040      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a63      	ldr	r2, [pc, #396]	; (8002e90 <HAL_DMA_Start_IT+0x200>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d03b      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a62      	ldr	r2, [pc, #392]	; (8002e94 <HAL_DMA_Start_IT+0x204>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d036      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a60      	ldr	r2, [pc, #384]	; (8002e98 <HAL_DMA_Start_IT+0x208>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d031      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5f      	ldr	r2, [pc, #380]	; (8002e9c <HAL_DMA_Start_IT+0x20c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d02c      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a5d      	ldr	r2, [pc, #372]	; (8002ea0 <HAL_DMA_Start_IT+0x210>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d027      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a5c      	ldr	r2, [pc, #368]	; (8002ea4 <HAL_DMA_Start_IT+0x214>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a5a      	ldr	r2, [pc, #360]	; (8002ea8 <HAL_DMA_Start_IT+0x218>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01d      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a59      	ldr	r2, [pc, #356]	; (8002eac <HAL_DMA_Start_IT+0x21c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d018      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a57      	ldr	r2, [pc, #348]	; (8002eb0 <HAL_DMA_Start_IT+0x220>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a56      	ldr	r2, [pc, #344]	; (8002eb4 <HAL_DMA_Start_IT+0x224>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00e      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a54      	ldr	r2, [pc, #336]	; (8002eb8 <HAL_DMA_Start_IT+0x228>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d009      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a53      	ldr	r2, [pc, #332]	; (8002ebc <HAL_DMA_Start_IT+0x22c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_DMA_Start_IT+0xee>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a51      	ldr	r2, [pc, #324]	; (8002ec0 <HAL_DMA_Start_IT+0x230>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <HAL_DMA_Start_IT+0x100>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e007      	b.n	8002da0 <HAL_DMA_Start_IT+0x110>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f001 f878 	bl	8003e9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <HAL_DMA_Start_IT+0x1f4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d04a      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a33      	ldr	r2, [pc, #204]	; (8002e88 <HAL_DMA_Start_IT+0x1f8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d045      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a31      	ldr	r2, [pc, #196]	; (8002e8c <HAL_DMA_Start_IT+0x1fc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d040      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <HAL_DMA_Start_IT+0x200>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d03b      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a2e      	ldr	r2, [pc, #184]	; (8002e94 <HAL_DMA_Start_IT+0x204>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d036      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2d      	ldr	r2, [pc, #180]	; (8002e98 <HAL_DMA_Start_IT+0x208>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d031      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <HAL_DMA_Start_IT+0x20c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02c      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <HAL_DMA_Start_IT+0x210>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d027      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <HAL_DMA_Start_IT+0x214>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <HAL_DMA_Start_IT+0x218>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d01d      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <HAL_DMA_Start_IT+0x21c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <HAL_DMA_Start_IT+0x220>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_DMA_Start_IT+0x224>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <HAL_DMA_Start_IT+0x228>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <HAL_DMA_Start_IT+0x22c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_DMA_Start_IT+0x1bc>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <HAL_DMA_Start_IT+0x230>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <HAL_DMA_Start_IT+0x1c0>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_DMA_Start_IT+0x1c2>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d036      	beq.n	8002ec4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 021e 	bic.w	r2, r3, #30
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0216 	orr.w	r2, r2, #22
 8002e68:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d03e      	beq.n	8002ef0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0208 	orr.w	r2, r2, #8
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e035      	b.n	8002ef0 <HAL_DMA_Start_IT+0x260>
 8002e84:	40020010 	.word	0x40020010
 8002e88:	40020028 	.word	0x40020028
 8002e8c:	40020040 	.word	0x40020040
 8002e90:	40020058 	.word	0x40020058
 8002e94:	40020070 	.word	0x40020070
 8002e98:	40020088 	.word	0x40020088
 8002e9c:	400200a0 	.word	0x400200a0
 8002ea0:	400200b8 	.word	0x400200b8
 8002ea4:	40020410 	.word	0x40020410
 8002ea8:	40020428 	.word	0x40020428
 8002eac:	40020440 	.word	0x40020440
 8002eb0:	40020458 	.word	0x40020458
 8002eb4:	40020470 	.word	0x40020470
 8002eb8:	40020488 	.word	0x40020488
 8002ebc:	400204a0 	.word	0x400204a0
 8002ec0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 020e 	bic.w	r2, r3, #14
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 020a 	orr.w	r2, r2, #10
 8002ed6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0204 	orr.w	r2, r2, #4
 8002eee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Check if DMAMUX Synchronization is enabled */
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_DMA_Start_IT+0x27e>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_DMA_Start_IT+0x296>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT */
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a37      	ldr	r2, [pc, #220]	; (8003008 <HAL_DMA_Start_IT+0x378>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d04a      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a35      	ldr	r2, [pc, #212]	; (800300c <HAL_DMA_Start_IT+0x37c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d045      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a34      	ldr	r2, [pc, #208]	; (8003010 <HAL_DMA_Start_IT+0x380>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d040      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a32      	ldr	r2, [pc, #200]	; (8003014 <HAL_DMA_Start_IT+0x384>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d03b      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a31      	ldr	r2, [pc, #196]	; (8003018 <HAL_DMA_Start_IT+0x388>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d036      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2f      	ldr	r2, [pc, #188]	; (800301c <HAL_DMA_Start_IT+0x38c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d031      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2e      	ldr	r2, [pc, #184]	; (8003020 <HAL_DMA_Start_IT+0x390>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d02c      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2c      	ldr	r2, [pc, #176]	; (8003024 <HAL_DMA_Start_IT+0x394>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d027      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2b      	ldr	r2, [pc, #172]	; (8003028 <HAL_DMA_Start_IT+0x398>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d022      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a29      	ldr	r2, [pc, #164]	; (800302c <HAL_DMA_Start_IT+0x39c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01d      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a28      	ldr	r2, [pc, #160]	; (8003030 <HAL_DMA_Start_IT+0x3a0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d018      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a26      	ldr	r2, [pc, #152]	; (8003034 <HAL_DMA_Start_IT+0x3a4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a25      	ldr	r2, [pc, #148]	; (8003038 <HAL_DMA_Start_IT+0x3a8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00e      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a23      	ldr	r2, [pc, #140]	; (800303c <HAL_DMA_Start_IT+0x3ac>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_DMA_Start_IT+0x3b0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <HAL_DMA_Start_IT+0x336>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HAL_DMA_Start_IT+0x3b4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <HAL_DMA_Start_IT+0x348>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e012      	b.n	8002ffe <HAL_DMA_Start_IT+0x36e>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e009      	b.n	8002ffe <HAL_DMA_Start_IT+0x36e>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40020010 	.word	0x40020010
 800300c:	40020028 	.word	0x40020028
 8003010:	40020040 	.word	0x40020040
 8003014:	40020058 	.word	0x40020058
 8003018:	40020070 	.word	0x40020070
 800301c:	40020088 	.word	0x40020088
 8003020:	400200a0 	.word	0x400200a0
 8003024:	400200b8 	.word	0x400200b8
 8003028:	40020410 	.word	0x40020410
 800302c:	40020428 	.word	0x40020428
 8003030:	40020440 	.word	0x40020440
 8003034:	40020458 	.word	0x40020458
 8003038:	40020470 	.word	0x40020470
 800303c:	40020488 	.word	0x40020488
 8003040:	400204a0 	.word	0x400204a0
 8003044:	400204b8 	.word	0x400204b8

08003048 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003054:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <HAL_DMA_IRQHandler+0x1ac>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a67      	ldr	r2, [pc, #412]	; (80031f8 <HAL_DMA_IRQHandler+0x1b0>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a5f      	ldr	r2, [pc, #380]	; (80031fc <HAL_DMA_IRQHandler+0x1b4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d04a      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a5d      	ldr	r2, [pc, #372]	; (8003200 <HAL_DMA_IRQHandler+0x1b8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d045      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a5c      	ldr	r2, [pc, #368]	; (8003204 <HAL_DMA_IRQHandler+0x1bc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d040      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a5a      	ldr	r2, [pc, #360]	; (8003208 <HAL_DMA_IRQHandler+0x1c0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d03b      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a59      	ldr	r2, [pc, #356]	; (800320c <HAL_DMA_IRQHandler+0x1c4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d036      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a57      	ldr	r2, [pc, #348]	; (8003210 <HAL_DMA_IRQHandler+0x1c8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d031      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a56      	ldr	r2, [pc, #344]	; (8003214 <HAL_DMA_IRQHandler+0x1cc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d02c      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a54      	ldr	r2, [pc, #336]	; (8003218 <HAL_DMA_IRQHandler+0x1d0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d027      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a53      	ldr	r2, [pc, #332]	; (800321c <HAL_DMA_IRQHandler+0x1d4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d022      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a51      	ldr	r2, [pc, #324]	; (8003220 <HAL_DMA_IRQHandler+0x1d8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01d      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a50      	ldr	r2, [pc, #320]	; (8003224 <HAL_DMA_IRQHandler+0x1dc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d018      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4e      	ldr	r2, [pc, #312]	; (8003228 <HAL_DMA_IRQHandler+0x1e0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a4d      	ldr	r2, [pc, #308]	; (800322c <HAL_DMA_IRQHandler+0x1e4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00e      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a4b      	ldr	r2, [pc, #300]	; (8003230 <HAL_DMA_IRQHandler+0x1e8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a4a      	ldr	r2, [pc, #296]	; (8003234 <HAL_DMA_IRQHandler+0x1ec>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_DMA_IRQHandler+0xd2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a48      	ldr	r2, [pc, #288]	; (8003238 <HAL_DMA_IRQHandler+0x1f0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_DMA_IRQHandler+0xd6>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_DMA_IRQHandler+0xd8>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 842b 	beq.w	800397c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	2208      	movs	r2, #8
 8003130:	409a      	lsls	r2, r3
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80a2 	beq.w	8003280 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <HAL_DMA_IRQHandler+0x1b4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d04a      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2d      	ldr	r2, [pc, #180]	; (8003200 <HAL_DMA_IRQHandler+0x1b8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d045      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_DMA_IRQHandler+0x1bc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d040      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <HAL_DMA_IRQHandler+0x1c0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d03b      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a28      	ldr	r2, [pc, #160]	; (800320c <HAL_DMA_IRQHandler+0x1c4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d036      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a27      	ldr	r2, [pc, #156]	; (8003210 <HAL_DMA_IRQHandler+0x1c8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d031      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a25      	ldr	r2, [pc, #148]	; (8003214 <HAL_DMA_IRQHandler+0x1cc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d02c      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_DMA_IRQHandler+0x1d0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d027      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_DMA_IRQHandler+0x1d4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d022      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a21      	ldr	r2, [pc, #132]	; (8003220 <HAL_DMA_IRQHandler+0x1d8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d01d      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <HAL_DMA_IRQHandler+0x1dc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d018      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_DMA_IRQHandler+0x1e0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d013      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_DMA_IRQHandler+0x1e4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00e      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_DMA_IRQHandler+0x1e8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d009      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_DMA_IRQHandler+0x1ec>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <HAL_DMA_IRQHandler+0x194>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_DMA_IRQHandler+0x1f0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d12f      	bne.n	800323c <HAL_DMA_IRQHandler+0x1f4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf14      	ite	ne
 80031ea:	2301      	movne	r3, #1
 80031ec:	2300      	moveq	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e02e      	b.n	8003250 <HAL_DMA_IRQHandler+0x208>
 80031f2:	bf00      	nop
 80031f4:	24040000 	.word	0x24040000
 80031f8:	1b4e81b5 	.word	0x1b4e81b5
 80031fc:	40020010 	.word	0x40020010
 8003200:	40020028 	.word	0x40020028
 8003204:	40020040 	.word	0x40020040
 8003208:	40020058 	.word	0x40020058
 800320c:	40020070 	.word	0x40020070
 8003210:	40020088 	.word	0x40020088
 8003214:	400200a0 	.word	0x400200a0
 8003218:	400200b8 	.word	0x400200b8
 800321c:	40020410 	.word	0x40020410
 8003220:	40020428 	.word	0x40020428
 8003224:	40020440 	.word	0x40020440
 8003228:	40020458 	.word	0x40020458
 800322c:	40020470 	.word	0x40020470
 8003230:	40020488 	.word	0x40020488
 8003234:	400204a0 	.word	0x400204a0
 8003238:	400204b8 	.word	0x400204b8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf14      	ite	ne
 800324a:	2301      	movne	r3, #1
 800324c:	2300      	moveq	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0204 	bic.w	r2, r2, #4
 8003262:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2208      	movs	r2, #8
 800326e:	409a      	lsls	r2, r3
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d06e      	beq.n	8003374 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a69      	ldr	r2, [pc, #420]	; (8003440 <HAL_DMA_IRQHandler+0x3f8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a67      	ldr	r2, [pc, #412]	; (8003444 <HAL_DMA_IRQHandler+0x3fc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a66      	ldr	r2, [pc, #408]	; (8003448 <HAL_DMA_IRQHandler+0x400>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a64      	ldr	r2, [pc, #400]	; (800344c <HAL_DMA_IRQHandler+0x404>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a63      	ldr	r2, [pc, #396]	; (8003450 <HAL_DMA_IRQHandler+0x408>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a61      	ldr	r2, [pc, #388]	; (8003454 <HAL_DMA_IRQHandler+0x40c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a60      	ldr	r2, [pc, #384]	; (8003458 <HAL_DMA_IRQHandler+0x410>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a5e      	ldr	r2, [pc, #376]	; (800345c <HAL_DMA_IRQHandler+0x414>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a5d      	ldr	r2, [pc, #372]	; (8003460 <HAL_DMA_IRQHandler+0x418>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a5b      	ldr	r2, [pc, #364]	; (8003464 <HAL_DMA_IRQHandler+0x41c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a5a      	ldr	r2, [pc, #360]	; (8003468 <HAL_DMA_IRQHandler+0x420>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a58      	ldr	r2, [pc, #352]	; (800346c <HAL_DMA_IRQHandler+0x424>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a57      	ldr	r2, [pc, #348]	; (8003470 <HAL_DMA_IRQHandler+0x428>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a55      	ldr	r2, [pc, #340]	; (8003474 <HAL_DMA_IRQHandler+0x42c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a54      	ldr	r2, [pc, #336]	; (8003478 <HAL_DMA_IRQHandler+0x430>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2ee>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a52      	ldr	r2, [pc, #328]	; (800347c <HAL_DMA_IRQHandler+0x434>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10a      	bne.n	800334c <HAL_DMA_IRQHandler+0x304>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e003      	b.n	8003354 <HAL_DMA_IRQHandler+0x30c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00d      	beq.n	8003374 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f043 0202 	orr.w	r2, r3, #2
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2204      	movs	r2, #4
 800337e:	409a      	lsls	r2, r3
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 808f 	beq.w	80034a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <HAL_DMA_IRQHandler+0x3f8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d04a      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <HAL_DMA_IRQHandler+0x3fc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d045      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a29      	ldr	r2, [pc, #164]	; (8003448 <HAL_DMA_IRQHandler+0x400>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d040      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a27      	ldr	r2, [pc, #156]	; (800344c <HAL_DMA_IRQHandler+0x404>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d03b      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a26      	ldr	r2, [pc, #152]	; (8003450 <HAL_DMA_IRQHandler+0x408>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d036      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <HAL_DMA_IRQHandler+0x40c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d031      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a23      	ldr	r2, [pc, #140]	; (8003458 <HAL_DMA_IRQHandler+0x410>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d02c      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a21      	ldr	r2, [pc, #132]	; (800345c <HAL_DMA_IRQHandler+0x414>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d027      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a20      	ldr	r2, [pc, #128]	; (8003460 <HAL_DMA_IRQHandler+0x418>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d022      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <HAL_DMA_IRQHandler+0x41c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01d      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_DMA_IRQHandler+0x420>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d018      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1b      	ldr	r2, [pc, #108]	; (800346c <HAL_DMA_IRQHandler+0x424>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1a      	ldr	r2, [pc, #104]	; (8003470 <HAL_DMA_IRQHandler+0x428>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_DMA_IRQHandler+0x42c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a17      	ldr	r2, [pc, #92]	; (8003478 <HAL_DMA_IRQHandler+0x430>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_DMA_IRQHandler+0x3e2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a15      	ldr	r2, [pc, #84]	; (800347c <HAL_DMA_IRQHandler+0x434>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d12a      	bne.n	8003480 <HAL_DMA_IRQHandler+0x438>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e023      	b.n	8003488 <HAL_DMA_IRQHandler+0x440>
 8003440:	40020010 	.word	0x40020010
 8003444:	40020028 	.word	0x40020028
 8003448:	40020040 	.word	0x40020040
 800344c:	40020058 	.word	0x40020058
 8003450:	40020070 	.word	0x40020070
 8003454:	40020088 	.word	0x40020088
 8003458:	400200a0 	.word	0x400200a0
 800345c:	400200b8 	.word	0x400200b8
 8003460:	40020410 	.word	0x40020410
 8003464:	40020428 	.word	0x40020428
 8003468:	40020440 	.word	0x40020440
 800346c:	40020458 	.word	0x40020458
 8003470:	40020470 	.word	0x40020470
 8003474:	40020488 	.word	0x40020488
 8003478:	400204a0 	.word	0x400204a0
 800347c:	400204b8 	.word	0x400204b8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2204      	movs	r2, #4
 8003496:	409a      	lsls	r2, r3
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2210      	movs	r2, #16
 80034b2:	409a      	lsls	r2, r3
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a6 	beq.w	800360a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a85      	ldr	r2, [pc, #532]	; (80036d8 <HAL_DMA_IRQHandler+0x690>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d04a      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a83      	ldr	r2, [pc, #524]	; (80036dc <HAL_DMA_IRQHandler+0x694>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d045      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a82      	ldr	r2, [pc, #520]	; (80036e0 <HAL_DMA_IRQHandler+0x698>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d040      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a80      	ldr	r2, [pc, #512]	; (80036e4 <HAL_DMA_IRQHandler+0x69c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d03b      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7f      	ldr	r2, [pc, #508]	; (80036e8 <HAL_DMA_IRQHandler+0x6a0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d036      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a7d      	ldr	r2, [pc, #500]	; (80036ec <HAL_DMA_IRQHandler+0x6a4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d031      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7c      	ldr	r2, [pc, #496]	; (80036f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d02c      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a7a      	ldr	r2, [pc, #488]	; (80036f4 <HAL_DMA_IRQHandler+0x6ac>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d027      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a79      	ldr	r2, [pc, #484]	; (80036f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d022      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a77      	ldr	r2, [pc, #476]	; (80036fc <HAL_DMA_IRQHandler+0x6b4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01d      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a76      	ldr	r2, [pc, #472]	; (8003700 <HAL_DMA_IRQHandler+0x6b8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d018      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a74      	ldr	r2, [pc, #464]	; (8003704 <HAL_DMA_IRQHandler+0x6bc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a73      	ldr	r2, [pc, #460]	; (8003708 <HAL_DMA_IRQHandler+0x6c0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00e      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a71      	ldr	r2, [pc, #452]	; (800370c <HAL_DMA_IRQHandler+0x6c4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d009      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a70      	ldr	r2, [pc, #448]	; (8003710 <HAL_DMA_IRQHandler+0x6c8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_DMA_IRQHandler+0x516>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_DMA_IRQHandler+0x6cc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10a      	bne.n	8003574 <HAL_DMA_IRQHandler+0x52c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e009      	b.n	8003588 <HAL_DMA_IRQHandler+0x540>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03e      	beq.n	800360a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	2210      	movs	r2, #16
 8003596:	409a      	lsls	r2, r3
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d018      	beq.n	80035dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d108      	bne.n	80035ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d024      	beq.n	800360a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
 80035c8:	e01f      	b.n	800360a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01b      	beq.n	800360a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4798      	blx	r3
 80035da:	e016      	b.n	800360a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d107      	bne.n	80035fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0208 	bic.w	r2, r2, #8
 80035f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2220      	movs	r2, #32
 8003614:	409a      	lsls	r2, r3
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8110 	beq.w	8003840 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <HAL_DMA_IRQHandler+0x690>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d04a      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <HAL_DMA_IRQHandler+0x694>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d045      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_DMA_IRQHandler+0x698>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d040      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a28      	ldr	r2, [pc, #160]	; (80036e4 <HAL_DMA_IRQHandler+0x69c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d03b      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <HAL_DMA_IRQHandler+0x6a0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d036      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a25      	ldr	r2, [pc, #148]	; (80036ec <HAL_DMA_IRQHandler+0x6a4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d031      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <HAL_DMA_IRQHandler+0x6a8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02c      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <HAL_DMA_IRQHandler+0x6ac>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d027      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a20      	ldr	r2, [pc, #128]	; (80036f8 <HAL_DMA_IRQHandler+0x6b0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_DMA_IRQHandler+0x6b4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01d      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <HAL_DMA_IRQHandler+0x6b8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_DMA_IRQHandler+0x6bc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <HAL_DMA_IRQHandler+0x6c0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_DMA_IRQHandler+0x6c4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_DMA_IRQHandler+0x6c8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x678>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_DMA_IRQHandler+0x6cc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d12b      	bne.n	8003718 <HAL_DMA_IRQHandler+0x6d0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	e02a      	b.n	800372c <HAL_DMA_IRQHandler+0x6e4>
 80036d6:	bf00      	nop
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8087 	beq.w	8003840 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2220      	movs	r2, #32
 800373c:	409a      	lsls	r2, r3
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b04      	cmp	r3, #4
 800374c:	d139      	bne.n	80037c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0216 	bic.w	r2, r2, #22
 800375c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800376c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <HAL_DMA_IRQHandler+0x736>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0208 	bic.w	r2, r2, #8
 800378c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	223f      	movs	r2, #63	; 0x3f
 8003798:	409a      	lsls	r2, r3
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 834a 	beq.w	8003e4c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	4798      	blx	r3
          }
          return;
 80037c0:	e344      	b.n	8003e4c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d018      	beq.n	8003802 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d02c      	beq.n	8003840 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
 80037ee:	e027      	b.n	8003840 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d023      	beq.n	8003840 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
 8003800:	e01e      	b.n	8003840 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0210 	bic.w	r2, r2, #16
 800381e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8306 	beq.w	8003e56 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8088 	beq.w	8003968 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2204      	movs	r2, #4
 800385c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a7a      	ldr	r2, [pc, #488]	; (8003a50 <HAL_DMA_IRQHandler+0xa08>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d04a      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a79      	ldr	r2, [pc, #484]	; (8003a54 <HAL_DMA_IRQHandler+0xa0c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d045      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a77      	ldr	r2, [pc, #476]	; (8003a58 <HAL_DMA_IRQHandler+0xa10>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d040      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a76      	ldr	r2, [pc, #472]	; (8003a5c <HAL_DMA_IRQHandler+0xa14>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d03b      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a74      	ldr	r2, [pc, #464]	; (8003a60 <HAL_DMA_IRQHandler+0xa18>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d036      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a73      	ldr	r2, [pc, #460]	; (8003a64 <HAL_DMA_IRQHandler+0xa1c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d031      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a71      	ldr	r2, [pc, #452]	; (8003a68 <HAL_DMA_IRQHandler+0xa20>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d02c      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a70      	ldr	r2, [pc, #448]	; (8003a6c <HAL_DMA_IRQHandler+0xa24>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d027      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6e      	ldr	r2, [pc, #440]	; (8003a70 <HAL_DMA_IRQHandler+0xa28>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d022      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6d      	ldr	r2, [pc, #436]	; (8003a74 <HAL_DMA_IRQHandler+0xa2c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d01d      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6b      	ldr	r2, [pc, #428]	; (8003a78 <HAL_DMA_IRQHandler+0xa30>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d018      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6a      	ldr	r2, [pc, #424]	; (8003a7c <HAL_DMA_IRQHandler+0xa34>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a68      	ldr	r2, [pc, #416]	; (8003a80 <HAL_DMA_IRQHandler+0xa38>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00e      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <HAL_DMA_IRQHandler+0xa3c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a65      	ldr	r2, [pc, #404]	; (8003a88 <HAL_DMA_IRQHandler+0xa40>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_DMA_IRQHandler+0x8b8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a64      	ldr	r2, [pc, #400]	; (8003a8c <HAL_DMA_IRQHandler+0xa44>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d108      	bne.n	8003912 <HAL_DMA_IRQHandler+0x8ca>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	e007      	b.n	8003922 <HAL_DMA_IRQHandler+0x8da>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3301      	adds	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392a:	429a      	cmp	r2, r3
 800392c:	d307      	bcc.n	800393e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f2      	bne.n	8003922 <HAL_DMA_IRQHandler+0x8da>
 800393c:	e000      	b.n	8003940 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800393e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2203      	movs	r2, #3
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800395e:	e003      	b.n	8003968 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8272 	beq.w	8003e56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
 800397a:	e26c      	b.n	8003e56 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a43      	ldr	r2, [pc, #268]	; (8003a90 <HAL_DMA_IRQHandler+0xa48>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d022      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a42      	ldr	r2, [pc, #264]	; (8003a94 <HAL_DMA_IRQHandler+0xa4c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d01d      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a40      	ldr	r2, [pc, #256]	; (8003a98 <HAL_DMA_IRQHandler+0xa50>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d018      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3f      	ldr	r2, [pc, #252]	; (8003a9c <HAL_DMA_IRQHandler+0xa54>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3d      	ldr	r2, [pc, #244]	; (8003aa0 <HAL_DMA_IRQHandler+0xa58>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3c      	ldr	r2, [pc, #240]	; (8003aa4 <HAL_DMA_IRQHandler+0xa5c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a3a      	ldr	r2, [pc, #232]	; (8003aa8 <HAL_DMA_IRQHandler+0xa60>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_DMA_IRQHandler+0x984>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a39      	ldr	r2, [pc, #228]	; (8003aac <HAL_DMA_IRQHandler+0xa64>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x988>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_DMA_IRQHandler+0x98a>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 823f 	beq.w	8003e56 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	2204      	movs	r2, #4
 80039ea:	409a      	lsls	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80cd 	beq.w	8003b90 <HAL_DMA_IRQHandler+0xb48>
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80c7 	beq.w	8003b90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d049      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8210 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a38:	e20a      	b.n	8003e50 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8206 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a4c:	e200      	b.n	8003e50 <HAL_DMA_IRQHandler+0xe08>
 8003a4e:	bf00      	nop
 8003a50:	40020010 	.word	0x40020010
 8003a54:	40020028 	.word	0x40020028
 8003a58:	40020040 	.word	0x40020040
 8003a5c:	40020058 	.word	0x40020058
 8003a60:	40020070 	.word	0x40020070
 8003a64:	40020088 	.word	0x40020088
 8003a68:	400200a0 	.word	0x400200a0
 8003a6c:	400200b8 	.word	0x400200b8
 8003a70:	40020410 	.word	0x40020410
 8003a74:	40020428 	.word	0x40020428
 8003a78:	40020440 	.word	0x40020440
 8003a7c:	40020458 	.word	0x40020458
 8003a80:	40020470 	.word	0x40020470
 8003a84:	40020488 	.word	0x40020488
 8003a88:	400204a0 	.word	0x400204a0
 8003a8c:	400204b8 	.word	0x400204b8
 8003a90:	58025408 	.word	0x58025408
 8003a94:	5802541c 	.word	0x5802541c
 8003a98:	58025430 	.word	0x58025430
 8003a9c:	58025444 	.word	0x58025444
 8003aa0:	58025458 	.word	0x58025458
 8003aa4:	5802546c 	.word	0x5802546c
 8003aa8:	58025480 	.word	0x58025480
 8003aac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d160      	bne.n	8003b7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a8c      	ldr	r2, [pc, #560]	; (8003cf0 <HAL_DMA_IRQHandler+0xca8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d04a      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a8a      	ldr	r2, [pc, #552]	; (8003cf4 <HAL_DMA_IRQHandler+0xcac>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d045      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a89      	ldr	r2, [pc, #548]	; (8003cf8 <HAL_DMA_IRQHandler+0xcb0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d040      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a87      	ldr	r2, [pc, #540]	; (8003cfc <HAL_DMA_IRQHandler+0xcb4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d03b      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a86      	ldr	r2, [pc, #536]	; (8003d00 <HAL_DMA_IRQHandler+0xcb8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d036      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a84      	ldr	r2, [pc, #528]	; (8003d04 <HAL_DMA_IRQHandler+0xcbc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d031      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a83      	ldr	r2, [pc, #524]	; (8003d08 <HAL_DMA_IRQHandler+0xcc0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d02c      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a81      	ldr	r2, [pc, #516]	; (8003d0c <HAL_DMA_IRQHandler+0xcc4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d027      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a80      	ldr	r2, [pc, #512]	; (8003d10 <HAL_DMA_IRQHandler+0xcc8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a7e      	ldr	r2, [pc, #504]	; (8003d14 <HAL_DMA_IRQHandler+0xccc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01d      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7d      	ldr	r2, [pc, #500]	; (8003d18 <HAL_DMA_IRQHandler+0xcd0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d018      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7b      	ldr	r2, [pc, #492]	; (8003d1c <HAL_DMA_IRQHandler+0xcd4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7a      	ldr	r2, [pc, #488]	; (8003d20 <HAL_DMA_IRQHandler+0xcd8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a78      	ldr	r2, [pc, #480]	; (8003d24 <HAL_DMA_IRQHandler+0xcdc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a77      	ldr	r2, [pc, #476]	; (8003d28 <HAL_DMA_IRQHandler+0xce0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xb12>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a75      	ldr	r2, [pc, #468]	; (8003d2c <HAL_DMA_IRQHandler+0xce4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <HAL_DMA_IRQHandler+0xb24>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0208 	bic.w	r2, r2, #8
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e007      	b.n	8003b7c <HAL_DMA_IRQHandler+0xb34>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0204 	bic.w	r2, r2, #4
 8003b7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8165 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b8e:	e15f      	b.n	8003e50 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2202      	movs	r2, #2
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80c5 	beq.w	8003d30 <HAL_DMA_IRQHandler+0xce8>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80bf 	beq.w	8003d30 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2202      	movs	r2, #2
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d018      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 813a 	beq.w	8003e54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be8:	e134      	b.n	8003e54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8130 	beq.w	8003e54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bfc:	e12a      	b.n	8003e54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d168      	bne.n	8003cda <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a38      	ldr	r2, [pc, #224]	; (8003cf0 <HAL_DMA_IRQHandler+0xca8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d04a      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a37      	ldr	r2, [pc, #220]	; (8003cf4 <HAL_DMA_IRQHandler+0xcac>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d045      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a35      	ldr	r2, [pc, #212]	; (8003cf8 <HAL_DMA_IRQHandler+0xcb0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d040      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a34      	ldr	r2, [pc, #208]	; (8003cfc <HAL_DMA_IRQHandler+0xcb4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d03b      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a32      	ldr	r2, [pc, #200]	; (8003d00 <HAL_DMA_IRQHandler+0xcb8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d036      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a31      	ldr	r2, [pc, #196]	; (8003d04 <HAL_DMA_IRQHandler+0xcbc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d031      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2f      	ldr	r2, [pc, #188]	; (8003d08 <HAL_DMA_IRQHandler+0xcc0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d02c      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2e      	ldr	r2, [pc, #184]	; (8003d0c <HAL_DMA_IRQHandler+0xcc4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d027      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <HAL_DMA_IRQHandler+0xcc8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d022      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2b      	ldr	r2, [pc, #172]	; (8003d14 <HAL_DMA_IRQHandler+0xccc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d01d      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a29      	ldr	r2, [pc, #164]	; (8003d18 <HAL_DMA_IRQHandler+0xcd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d018      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a28      	ldr	r2, [pc, #160]	; (8003d1c <HAL_DMA_IRQHandler+0xcd4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d013      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <HAL_DMA_IRQHandler+0xcd8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00e      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a25      	ldr	r2, [pc, #148]	; (8003d24 <HAL_DMA_IRQHandler+0xcdc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <HAL_DMA_IRQHandler+0xce0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xc60>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <HAL_DMA_IRQHandler+0xce4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d108      	bne.n	8003cba <HAL_DMA_IRQHandler+0xc72>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0214 	bic.w	r2, r2, #20
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e007      	b.n	8003cca <HAL_DMA_IRQHandler+0xc82>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 020a 	bic.w	r2, r2, #10
 8003cc8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80b8 	beq.w	8003e54 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cec:	e0b2      	b.n	8003e54 <HAL_DMA_IRQHandler+0xe0c>
 8003cee:	bf00      	nop
 8003cf0:	40020010 	.word	0x40020010
 8003cf4:	40020028 	.word	0x40020028
 8003cf8:	40020040 	.word	0x40020040
 8003cfc:	40020058 	.word	0x40020058
 8003d00:	40020070 	.word	0x40020070
 8003d04:	40020088 	.word	0x40020088
 8003d08:	400200a0 	.word	0x400200a0
 8003d0c:	400200b8 	.word	0x400200b8
 8003d10:	40020410 	.word	0x40020410
 8003d14:	40020428 	.word	0x40020428
 8003d18:	40020440 	.word	0x40020440
 8003d1c:	40020458 	.word	0x40020458
 8003d20:	40020470 	.word	0x40020470
 8003d24:	40020488 	.word	0x40020488
 8003d28:	400204a0 	.word	0x400204a0
 8003d2c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2208      	movs	r2, #8
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8088 	beq.w	8003e56 <HAL_DMA_IRQHandler+0xe0e>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8082 	beq.w	8003e56 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a41      	ldr	r2, [pc, #260]	; (8003e5c <HAL_DMA_IRQHandler+0xe14>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04a      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3f      	ldr	r2, [pc, #252]	; (8003e60 <HAL_DMA_IRQHandler+0xe18>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d045      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3e      	ldr	r2, [pc, #248]	; (8003e64 <HAL_DMA_IRQHandler+0xe1c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a3c      	ldr	r2, [pc, #240]	; (8003e68 <HAL_DMA_IRQHandler+0xe20>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <HAL_DMA_IRQHandler+0xe24>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d036      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a39      	ldr	r2, [pc, #228]	; (8003e70 <HAL_DMA_IRQHandler+0xe28>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a38      	ldr	r2, [pc, #224]	; (8003e74 <HAL_DMA_IRQHandler+0xe2c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d02c      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a36      	ldr	r2, [pc, #216]	; (8003e78 <HAL_DMA_IRQHandler+0xe30>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d027      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a35      	ldr	r2, [pc, #212]	; (8003e7c <HAL_DMA_IRQHandler+0xe34>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d022      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a33      	ldr	r2, [pc, #204]	; (8003e80 <HAL_DMA_IRQHandler+0xe38>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a32      	ldr	r2, [pc, #200]	; (8003e84 <HAL_DMA_IRQHandler+0xe3c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d018      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a30      	ldr	r2, [pc, #192]	; (8003e88 <HAL_DMA_IRQHandler+0xe40>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <HAL_DMA_IRQHandler+0xe44>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <HAL_DMA_IRQHandler+0xe48>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2c      	ldr	r2, [pc, #176]	; (8003e94 <HAL_DMA_IRQHandler+0xe4c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xdaa>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <HAL_DMA_IRQHandler+0xe50>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d108      	bne.n	8003e04 <HAL_DMA_IRQHandler+0xdbc>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 021c 	bic.w	r2, r2, #28
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e007      	b.n	8003e14 <HAL_DMA_IRQHandler+0xdcc>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 020e 	bic.w	r2, r2, #14
 8003e12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
 8003e4a:	e004      	b.n	8003e56 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e56:	3728      	adds	r7, #40	; 0x28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40020010 	.word	0x40020010
 8003e60:	40020028 	.word	0x40020028
 8003e64:	40020040 	.word	0x40020040
 8003e68:	40020058 	.word	0x40020058
 8003e6c:	40020070 	.word	0x40020070
 8003e70:	40020088 	.word	0x40020088
 8003e74:	400200a0 	.word	0x400200a0
 8003e78:	400200b8 	.word	0x400200b8
 8003e7c:	40020410 	.word	0x40020410
 8003e80:	40020428 	.word	0x40020428
 8003e84:	40020440 	.word	0x40020440
 8003e88:	40020458 	.word	0x40020458
 8003e8c:	40020470 	.word	0x40020470
 8003e90:	40020488 	.word	0x40020488
 8003e94:	400204a0 	.word	0x400204a0
 8003e98:	400204b8 	.word	0x400204b8

08003e9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ebe:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <DMA_SetConfig+0x36>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ed0:	605a      	str	r2, [r3, #4]
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a68      	ldr	r2, [pc, #416]	; (8004078 <DMA_SetConfig+0x1dc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d04a      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a66      	ldr	r2, [pc, #408]	; (800407c <DMA_SetConfig+0x1e0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d045      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a65      	ldr	r2, [pc, #404]	; (8004080 <DMA_SetConfig+0x1e4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d040      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a63      	ldr	r2, [pc, #396]	; (8004084 <DMA_SetConfig+0x1e8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d03b      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a62      	ldr	r2, [pc, #392]	; (8004088 <DMA_SetConfig+0x1ec>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d036      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a60      	ldr	r2, [pc, #384]	; (800408c <DMA_SetConfig+0x1f0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d031      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5f      	ldr	r2, [pc, #380]	; (8004090 <DMA_SetConfig+0x1f4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d02c      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5d      	ldr	r2, [pc, #372]	; (8004094 <DMA_SetConfig+0x1f8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d027      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a5c      	ldr	r2, [pc, #368]	; (8004098 <DMA_SetConfig+0x1fc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d022      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a5a      	ldr	r2, [pc, #360]	; (800409c <DMA_SetConfig+0x200>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d01d      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a59      	ldr	r2, [pc, #356]	; (80040a0 <DMA_SetConfig+0x204>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d018      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a57      	ldr	r2, [pc, #348]	; (80040a4 <DMA_SetConfig+0x208>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a56      	ldr	r2, [pc, #344]	; (80040a8 <DMA_SetConfig+0x20c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00e      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a54      	ldr	r2, [pc, #336]	; (80040ac <DMA_SetConfig+0x210>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a53      	ldr	r2, [pc, #332]	; (80040b0 <DMA_SetConfig+0x214>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d004      	beq.n	8003f72 <DMA_SetConfig+0xd6>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a51      	ldr	r2, [pc, #324]	; (80040b4 <DMA_SetConfig+0x218>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <DMA_SetConfig+0xda>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <DMA_SetConfig+0xdc>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d029      	beq.n	8003fd0 <DMA_SetConfig+0x134>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	223f      	movs	r2, #63	; 0x3f
 8003f86:	409a      	lsls	r2, r3
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f9a:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d108      	bne.n	8003fbe <DMA_SetConfig+0x122>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fbc:	e056      	b.n	800406c <DMA_SetConfig+0x1d0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	60da      	str	r2, [r3, #12]
}
 8003fce:	e04d      	b.n	800406c <DMA_SetConfig+0x1d0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a38      	ldr	r2, [pc, #224]	; (80040b8 <DMA_SetConfig+0x21c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d022      	beq.n	8004020 <DMA_SetConfig+0x184>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a37      	ldr	r2, [pc, #220]	; (80040bc <DMA_SetConfig+0x220>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d01d      	beq.n	8004020 <DMA_SetConfig+0x184>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a35      	ldr	r2, [pc, #212]	; (80040c0 <DMA_SetConfig+0x224>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d018      	beq.n	8004020 <DMA_SetConfig+0x184>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a34      	ldr	r2, [pc, #208]	; (80040c4 <DMA_SetConfig+0x228>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <DMA_SetConfig+0x184>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a32      	ldr	r2, [pc, #200]	; (80040c8 <DMA_SetConfig+0x22c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00e      	beq.n	8004020 <DMA_SetConfig+0x184>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a31      	ldr	r2, [pc, #196]	; (80040cc <DMA_SetConfig+0x230>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <DMA_SetConfig+0x184>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2f      	ldr	r2, [pc, #188]	; (80040d0 <DMA_SetConfig+0x234>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <DMA_SetConfig+0x184>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2e      	ldr	r2, [pc, #184]	; (80040d4 <DMA_SetConfig+0x238>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <DMA_SetConfig+0x188>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <DMA_SetConfig+0x18a>
 8004024:	2300      	movs	r3, #0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d020      	beq.n	800406c <DMA_SetConfig+0x1d0>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2201      	movs	r2, #1
 8004034:	409a      	lsls	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d108      	bne.n	800405c <DMA_SetConfig+0x1c0>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	60da      	str	r2, [r3, #12]
}
 800405a:	e007      	b.n	800406c <DMA_SetConfig+0x1d0>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40020010 	.word	0x40020010
 800407c:	40020028 	.word	0x40020028
 8004080:	40020040 	.word	0x40020040
 8004084:	40020058 	.word	0x40020058
 8004088:	40020070 	.word	0x40020070
 800408c:	40020088 	.word	0x40020088
 8004090:	400200a0 	.word	0x400200a0
 8004094:	400200b8 	.word	0x400200b8
 8004098:	40020410 	.word	0x40020410
 800409c:	40020428 	.word	0x40020428
 80040a0:	40020440 	.word	0x40020440
 80040a4:	40020458 	.word	0x40020458
 80040a8:	40020470 	.word	0x40020470
 80040ac:	40020488 	.word	0x40020488
 80040b0:	400204a0 	.word	0x400204a0
 80040b4:	400204b8 	.word	0x400204b8
 80040b8:	58025408 	.word	0x58025408
 80040bc:	5802541c 	.word	0x5802541c
 80040c0:	58025430 	.word	0x58025430
 80040c4:	58025444 	.word	0x58025444
 80040c8:	58025458 	.word	0x58025458
 80040cc:	5802546c 	.word	0x5802546c
 80040d0:	58025480 	.word	0x58025480
 80040d4:	58025494 	.word	0x58025494

080040d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a42      	ldr	r2, [pc, #264]	; (80041f0 <DMA_CalcBaseAndBitshift+0x118>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d04a      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a41      	ldr	r2, [pc, #260]	; (80041f4 <DMA_CalcBaseAndBitshift+0x11c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d045      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a3f      	ldr	r2, [pc, #252]	; (80041f8 <DMA_CalcBaseAndBitshift+0x120>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d040      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a3e      	ldr	r2, [pc, #248]	; (80041fc <DMA_CalcBaseAndBitshift+0x124>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d03b      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a3c      	ldr	r2, [pc, #240]	; (8004200 <DMA_CalcBaseAndBitshift+0x128>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d036      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a3b      	ldr	r2, [pc, #236]	; (8004204 <DMA_CalcBaseAndBitshift+0x12c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d031      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a39      	ldr	r2, [pc, #228]	; (8004208 <DMA_CalcBaseAndBitshift+0x130>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d02c      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a38      	ldr	r2, [pc, #224]	; (800420c <DMA_CalcBaseAndBitshift+0x134>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d027      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a36      	ldr	r2, [pc, #216]	; (8004210 <DMA_CalcBaseAndBitshift+0x138>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a35      	ldr	r2, [pc, #212]	; (8004214 <DMA_CalcBaseAndBitshift+0x13c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d01d      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a33      	ldr	r2, [pc, #204]	; (8004218 <DMA_CalcBaseAndBitshift+0x140>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a32      	ldr	r2, [pc, #200]	; (800421c <DMA_CalcBaseAndBitshift+0x144>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a30      	ldr	r2, [pc, #192]	; (8004220 <DMA_CalcBaseAndBitshift+0x148>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a2f      	ldr	r2, [pc, #188]	; (8004224 <DMA_CalcBaseAndBitshift+0x14c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <DMA_CalcBaseAndBitshift+0x150>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <DMA_CalcBaseAndBitshift+0xa8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2c      	ldr	r2, [pc, #176]	; (800422c <DMA_CalcBaseAndBitshift+0x154>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <DMA_CalcBaseAndBitshift+0xac>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <DMA_CalcBaseAndBitshift+0xae>
 8004184:	2300      	movs	r3, #0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d024      	beq.n	80041d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	3b10      	subs	r3, #16
 8004192:	4a27      	ldr	r2, [pc, #156]	; (8004230 <DMA_CalcBaseAndBitshift+0x158>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	4a24      	ldr	r2, [pc, #144]	; (8004234 <DMA_CalcBaseAndBitshift+0x15c>)
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	461a      	mov	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d908      	bls.n	80041c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b1f      	ldr	r3, [pc, #124]	; (8004238 <DMA_CalcBaseAndBitshift+0x160>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	1d1a      	adds	r2, r3, #4
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	659a      	str	r2, [r3, #88]	; 0x58
 80041c2:	e00d      	b.n	80041e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <DMA_CalcBaseAndBitshift+0x160>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6593      	str	r3, [r2, #88]	; 0x58
 80041d2:	e005      	b.n	80041e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40020010 	.word	0x40020010
 80041f4:	40020028 	.word	0x40020028
 80041f8:	40020040 	.word	0x40020040
 80041fc:	40020058 	.word	0x40020058
 8004200:	40020070 	.word	0x40020070
 8004204:	40020088 	.word	0x40020088
 8004208:	400200a0 	.word	0x400200a0
 800420c:	400200b8 	.word	0x400200b8
 8004210:	40020410 	.word	0x40020410
 8004214:	40020428 	.word	0x40020428
 8004218:	40020440 	.word	0x40020440
 800421c:	40020458 	.word	0x40020458
 8004220:	40020470 	.word	0x40020470
 8004224:	40020488 	.word	0x40020488
 8004228:	400204a0 	.word	0x400204a0
 800422c:	400204b8 	.word	0x400204b8
 8004230:	aaaaaaab 	.word	0xaaaaaaab
 8004234:	080083dc 	.word	0x080083dc
 8004238:	fffffc00 	.word	0xfffffc00

0800423c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d120      	bne.n	8004292 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	2b03      	cmp	r3, #3
 8004256:	d858      	bhi.n	800430a <DMA_CheckFifoParam+0xce>
 8004258:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <DMA_CheckFifoParam+0x24>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004271 	.word	0x08004271
 8004264:	08004283 	.word	0x08004283
 8004268:	08004271 	.word	0x08004271
 800426c:	0800430b 	.word	0x0800430b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d048      	beq.n	800430e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004280:	e045      	b.n	800430e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800428a:	d142      	bne.n	8004312 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004290:	e03f      	b.n	8004312 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429a:	d123      	bne.n	80042e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d838      	bhi.n	8004316 <DMA_CheckFifoParam+0xda>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <DMA_CheckFifoParam+0x70>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042c3 	.word	0x080042c3
 80042b4:	080042bd 	.word	0x080042bd
 80042b8:	080042d5 	.word	0x080042d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
        break;
 80042c0:	e030      	b.n	8004324 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d025      	beq.n	800431a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042d2:	e022      	b.n	800431a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042dc:	d11f      	bne.n	800431e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042e2:	e01c      	b.n	800431e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d902      	bls.n	80042f2 <DMA_CheckFifoParam+0xb6>
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d003      	beq.n	80042f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80042f0:	e018      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
        break;
 80042f6:	e015      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00e      	beq.n	8004322 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
    break;
 8004308:	e00b      	b.n	8004322 <DMA_CheckFifoParam+0xe6>
        break;
 800430a:	bf00      	nop
 800430c:	e00a      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        break;
 800430e:	bf00      	nop
 8004310:	e008      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        break;
 8004312:	bf00      	nop
 8004314:	e006      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        break;
 8004316:	bf00      	nop
 8004318:	e004      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
        break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <DMA_CheckFifoParam+0xe8>
    break;
 8004322:	bf00      	nop
    }
  }

  return status;
 8004324:	7bfb      	ldrb	r3, [r7, #15]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop

08004334 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a38      	ldr	r2, [pc, #224]	; (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a36      	ldr	r2, [pc, #216]	; (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01d      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a35      	ldr	r2, [pc, #212]	; (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d018      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a33      	ldr	r2, [pc, #204]	; (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a32      	ldr	r2, [pc, #200]	; (8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a30      	ldr	r2, [pc, #192]	; (800443c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2f      	ldr	r2, [pc, #188]	; (8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2d      	ldr	r2, [pc, #180]	; (8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01a      	beq.n	80043d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	3b08      	subs	r3, #8
 80043a4:	4a28      	ldr	r2, [pc, #160]	; (8004448 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4b26      	ldr	r3, [pc, #152]	; (800444c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a24      	ldr	r2, [pc, #144]	; (8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80043c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2201      	movs	r2, #1
 80043ca:	409a      	lsls	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80043d0:	e024      	b.n	800441c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3b10      	subs	r3, #16
 80043da:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d806      	bhi.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4a1b      	ldr	r2, [pc, #108]	; (800445c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d902      	bls.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3308      	adds	r3, #8
 80043f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4b18      	ldr	r3, [pc, #96]	; (8004460 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	461a      	mov	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a16      	ldr	r2, [pc, #88]	; (8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800440c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2201      	movs	r2, #1
 8004416:	409a      	lsls	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	58025408 	.word	0x58025408
 800442c:	5802541c 	.word	0x5802541c
 8004430:	58025430 	.word	0x58025430
 8004434:	58025444 	.word	0x58025444
 8004438:	58025458 	.word	0x58025458
 800443c:	5802546c 	.word	0x5802546c
 8004440:	58025480 	.word	0x58025480
 8004444:	58025494 	.word	0x58025494
 8004448:	cccccccd 	.word	0xcccccccd
 800444c:	16009600 	.word	0x16009600
 8004450:	58025880 	.word	0x58025880
 8004454:	aaaaaaab 	.word	0xaaaaaaab
 8004458:	400204b8 	.word	0x400204b8
 800445c:	4002040f 	.word	0x4002040f
 8004460:	10008200 	.word	0x10008200
 8004464:	40020880 	.word	0x40020880

08004468 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d04a      	beq.n	8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d847      	bhi.n	8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a25      	ldr	r2, [pc, #148]	; (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d022      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a24      	ldr	r2, [pc, #144]	; (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d01d      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a22      	ldr	r2, [pc, #136]	; (8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d018      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a21      	ldr	r2, [pc, #132]	; (800452c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00e      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1c      	ldr	r2, [pc, #112]	; (8004538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1b      	ldr	r2, [pc, #108]	; (800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80044d8:	2300      	movs	r3, #0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4b17      	ldr	r3, [pc, #92]	; (8004540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	461a      	mov	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a15      	ldr	r2, [pc, #84]	; (8004544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80044f0:	671a      	str	r2, [r3, #112]	; 0x70
 80044f2:	e009      	b.n	8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a11      	ldr	r2, [pc, #68]	; (800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004506:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3b01      	subs	r3, #1
 800450c:	2201      	movs	r2, #1
 800450e:	409a      	lsls	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	58025408 	.word	0x58025408
 8004524:	5802541c 	.word	0x5802541c
 8004528:	58025430 	.word	0x58025430
 800452c:	58025444 	.word	0x58025444
 8004530:	58025458 	.word	0x58025458
 8004534:	5802546c 	.word	0x5802546c
 8004538:	58025480 	.word	0x58025480
 800453c:	58025494 	.word	0x58025494
 8004540:	1600963f 	.word	0x1600963f
 8004544:	58025940 	.word	0x58025940
 8004548:	1000823f 	.word	0x1000823f
 800454c:	40020940 	.word	0x40020940

08004550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800455e:	4b89      	ldr	r3, [pc, #548]	; (8004784 <HAL_GPIO_Init+0x234>)
 8004560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004562:	e194      	b.n	800488e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2101      	movs	r1, #1
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	4013      	ands	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 8186 	beq.w	8004888 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d003      	beq.n	800458c <HAL_GPIO_Init+0x3c>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b12      	cmp	r3, #18
 800458a:	d123      	bne.n	80045d4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	08da      	lsrs	r2, r3, #3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3208      	adds	r2, #8
 8004594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	220f      	movs	r2, #15
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	08da      	lsrs	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3208      	adds	r2, #8
 80045ce:	69b9      	ldr	r1, [r7, #24]
 80045d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	2203      	movs	r2, #3
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0203 	and.w	r2, r3, #3
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d00b      	beq.n	8004628 <HAL_GPIO_Init+0xd8>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d007      	beq.n	8004628 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800461c:	2b11      	cmp	r3, #17
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b12      	cmp	r3, #18
 8004626:	d130      	bne.n	800468a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	2203      	movs	r2, #3
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800465e:	2201      	movs	r2, #1
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	f003 0201 	and.w	r2, r3, #1
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80e0 	beq.w	8004888 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c8:	4b2f      	ldr	r3, [pc, #188]	; (8004788 <HAL_GPIO_Init+0x238>)
 80046ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046ce:	4a2e      	ldr	r2, [pc, #184]	; (8004788 <HAL_GPIO_Init+0x238>)
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046d8:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <HAL_GPIO_Init+0x238>)
 80046da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046e6:	4a29      	ldr	r2, [pc, #164]	; (800478c <HAL_GPIO_Init+0x23c>)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	089b      	lsrs	r3, r3, #2
 80046ec:	3302      	adds	r3, #2
 80046ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	220f      	movs	r2, #15
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4013      	ands	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a20      	ldr	r2, [pc, #128]	; (8004790 <HAL_GPIO_Init+0x240>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d052      	beq.n	80047b8 <HAL_GPIO_Init+0x268>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1f      	ldr	r2, [pc, #124]	; (8004794 <HAL_GPIO_Init+0x244>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d031      	beq.n	800477e <HAL_GPIO_Init+0x22e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1e      	ldr	r2, [pc, #120]	; (8004798 <HAL_GPIO_Init+0x248>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02b      	beq.n	800477a <HAL_GPIO_Init+0x22a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1d      	ldr	r2, [pc, #116]	; (800479c <HAL_GPIO_Init+0x24c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d025      	beq.n	8004776 <HAL_GPIO_Init+0x226>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1c      	ldr	r2, [pc, #112]	; (80047a0 <HAL_GPIO_Init+0x250>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01f      	beq.n	8004772 <HAL_GPIO_Init+0x222>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1b      	ldr	r2, [pc, #108]	; (80047a4 <HAL_GPIO_Init+0x254>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d019      	beq.n	800476e <HAL_GPIO_Init+0x21e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1a      	ldr	r2, [pc, #104]	; (80047a8 <HAL_GPIO_Init+0x258>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <HAL_GPIO_Init+0x21a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a19      	ldr	r2, [pc, #100]	; (80047ac <HAL_GPIO_Init+0x25c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00d      	beq.n	8004766 <HAL_GPIO_Init+0x216>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <HAL_GPIO_Init+0x260>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d007      	beq.n	8004762 <HAL_GPIO_Init+0x212>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <HAL_GPIO_Init+0x264>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d101      	bne.n	800475e <HAL_GPIO_Init+0x20e>
 800475a:	2309      	movs	r3, #9
 800475c:	e02d      	b.n	80047ba <HAL_GPIO_Init+0x26a>
 800475e:	230a      	movs	r3, #10
 8004760:	e02b      	b.n	80047ba <HAL_GPIO_Init+0x26a>
 8004762:	2308      	movs	r3, #8
 8004764:	e029      	b.n	80047ba <HAL_GPIO_Init+0x26a>
 8004766:	2307      	movs	r3, #7
 8004768:	e027      	b.n	80047ba <HAL_GPIO_Init+0x26a>
 800476a:	2306      	movs	r3, #6
 800476c:	e025      	b.n	80047ba <HAL_GPIO_Init+0x26a>
 800476e:	2305      	movs	r3, #5
 8004770:	e023      	b.n	80047ba <HAL_GPIO_Init+0x26a>
 8004772:	2304      	movs	r3, #4
 8004774:	e021      	b.n	80047ba <HAL_GPIO_Init+0x26a>
 8004776:	2303      	movs	r3, #3
 8004778:	e01f      	b.n	80047ba <HAL_GPIO_Init+0x26a>
 800477a:	2302      	movs	r3, #2
 800477c:	e01d      	b.n	80047ba <HAL_GPIO_Init+0x26a>
 800477e:	2301      	movs	r3, #1
 8004780:	e01b      	b.n	80047ba <HAL_GPIO_Init+0x26a>
 8004782:	bf00      	nop
 8004784:	58000080 	.word	0x58000080
 8004788:	58024400 	.word	0x58024400
 800478c:	58000400 	.word	0x58000400
 8004790:	58020000 	.word	0x58020000
 8004794:	58020400 	.word	0x58020400
 8004798:	58020800 	.word	0x58020800
 800479c:	58020c00 	.word	0x58020c00
 80047a0:	58021000 	.word	0x58021000
 80047a4:	58021400 	.word	0x58021400
 80047a8:	58021800 	.word	0x58021800
 80047ac:	58021c00 	.word	0x58021c00
 80047b0:	58022000 	.word	0x58022000
 80047b4:	58022400 	.word	0x58022400
 80047b8:	2300      	movs	r3, #0
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	f002 0203 	and.w	r2, r2, #3
 80047c0:	0092      	lsls	r2, r2, #2
 80047c2:	4093      	lsls	r3, r2
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047ca:	4938      	ldr	r1, [pc, #224]	; (80048ac <HAL_GPIO_Init+0x35c>)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	3302      	adds	r3, #2
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800482c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	43db      	mvns	r3, r3
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4013      	ands	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	3301      	adds	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	f47f ae63 	bne.w	8004564 <HAL_GPIO_Init+0x14>
  }
}
 800489e:	bf00      	nop
 80048a0:	3724      	adds	r7, #36	; 0x24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	58000400 	.word	0x58000400

080048b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
 80048bc:	4613      	mov	r3, r2
 80048be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048c0:	787b      	ldrb	r3, [r7, #1]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80048cc:	e003      	b.n	80048d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048ce:	887b      	ldrh	r3, [r7, #2]
 80048d0:	041a      	lsls	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	619a      	str	r2, [r3, #24]
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	460b      	mov	r3, r1
 80048ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	887b      	ldrh	r3, [r7, #2]
 80048f4:	401a      	ands	r2, r3
 80048f6:	887b      	ldrh	r3, [r7, #2]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d104      	bne.n	8004906 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	041a      	lsls	r2, r3, #16
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004904:	e002      	b.n	800490c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	619a      	str	r2, [r3, #24]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004920:	4a08      	ldr	r2, [pc, #32]	; (8004944 <HAL_HSEM_FastTake+0x2c>)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3320      	adds	r3, #32
 8004926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492a:	4a07      	ldr	r2, [pc, #28]	; (8004948 <HAL_HSEM_FastTake+0x30>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	58026400 	.word	0x58026400
 8004948:	80000300 	.word	0x80000300

0800494c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004956:	4906      	ldr	r1, [pc, #24]	; (8004970 <HAL_HSEM_Release+0x24>)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	58026400 	.word	0x58026400

08004974 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The SMPS and the LDO are Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800497c:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <HAL_PWREx_ConfigSupply+0xac>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	2b06      	cmp	r3, #6
 8004986:	d008      	beq.n	800499a <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004988:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_PWREx_ConfigSupply+0xac>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	429a      	cmp	r2, r3
 8004994:	d001      	beq.n	800499a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e03e      	b.n	8004a18 <HAL_PWREx_ConfigSupply+0xa4>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800499a:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <HAL_PWREx_ConfigSupply+0xac>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80049a2:	491f      	ldr	r1, [pc, #124]	; (8004a20 <HAL_PWREx_ConfigSupply+0xac>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049aa:	f7fc fa47 	bl	8000e3c <HAL_GetTick>
 80049ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80049b0:	e009      	b.n	80049c6 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 80049b2:	f7fc fa43 	bl	8000e3c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049c0:	d901      	bls.n	80049c6 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e028      	b.n	8004a18 <HAL_PWREx_ConfigSupply+0xa4>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80049c6:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <HAL_PWREx_ConfigSupply+0xac>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	d1ee      	bne.n	80049b2 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b1e      	cmp	r3, #30
 80049d8:	d008      	beq.n	80049ec <HAL_PWREx_ConfigSupply+0x78>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b2e      	cmp	r3, #46	; 0x2e
 80049de:	d005      	beq.n	80049ec <HAL_PWREx_ConfigSupply+0x78>
     (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b1d      	cmp	r3, #29
 80049e4:	d002      	beq.n	80049ec <HAL_PWREx_ConfigSupply+0x78>
     (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT) ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b2d      	cmp	r3, #45	; 0x2d
 80049ea:	d114      	bne.n	8004a16 <HAL_PWREx_ConfigSupply+0xa2>
     (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80049ec:	f7fc fa26 	bl	8000e3c <HAL_GetTick>
 80049f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while(!__HAL_PWR_GET_FLAG(PWR_FLAG_SMPSEXTRDY))
 80049f2:	e009      	b.n	8004a08 <HAL_PWREx_ConfigSupply+0x94>
    {
      if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 80049f4:	f7fc fa22 	bl	8000e3c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a02:	d901      	bls.n	8004a08 <HAL_PWREx_ConfigSupply+0x94>
      {
        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e007      	b.n	8004a18 <HAL_PWREx_ConfigSupply+0xa4>
    while(!__HAL_PWR_GET_FLAG(PWR_FLAG_SMPSEXTRDY))
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <HAL_PWREx_ConfigSupply+0xac>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d1ee      	bne.n	80049f4 <HAL_PWREx_ConfigSupply+0x80>
      }
    }
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	58024800 	.word	0x58024800

08004a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e3a4      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 8087 	beq.w	8004b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a44:	4b9a      	ldr	r3, [pc, #616]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a4e:	4b98      	ldr	r3, [pc, #608]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d007      	beq.n	8004a6a <HAL_RCC_OscConfig+0x46>
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	2b18      	cmp	r3, #24
 8004a5e:	d110      	bne.n	8004a82 <HAL_RCC_OscConfig+0x5e>
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d10b      	bne.n	8004a82 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6a:	4b91      	ldr	r3, [pc, #580]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d06c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x12c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d168      	bne.n	8004b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e37e      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_OscConfig+0x76>
 8004a8c:	4b88      	ldr	r3, [pc, #544]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a87      	ldr	r2, [pc, #540]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	e02e      	b.n	8004af8 <HAL_RCC_OscConfig+0xd4>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x98>
 8004aa2:	4b83      	ldr	r3, [pc, #524]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a82      	ldr	r2, [pc, #520]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b80      	ldr	r3, [pc, #512]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a7f      	ldr	r2, [pc, #508]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e01d      	b.n	8004af8 <HAL_RCC_OscConfig+0xd4>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0xbc>
 8004ac6:	4b7a      	ldr	r3, [pc, #488]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a79      	ldr	r2, [pc, #484]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b77      	ldr	r3, [pc, #476]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a76      	ldr	r2, [pc, #472]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e00b      	b.n	8004af8 <HAL_RCC_OscConfig+0xd4>
 8004ae0:	4b73      	ldr	r3, [pc, #460]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a72      	ldr	r2, [pc, #456]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b70      	ldr	r3, [pc, #448]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a6f      	ldr	r2, [pc, #444]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d013      	beq.n	8004b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fc f99c 	bl	8000e3c <HAL_GetTick>
 8004b04:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fc f998 	bl	8000e3c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e332      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b1a:	4b65      	ldr	r3, [pc, #404]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0xe4>
 8004b26:	e014      	b.n	8004b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fc f988 	bl	8000e3c <HAL_GetTick>
 8004b2c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b30:	f7fc f984 	bl	8000e3c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	; 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e31e      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b42:	4b5b      	ldr	r3, [pc, #364]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x10c>
 8004b4e:	e000      	b.n	8004b52 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80b0 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b60:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b68:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b6a:	4b51      	ldr	r3, [pc, #324]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <HAL_RCC_OscConfig+0x162>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b18      	cmp	r3, #24
 8004b7a:	d149      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1ec>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d144      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b86:	4b4a      	ldr	r3, [pc, #296]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_RCC_OscConfig+0x17a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e2f0      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b9e:	4b44      	ldr	r3, [pc, #272]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 0219 	bic.w	r2, r3, #25
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	4941      	ldr	r1, [pc, #260]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fc f944 	bl	8000e3c <HAL_GetTick>
 8004bb4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb8:	f7fc f940 	bl	8000e3c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e2da      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bca:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd6:	f7fc f95f 	bl	8000e98 <HAL_GetREVID>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	f241 0303 	movw	r3, #4099	; 0x1003
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d80a      	bhi.n	8004bfa <HAL_RCC_OscConfig+0x1d6>
 8004be4:	4b32      	ldr	r3, [pc, #200]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	492f      	ldr	r1, [pc, #188]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf8:	e062      	b.n	8004cc0 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfa:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	061b      	lsls	r3, r3, #24
 8004c08:	4929      	ldr	r1, [pc, #164]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c0e:	e057      	b.n	8004cc0 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d038      	beq.n	8004c8a <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c18:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f023 0219 	bic.w	r2, r3, #25
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4922      	ldr	r1, [pc, #136]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fc f907 	bl	8000e3c <HAL_GetTick>
 8004c2e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c32:	f7fc f903 	bl	8000e3c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e29d      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c44:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c50:	f7fc f922 	bl	8000e98 <HAL_GetREVID>
 8004c54:	4602      	mov	r2, r0
 8004c56:	f241 0303 	movw	r3, #4099	; 0x1003
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d80a      	bhi.n	8004c74 <HAL_RCC_OscConfig+0x250>
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	031b      	lsls	r3, r3, #12
 8004c6c:	4910      	ldr	r1, [pc, #64]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	604b      	str	r3, [r1, #4]
 8004c72:	e025      	b.n	8004cc0 <HAL_RCC_OscConfig+0x29c>
 8004c74:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	490b      	ldr	r1, [pc, #44]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
 8004c88:	e01a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a08      	ldr	r2, [pc, #32]	; (8004cb0 <HAL_RCC_OscConfig+0x28c>)
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c96:	f7fc f8d1 	bl	8000e3c <HAL_GetTick>
 8004c9a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9e:	f7fc f8cd 	bl	8000e3c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d903      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e267      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
 8004cb0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cb4:	4ba0      	ldr	r3, [pc, #640]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ee      	bne.n	8004c9e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 808f 	beq.w	8004dec <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cce:	4b9a      	ldr	r3, [pc, #616]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cd6:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cd8:	4b97      	ldr	r3, [pc, #604]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d007      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x2d0>
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b18      	cmp	r3, #24
 8004ce8:	d12d      	bne.n	8004d46 <HAL_RCC_OscConfig+0x322>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d128      	bne.n	8004d46 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cf4:	4b90      	ldr	r3, [pc, #576]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_OscConfig+0x2e8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e239      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d0c:	f7fc f8c4 	bl	8000e98 <HAL_GetREVID>
 8004d10:	4602      	mov	r2, r0
 8004d12:	f241 0303 	movw	r3, #4099	; 0x1003
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d80a      	bhi.n	8004d30 <HAL_RCC_OscConfig+0x30c>
 8004d1a:	4b87      	ldr	r3, [pc, #540]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	069b      	lsls	r3, r3, #26
 8004d28:	4983      	ldr	r1, [pc, #524]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d2e:	e05d      	b.n	8004dec <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d30:	4b81      	ldr	r3, [pc, #516]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	061b      	lsls	r3, r3, #24
 8004d3e:	497e      	ldr	r1, [pc, #504]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d44:	e052      	b.n	8004dec <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d035      	beq.n	8004dba <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d4e:	4b7a      	ldr	r3, [pc, #488]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a79      	ldr	r2, [pc, #484]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fc f86f 	bl	8000e3c <HAL_GetTick>
 8004d5e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d62:	f7fc f86b 	bl	8000e3c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e205      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d74:	4b70      	ldr	r3, [pc, #448]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d80:	f7fc f88a 	bl	8000e98 <HAL_GetREVID>
 8004d84:	4602      	mov	r2, r0
 8004d86:	f241 0303 	movw	r3, #4099	; 0x1003
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d80a      	bhi.n	8004da4 <HAL_RCC_OscConfig+0x380>
 8004d8e:	4b6a      	ldr	r3, [pc, #424]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	069b      	lsls	r3, r3, #26
 8004d9c:	4966      	ldr	r1, [pc, #408]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]
 8004da2:	e023      	b.n	8004dec <HAL_RCC_OscConfig+0x3c8>
 8004da4:	4b64      	ldr	r3, [pc, #400]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	061b      	lsls	r3, r3, #24
 8004db2:	4961      	ldr	r1, [pc, #388]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60cb      	str	r3, [r1, #12]
 8004db8:	e018      	b.n	8004dec <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dba:	4b5f      	ldr	r3, [pc, #380]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a5e      	ldr	r2, [pc, #376]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc6:	f7fc f839 	bl	8000e3c <HAL_GetTick>
 8004dca:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004dce:	f7fc f835 	bl	8000e3c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e1cf      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004de0:	4b55      	ldr	r3, [pc, #340]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f0      	bne.n	8004dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d036      	beq.n	8004e66 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d019      	beq.n	8004e34 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e00:	4b4d      	ldr	r3, [pc, #308]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e04:	4a4c      	ldr	r2, [pc, #304]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fc f816 	bl	8000e3c <HAL_GetTick>
 8004e10:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e14:	f7fc f812 	bl	8000e3c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1ac      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e26:	4b44      	ldr	r3, [pc, #272]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x3f0>
 8004e32:	e018      	b.n	8004e66 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e34:	4b40      	ldr	r3, [pc, #256]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e38:	4a3f      	ldr	r2, [pc, #252]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e40:	f7fb fffc 	bl	8000e3c <HAL_GetTick>
 8004e44:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e48:	f7fb fff8 	bl	8000e3c <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e192      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e5a:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d036      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d019      	beq.n	8004eae <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e7a:	4b2f      	ldr	r3, [pc, #188]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2e      	ldr	r2, [pc, #184]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e86:	f7fb ffd9 	bl	8000e3c <HAL_GetTick>
 8004e8a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e8e:	f7fb ffd5 	bl	8000e3c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e16f      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ea0:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x46a>
 8004eac:	e018      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eae:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eba:	f7fb ffbf 	bl	8000e3c <HAL_GetTick>
 8004ebe:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004ec2:	f7fb ffbb 	bl	8000e3c <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e155      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ed4:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8086 	beq.w	8004ffa <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eee:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <HAL_RCC_OscConfig+0x518>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a12      	ldr	r2, [pc, #72]	; (8004f3c <HAL_RCC_OscConfig+0x518>)
 8004ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efa:	f7fb ff9f 	bl	8000e3c <HAL_GetTick>
 8004efe:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f02:	f7fb ff9b 	bl	8000e3c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b64      	cmp	r3, #100	; 0x64
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e135      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_RCC_OscConfig+0x518>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d10b      	bne.n	8004f40 <HAL_RCC_OscConfig+0x51c>
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	4a02      	ldr	r2, [pc, #8]	; (8004f38 <HAL_RCC_OscConfig+0x514>)
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	6713      	str	r3, [r2, #112]	; 0x70
 8004f34:	e032      	b.n	8004f9c <HAL_RCC_OscConfig+0x578>
 8004f36:	bf00      	nop
 8004f38:	58024400 	.word	0x58024400
 8004f3c:	58024800 	.word	0x58024800
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10c      	bne.n	8004f62 <HAL_RCC_OscConfig+0x53e>
 8004f48:	4b8f      	ldr	r3, [pc, #572]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	4a8e      	ldr	r2, [pc, #568]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f4e:	f023 0301 	bic.w	r3, r3, #1
 8004f52:	6713      	str	r3, [r2, #112]	; 0x70
 8004f54:	4b8c      	ldr	r3, [pc, #560]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	4a8b      	ldr	r2, [pc, #556]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f5a:	f023 0304 	bic.w	r3, r3, #4
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f60:	e01c      	b.n	8004f9c <HAL_RCC_OscConfig+0x578>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x560>
 8004f6a:	4b87      	ldr	r3, [pc, #540]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	4a86      	ldr	r2, [pc, #536]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	6713      	str	r3, [r2, #112]	; 0x70
 8004f76:	4b84      	ldr	r3, [pc, #528]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	4a83      	ldr	r2, [pc, #524]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	6713      	str	r3, [r2, #112]	; 0x70
 8004f82:	e00b      	b.n	8004f9c <HAL_RCC_OscConfig+0x578>
 8004f84:	4b80      	ldr	r3, [pc, #512]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	4a7f      	ldr	r2, [pc, #508]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f90:	4b7d      	ldr	r3, [pc, #500]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f94:	4a7c      	ldr	r2, [pc, #496]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004f96:	f023 0304 	bic.w	r3, r3, #4
 8004f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d015      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fb ff4a 	bl	8000e3c <HAL_GetTick>
 8004fa8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004faa:	e00a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fac:	f7fb ff46 	bl	8000e3c <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e0de      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fc2:	4b71      	ldr	r3, [pc, #452]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0ee      	beq.n	8004fac <HAL_RCC_OscConfig+0x588>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fb ff34 	bl	8000e3c <HAL_GetTick>
 8004fd4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fb ff30 	bl	8000e3c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e0c8      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fee:	4b66      	ldr	r3, [pc, #408]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1ee      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80bd 	beq.w	800517e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005004:	4b60      	ldr	r3, [pc, #384]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800500c:	2b18      	cmp	r3, #24
 800500e:	f000 80b4 	beq.w	800517a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b02      	cmp	r3, #2
 8005018:	f040 8095 	bne.w	8005146 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501c:	4b5a      	ldr	r3, [pc, #360]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a59      	ldr	r2, [pc, #356]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8005022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fb ff08 	bl	8000e3c <HAL_GetTick>
 800502c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005030:	f7fb ff04 	bl	8000e3c <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e09e      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005042:	4b51      	ldr	r3, [pc, #324]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800504e:	4b4e      	ldr	r3, [pc, #312]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8005050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005052:	4b4e      	ldr	r3, [pc, #312]	; (800518c <HAL_RCC_OscConfig+0x768>)
 8005054:	4013      	ands	r3, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800505e:	0112      	lsls	r2, r2, #4
 8005060:	430a      	orrs	r2, r1
 8005062:	4949      	ldr	r1, [pc, #292]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8005064:	4313      	orrs	r3, r2
 8005066:	628b      	str	r3, [r1, #40]	; 0x28
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	3b01      	subs	r3, #1
 800506e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	3b01      	subs	r3, #1
 8005078:	025b      	lsls	r3, r3, #9
 800507a:	b29b      	uxth	r3, r3
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005090:	3b01      	subs	r3, #1
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005098:	493b      	ldr	r1, [pc, #236]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 800509a:	4313      	orrs	r3, r2
 800509c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800509e:	4b3a      	ldr	r3, [pc, #232]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	4a39      	ldr	r2, [pc, #228]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050aa:	4b37      	ldr	r3, [pc, #220]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ae:	4b38      	ldr	r3, [pc, #224]	; (8005190 <HAL_RCC_OscConfig+0x76c>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050b6:	00d2      	lsls	r2, r2, #3
 80050b8:	4933      	ldr	r1, [pc, #204]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050be:	4b32      	ldr	r3, [pc, #200]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f023 020c 	bic.w	r2, r3, #12
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	492f      	ldr	r1, [pc, #188]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050d0:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	f023 0202 	bic.w	r2, r3, #2
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050dc:	492a      	ldr	r1, [pc, #168]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050e2:	4b29      	ldr	r3, [pc, #164]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	4a28      	ldr	r2, [pc, #160]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ee:	4b26      	ldr	r3, [pc, #152]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	4a25      	ldr	r2, [pc, #148]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050fa:	4b23      	ldr	r3, [pc, #140]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	4a22      	ldr	r2, [pc, #136]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8005100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005104:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005106:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005112:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8005118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800511c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511e:	f7fb fe8d 	bl	8000e3c <HAL_GetTick>
 8005122:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005126:	f7fb fe89 	bl	8000e3c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e023      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005138:	4b13      	ldr	r3, [pc, #76]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x702>
 8005144:	e01b      	b.n	800517e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a0f      	ldr	r2, [pc, #60]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 800514c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005152:	f7fb fe73 	bl	8000e3c <HAL_GetTick>
 8005156:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515a:	f7fb fe6f 	bl	8000e3c <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e009      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_RCC_OscConfig+0x764>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x736>
 8005178:	e001      	b.n	800517e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3728      	adds	r7, #40	; 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	58024400 	.word	0x58024400
 800518c:	fffffc0c 	.word	0xfffffc0c
 8005190:	ffff0007 	.word	0xffff0007

08005194 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e18d      	b.n	80054c4 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051a8:	4b8a      	ldr	r3, [pc, #552]	; (80053d4 <HAL_RCC_ClockConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d910      	bls.n	80051d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b6:	4b87      	ldr	r3, [pc, #540]	; (80053d4 <HAL_RCC_ClockConfig+0x240>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f023 020f 	bic.w	r2, r3, #15
 80051be:	4985      	ldr	r1, [pc, #532]	; (80053d4 <HAL_RCC_ClockConfig+0x240>)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b83      	ldr	r3, [pc, #524]	; (80053d4 <HAL_RCC_ClockConfig+0x240>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e175      	b.n	80054c4 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d010      	beq.n	8005206 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	4b7b      	ldr	r3, [pc, #492]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d908      	bls.n	8005206 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051f4:	4b78      	ldr	r3, [pc, #480]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	4975      	ldr	r1, [pc, #468]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005202:	4313      	orrs	r3, r2
 8005204:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d010      	beq.n	8005234 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	4b70      	ldr	r3, [pc, #448]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800521e:	429a      	cmp	r2, r3
 8005220:	d908      	bls.n	8005234 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005222:	4b6d      	ldr	r3, [pc, #436]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	496a      	ldr	r1, [pc, #424]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005230:	4313      	orrs	r3, r2
 8005232:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b00      	cmp	r3, #0
 800523e:	d010      	beq.n	8005262 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	4b64      	ldr	r3, [pc, #400]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800524c:	429a      	cmp	r2, r3
 800524e:	d908      	bls.n	8005262 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005250:	4b61      	ldr	r3, [pc, #388]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	495e      	ldr	r1, [pc, #376]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 800525e:	4313      	orrs	r3, r2
 8005260:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d010      	beq.n	8005290 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	4b59      	ldr	r3, [pc, #356]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800527a:	429a      	cmp	r2, r3
 800527c:	d908      	bls.n	8005290 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800527e:	4b56      	ldr	r3, [pc, #344]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	4953      	ldr	r1, [pc, #332]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 800528c:	4313      	orrs	r3, r2
 800528e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d010      	beq.n	80052be <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	4b4d      	ldr	r3, [pc, #308]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d908      	bls.n	80052be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ac:	4b4a      	ldr	r3, [pc, #296]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f023 020f 	bic.w	r2, r3, #15
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4947      	ldr	r1, [pc, #284]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d055      	beq.n	8005376 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052ca:	4b43      	ldr	r3, [pc, #268]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	4940      	ldr	r1, [pc, #256]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d107      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052e4:	4b3c      	ldr	r3, [pc, #240]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d121      	bne.n	8005334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0e7      	b.n	80054c4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d107      	bne.n	800530c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052fc:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d115      	bne.n	8005334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0db      	b.n	80054c4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d107      	bne.n	8005324 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005314:	4b30      	ldr	r3, [pc, #192]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0cf      	b.n	80054c4 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005324:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0c7      	b.n	80054c4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005334:	4b28      	ldr	r3, [pc, #160]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f023 0207 	bic.w	r2, r3, #7
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	4925      	ldr	r1, [pc, #148]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005342:	4313      	orrs	r3, r2
 8005344:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005346:	f7fb fd79 	bl	8000e3c <HAL_GetTick>
 800534a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534c:	e00a      	b.n	8005364 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800534e:	f7fb fd75 	bl	8000e3c <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	; 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0af      	b.n	80054c4 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005364:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	429a      	cmp	r2, r3
 8005374:	d1eb      	bne.n	800534e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d010      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	429a      	cmp	r2, r3
 8005390:	d208      	bcs.n	80053a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005392:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f023 020f 	bic.w	r2, r3, #15
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	490e      	ldr	r1, [pc, #56]	; (80053d8 <HAL_RCC_ClockConfig+0x244>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_RCC_ClockConfig+0x240>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d214      	bcs.n	80053dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <HAL_RCC_ClockConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 020f 	bic.w	r2, r3, #15
 80053ba:	4906      	ldr	r1, [pc, #24]	; (80053d4 <HAL_RCC_ClockConfig+0x240>)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <HAL_RCC_ClockConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e077      	b.n	80054c4 <HAL_RCC_ClockConfig+0x330>
 80053d4:	52002000 	.word	0x52002000
 80053d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d010      	beq.n	800540a <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	4b37      	ldr	r3, [pc, #220]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d208      	bcs.n	800540a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053f8:	4b34      	ldr	r3, [pc, #208]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	4931      	ldr	r1, [pc, #196]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 8005406:	4313      	orrs	r3, r2
 8005408:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	4b2c      	ldr	r3, [pc, #176]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005422:	429a      	cmp	r2, r3
 8005424:	d208      	bcs.n	8005438 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005426:	4b29      	ldr	r3, [pc, #164]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	4926      	ldr	r1, [pc, #152]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 8005434:	4313      	orrs	r3, r2
 8005436:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b00      	cmp	r3, #0
 8005442:	d010      	beq.n	8005466 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699a      	ldr	r2, [r3, #24]
 8005448:	4b20      	ldr	r3, [pc, #128]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005450:	429a      	cmp	r2, r3
 8005452:	d208      	bcs.n	8005466 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005454:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	491a      	ldr	r1, [pc, #104]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 8005462:	4313      	orrs	r3, r2
 8005464:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0320 	and.w	r3, r3, #32
 800546e:	2b00      	cmp	r3, #0
 8005470:	d010      	beq.n	8005494 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800547e:	429a      	cmp	r2, r3
 8005480:	d208      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	490f      	ldr	r1, [pc, #60]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 8005490:	4313      	orrs	r3, r2
 8005492:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005494:	f000 f822 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8005498:	4601      	mov	r1, r0
 800549a:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <HAL_RCC_ClockConfig+0x338>)
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	0a1b      	lsrs	r3, r3, #8
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <HAL_RCC_ClockConfig+0x33c>)
 80054a6:	5cd3      	ldrb	r3, [r2, r3]
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	fa21 f303 	lsr.w	r3, r1, r3
 80054b0:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <HAL_RCC_ClockConfig+0x340>)
 80054b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80054b4:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <HAL_RCC_ClockConfig+0x344>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fb fc5b 	bl	8000d74 <HAL_InitTick>
 80054be:	4603      	mov	r3, r0
 80054c0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80054c2:	7afb      	ldrb	r3, [r7, #11]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	58024400 	.word	0x58024400
 80054d0:	080083cc 	.word	0x080083cc
 80054d4:	24040000 	.word	0x24040000
 80054d8:	24040014 	.word	0x24040014

080054dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	b089      	sub	sp, #36	; 0x24
 80054e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e2:	4baf      	ldr	r3, [pc, #700]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ea:	2b18      	cmp	r3, #24
 80054ec:	f200 814e 	bhi.w	800578c <HAL_RCC_GetSysClockFreq+0x2b0>
 80054f0:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f6:	bf00      	nop
 80054f8:	0800555d 	.word	0x0800555d
 80054fc:	0800578d 	.word	0x0800578d
 8005500:	0800578d 	.word	0x0800578d
 8005504:	0800578d 	.word	0x0800578d
 8005508:	0800578d 	.word	0x0800578d
 800550c:	0800578d 	.word	0x0800578d
 8005510:	0800578d 	.word	0x0800578d
 8005514:	0800578d 	.word	0x0800578d
 8005518:	08005583 	.word	0x08005583
 800551c:	0800578d 	.word	0x0800578d
 8005520:	0800578d 	.word	0x0800578d
 8005524:	0800578d 	.word	0x0800578d
 8005528:	0800578d 	.word	0x0800578d
 800552c:	0800578d 	.word	0x0800578d
 8005530:	0800578d 	.word	0x0800578d
 8005534:	0800578d 	.word	0x0800578d
 8005538:	08005589 	.word	0x08005589
 800553c:	0800578d 	.word	0x0800578d
 8005540:	0800578d 	.word	0x0800578d
 8005544:	0800578d 	.word	0x0800578d
 8005548:	0800578d 	.word	0x0800578d
 800554c:	0800578d 	.word	0x0800578d
 8005550:	0800578d 	.word	0x0800578d
 8005554:	0800578d 	.word	0x0800578d
 8005558:	0800558f 	.word	0x0800558f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800555c:	4b90      	ldr	r3, [pc, #576]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d009      	beq.n	800557c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005568:	4b8d      	ldr	r3, [pc, #564]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	08db      	lsrs	r3, r3, #3
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	4a8c      	ldr	r2, [pc, #560]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005574:	fa22 f303 	lsr.w	r3, r2, r3
 8005578:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800557a:	e10a      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800557c:	4b89      	ldr	r3, [pc, #548]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800557e:	61bb      	str	r3, [r7, #24]
    break;
 8005580:	e107      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005582:	4b89      	ldr	r3, [pc, #548]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005584:	61bb      	str	r3, [r7, #24]
    break;
 8005586:	e104      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005588:	4b88      	ldr	r3, [pc, #544]	; (80057ac <HAL_RCC_GetSysClockFreq+0x2d0>)
 800558a:	61bb      	str	r3, [r7, #24]
    break;
 800558c:	e101      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800558e:	4b84      	ldr	r3, [pc, #528]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005598:	4b81      	ldr	r3, [pc, #516]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055a4:	4b7e      	ldr	r3, [pc, #504]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80055ae:	4b7c      	ldr	r3, [pc, #496]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	08db      	lsrs	r3, r3, #3
 80055b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80da 	beq.w	8005786 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d05a      	beq.n	800568e <HAL_RCC_GetSysClockFreq+0x1b2>
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d302      	bcc.n	80055e2 <HAL_RCC_GetSysClockFreq+0x106>
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d078      	beq.n	80056d2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80055e0:	e099      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055e2:	4b6f      	ldr	r3, [pc, #444]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d02d      	beq.n	800564a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055ee:	4b6c      	ldr	r3, [pc, #432]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	08db      	lsrs	r3, r3, #3
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	4a6a      	ldr	r2, [pc, #424]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80055fa:	fa22 f303 	lsr.w	r3, r2, r3
 80055fe:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005618:	4b61      	ldr	r3, [pc, #388]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005628:	ed97 6a02 	vldr	s12, [r7, #8]
 800562c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800563c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005644:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005648:	e087      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005654:	eddf 6a57 	vldr	s13, [pc, #348]	; 80057b4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565c:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005664:	ee07 3a90 	vmov	s15, r3
 8005668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005670:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005688:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800568c:	e065      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005698:	eddf 6a47 	vldr	s13, [pc, #284]	; 80057b8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800569c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a0:	4b3f      	ldr	r3, [pc, #252]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80056b4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80056b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056d0:	e043      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056dc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80057bc <HAL_RCC_GetSysClockFreq+0x2e0>
 80056e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e4:	4b2e      	ldr	r3, [pc, #184]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80056f8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80056fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005714:	e021      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	ee07 3a90 	vmov	s15, r3
 800571c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005720:	eddf 6a25 	vldr	s13, [pc, #148]	; 80057b8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005728:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005730:	ee07 3a90 	vmov	s15, r3
 8005734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005738:	ed97 6a02 	vldr	s12, [r7, #8]
 800573c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80057b0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800574c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005754:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005758:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	0a5b      	lsrs	r3, r3, #9
 8005760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005764:	3301      	adds	r3, #1
 8005766:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005772:	edd7 6a07 	vldr	s13, [r7, #28]
 8005776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800577a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800577e:	ee17 3a90 	vmov	r3, s15
 8005782:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005784:	e005      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
    break;
 800578a:	e002      	b.n	8005792 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800578e:	61bb      	str	r3, [r7, #24]
    break;
 8005790:	bf00      	nop
  }

  return sysclockfreq;
 8005792:	69bb      	ldr	r3, [r7, #24]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3724      	adds	r7, #36	; 0x24
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	58024400 	.word	0x58024400
 80057a4:	03d09000 	.word	0x03d09000
 80057a8:	003d0900 	.word	0x003d0900
 80057ac:	017d7840 	.word	0x017d7840
 80057b0:	46000000 	.word	0x46000000
 80057b4:	4c742400 	.word	0x4c742400
 80057b8:	4a742400 	.word	0x4a742400
 80057bc:	4bbebc20 	.word	0x4bbebc20

080057c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057c4:	f001 fd22 	bl	800720c <HAL_RCCEx_GetD1SysClockFreq>
 80057c8:	4601      	mov	r1, r0
 80057ca:	4b08      	ldr	r3, [pc, #32]	; (80057ec <HAL_RCC_GetHCLKFreq+0x2c>)
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	4a07      	ldr	r2, [pc, #28]	; (80057f0 <HAL_RCC_GetHCLKFreq+0x30>)
 80057d4:	5cd3      	ldrb	r3, [r2, r3]
 80057d6:	f003 031f 	and.w	r3, r3, #31
 80057da:	fa21 f303 	lsr.w	r3, r1, r3
 80057de:	4a05      	ldr	r2, [pc, #20]	; (80057f4 <HAL_RCC_GetHCLKFreq+0x34>)
 80057e0:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 80057e2:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <HAL_RCC_GetHCLKFreq+0x34>)
 80057e4:	681b      	ldr	r3, [r3, #0]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	58024400 	.word	0x58024400
 80057f0:	080083cc 	.word	0x080083cc
 80057f4:	24040004 	.word	0x24040004

080057f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005800:	2300      	movs	r3, #0
 8005802:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005804:	2300      	movs	r3, #0
 8005806:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d03d      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581c:	d013      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800581e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005822:	d802      	bhi.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005828:	e01f      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800582a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800582e:	d013      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005834:	d01c      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005836:	e018      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005838:	4baf      	ldr	r3, [pc, #700]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	4aae      	ldr	r2, [pc, #696]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800583e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005842:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005844:	e015      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3304      	adds	r3, #4
 800584a:	2102      	movs	r1, #2
 800584c:	4618      	mov	r0, r3
 800584e:	f001 fcf9 	bl	8007244 <RCCEx_PLL2_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005856:	e00c      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3324      	adds	r3, #36	; 0x24
 800585c:	2102      	movs	r1, #2
 800585e:	4618      	mov	r0, r3
 8005860:	f001 fda2 	bl	80073a8 <RCCEx_PLL3_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005868:	e003      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
      break;
 800586e:	e000      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005878:	4b9f      	ldr	r3, [pc, #636]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800587a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005884:	499c      	ldr	r1, [pc, #624]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005886:	4313      	orrs	r3, r2
 8005888:	650b      	str	r3, [r1, #80]	; 0x50
 800588a:	e001      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d03d      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d826      	bhi.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80058a4:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	080058c1 	.word	0x080058c1
 80058b0:	080058cf 	.word	0x080058cf
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	080058f9 	.word	0x080058f9
 80058bc:	080058f9 	.word	0x080058f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c0:	4b8d      	ldr	r3, [pc, #564]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	4a8c      	ldr	r2, [pc, #560]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058cc:	e015      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3304      	adds	r3, #4
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 fcb5 	bl	8007244 <RCCEx_PLL2_Config>
 80058da:	4603      	mov	r3, r0
 80058dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058de:	e00c      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3324      	adds	r3, #36	; 0x24
 80058e4:	2100      	movs	r1, #0
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fd5e 	bl	80073a8 <RCCEx_PLL3_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058f0:	e003      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
      break;
 80058f6:	e000      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80058f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d109      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005900:	4b7d      	ldr	r3, [pc, #500]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005904:	f023 0207 	bic.w	r2, r3, #7
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	497a      	ldr	r1, [pc, #488]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800590e:	4313      	orrs	r3, r2
 8005910:	650b      	str	r3, [r1, #80]	; 0x50
 8005912:	e001      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	7dfb      	ldrb	r3, [r7, #23]
 8005916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005920:	2b00      	cmp	r3, #0
 8005922:	d03e      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005928:	2b80      	cmp	r3, #128	; 0x80
 800592a:	d01c      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800592c:	2b80      	cmp	r3, #128	; 0x80
 800592e:	d804      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d00d      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005938:	e01e      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800593a:	2bc0      	cmp	r3, #192	; 0xc0
 800593c:	d01f      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800593e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005942:	d01e      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005944:	e018      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005946:	4b6c      	ldr	r3, [pc, #432]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	4a6b      	ldr	r2, [pc, #428]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800594c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005950:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005952:	e017      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3304      	adds	r3, #4
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f001 fc72 	bl	8007244 <RCCEx_PLL2_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005964:	e00e      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3324      	adds	r3, #36	; 0x24
 800596a:	2100      	movs	r1, #0
 800596c:	4618      	mov	r0, r3
 800596e:	f001 fd1b 	bl	80073a8 <RCCEx_PLL3_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005976:	e005      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
      break;
 800597c:	e002      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800598a:	4b5b      	ldr	r3, [pc, #364]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800598c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005996:	4958      	ldr	r1, [pc, #352]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005998:	4313      	orrs	r3, r2
 800599a:	650b      	str	r3, [r1, #80]	; 0x50
 800599c:	e001      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d044      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b8:	d01f      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 80059ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059be:	d805      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80059c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059c8:	d00e      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80059ca:	e01f      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80059cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059d0:	d01f      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80059d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059d6:	d01e      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059d8:	e018      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059da:	4b47      	ldr	r3, [pc, #284]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	4a46      	ldr	r2, [pc, #280]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059e6:	e017      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3304      	adds	r3, #4
 80059ec:	2100      	movs	r1, #0
 80059ee:	4618      	mov	r0, r3
 80059f0:	f001 fc28 	bl	8007244 <RCCEx_PLL2_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059f8:	e00e      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3324      	adds	r3, #36	; 0x24
 80059fe:	2100      	movs	r1, #0
 8005a00:	4618      	mov	r0, r3
 8005a02:	f001 fcd1 	bl	80073a8 <RCCEx_PLL3_Config>
 8005a06:	4603      	mov	r3, r0
 8005a08:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a0a:	e005      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a10:	e002      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005a12:	bf00      	nop
 8005a14:	e000      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a2c:	4932      	ldr	r1, [pc, #200]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	658b      	str	r3, [r1, #88]	; 0x58
 8005a32:	e001      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d044      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a4e:	d01f      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a54:	d805      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a5e:	d00e      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a60:	e01f      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005a62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a66:	d01f      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a6c:	d01e      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005a6e:	e018      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a7c:	e017      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3304      	adds	r3, #4
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fbdd 	bl	8007244 <RCCEx_PLL2_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a8e:	e00e      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3324      	adds	r3, #36	; 0x24
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 fc86 	bl	80073a8 <RCCEx_PLL3_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005aa0:	e005      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa6:	e002      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005aa8:	bf00      	nop
 8005aaa:	e000      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ab4:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ac2:	490d      	ldr	r1, [pc, #52]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	658b      	str	r3, [r1, #88]	; 0x58
 8005ac8:	e001      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d035      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ade:	2b10      	cmp	r3, #16
 8005ae0:	d00c      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005ae2:	2b10      	cmp	r3, #16
 8005ae4:	d802      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01b      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005aea:	e017      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d00c      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005af0:	2b30      	cmp	r3, #48	; 0x30
 8005af2:	d018      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005af4:	e012      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005af6:	bf00      	nop
 8005af8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005afc:	4baf      	ldr	r3, [pc, #700]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	4aae      	ldr	r2, [pc, #696]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b08:	e00e      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	2102      	movs	r1, #2
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 fb97 	bl	8007244 <RCCEx_PLL2_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b1a:	e005      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b20:	e002      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005b22:	bf00      	nop
 8005b24:	e000      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b2e:	4ba3      	ldr	r3, [pc, #652]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3a:	49a0      	ldr	r1, [pc, #640]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b40:	e001      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d042      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b5a:	d01f      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b60:	d805      	bhi.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6a:	d00e      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005b6c:	e01f      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005b6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b72:	d01f      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b78:	d01e      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005b7a:	e018      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7c:	4b8f      	ldr	r3, [pc, #572]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	4a8e      	ldr	r2, [pc, #568]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b88:	e017      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 fb57 	bl	8007244 <RCCEx_PLL2_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b9a:	e00e      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3324      	adds	r3, #36	; 0x24
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f001 fc00 	bl	80073a8 <RCCEx_PLL3_Config>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005bac:	e005      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb2:	e002      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bc0:	4b7e      	ldr	r3, [pc, #504]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bcc:	497b      	ldr	r1, [pc, #492]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	650b      	str	r3, [r1, #80]	; 0x50
 8005bd2:	e001      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d042      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bec:	d01b      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005bee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bf2:	d805      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d022      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005bfe:	e01b      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005c00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c04:	d01d      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c0a:	d01c      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005c0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c10:	d01b      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005c12:	e011      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3304      	adds	r3, #4
 8005c18:	2101      	movs	r1, #1
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 fb12 	bl	8007244 <RCCEx_PLL2_Config>
 8005c20:	4603      	mov	r3, r0
 8005c22:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c24:	e012      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3324      	adds	r3, #36	; 0x24
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 fbbb 	bl	80073a8 <RCCEx_PLL3_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c36:	e009      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3c:	e006      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e004      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c52:	4b5a      	ldr	r3, [pc, #360]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5e:	4957      	ldr	r1, [pc, #348]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	650b      	str	r3, [r1, #80]	; 0x50
 8005c64:	e001      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d044      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c80:	d01b      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c86:	d805      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d022      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c90:	d00a      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005c92:	e01b      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c98:	d01d      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c9e:	d01c      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005ca0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ca4:	d01b      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005ca6:	e011      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	2101      	movs	r1, #1
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 fac8 	bl	8007244 <RCCEx_PLL2_Config>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cb8:	e012      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3324      	adds	r3, #36	; 0x24
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 fb71 	bl	80073a8 <RCCEx_PLL3_Config>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cca:	e009      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd0:	e006      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e004      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e002      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ce6:	4b35      	ldr	r3, [pc, #212]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005cf4:	4931      	ldr	r1, [pc, #196]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	658b      	str	r3, [r1, #88]	; 0x58
 8005cfa:	e001      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfc:	7dfb      	ldrb	r3, [r7, #23]
 8005cfe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d02d      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d14:	d005      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d1a:	d009      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d013      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005d20:	e00f      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d22:	4b26      	ldr	r3, [pc, #152]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d2e:	e00c      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3304      	adds	r3, #4
 8005d34:	2101      	movs	r1, #1
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 fa84 	bl	8007244 <RCCEx_PLL2_Config>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d40:	e003      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	75fb      	strb	r3, [r7, #23]
      break;
 8005d46:	e000      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d50:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d5c:	4917      	ldr	r1, [pc, #92]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	650b      	str	r3, [r1, #80]	; 0x50
 8005d62:	e001      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d035      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d81b      	bhi.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005d7c:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d82:	bf00      	nop
 8005d84:	08005dc1 	.word	0x08005dc1
 8005d88:	08005d95 	.word	0x08005d95
 8005d8c:	08005da3 	.word	0x08005da3
 8005d90:	08005dc1 	.word	0x08005dc1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	4a08      	ldr	r2, [pc, #32]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005da0:	e00f      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3304      	adds	r3, #4
 8005da6:	2102      	movs	r1, #2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 fa4b 	bl	8007244 <RCCEx_PLL2_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005db2:	e006      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	75fb      	strb	r3, [r7, #23]
      break;
 8005db8:	e003      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005dba:	bf00      	nop
 8005dbc:	58024400 	.word	0x58024400
      break;
 8005dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dc8:	4bba      	ldr	r3, [pc, #744]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dcc:	f023 0203 	bic.w	r2, r3, #3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd4:	49b7      	ldr	r1, [pc, #732]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005dda:	e001      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
 8005dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8086 	beq.w	8005efa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dee:	4bb2      	ldr	r3, [pc, #712]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4ab1      	ldr	r2, [pc, #708]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dfa:	f7fb f81f 	bl	8000e3c <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e00:	e009      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e02:	f7fb f81b 	bl	8000e3c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b64      	cmp	r3, #100	; 0x64
 8005e0e:	d902      	bls.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	75fb      	strb	r3, [r7, #23]
        break;
 8005e14:	e005      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e16:	4ba8      	ldr	r3, [pc, #672]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0ef      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d166      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e28:	4ba2      	ldr	r3, [pc, #648]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e32:	4053      	eors	r3, r2
 8005e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d013      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e3c:	4b9d      	ldr	r3, [pc, #628]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e44:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e46:	4b9b      	ldr	r3, [pc, #620]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	4a9a      	ldr	r2, [pc, #616]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e50:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e52:	4b98      	ldr	r3, [pc, #608]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e56:	4a97      	ldr	r2, [pc, #604]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e5e:	4a95      	ldr	r2, [pc, #596]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6e:	d115      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fa ffe4 	bl	8000e3c <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e76:	e00b      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e78:	f7fa ffe0 	bl	8000e3c <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d902      	bls.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	75fb      	strb	r3, [r7, #23]
            break;
 8005e8e:	e005      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e90:	4b88      	ldr	r3, [pc, #544]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0ed      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d126      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb0:	d10d      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005eb2:	4b80      	ldr	r3, [pc, #512]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ec0:	0919      	lsrs	r1, r3, #4
 8005ec2:	4b7e      	ldr	r3, [pc, #504]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005ec4:	400b      	ands	r3, r1
 8005ec6:	497b      	ldr	r1, [pc, #492]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	610b      	str	r3, [r1, #16]
 8005ecc:	e005      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005ece:	4b79      	ldr	r3, [pc, #484]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	4a78      	ldr	r2, [pc, #480]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ed4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ed8:	6113      	str	r3, [r2, #16]
 8005eda:	4b76      	ldr	r3, [pc, #472]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005edc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee8:	4972      	ldr	r1, [pc, #456]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	670b      	str	r3, [r1, #112]	; 0x70
 8005eee:	e004      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	75bb      	strb	r3, [r7, #22]
 8005ef4:	e001      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d07d      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f0a:	2b28      	cmp	r3, #40	; 0x28
 8005f0c:	d866      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005fe3 	.word	0x08005fe3
 8005f18:	08005fdd 	.word	0x08005fdd
 8005f1c:	08005fdd 	.word	0x08005fdd
 8005f20:	08005fdd 	.word	0x08005fdd
 8005f24:	08005fdd 	.word	0x08005fdd
 8005f28:	08005fdd 	.word	0x08005fdd
 8005f2c:	08005fdd 	.word	0x08005fdd
 8005f30:	08005fdd 	.word	0x08005fdd
 8005f34:	08005fb9 	.word	0x08005fb9
 8005f38:	08005fdd 	.word	0x08005fdd
 8005f3c:	08005fdd 	.word	0x08005fdd
 8005f40:	08005fdd 	.word	0x08005fdd
 8005f44:	08005fdd 	.word	0x08005fdd
 8005f48:	08005fdd 	.word	0x08005fdd
 8005f4c:	08005fdd 	.word	0x08005fdd
 8005f50:	08005fdd 	.word	0x08005fdd
 8005f54:	08005fcb 	.word	0x08005fcb
 8005f58:	08005fdd 	.word	0x08005fdd
 8005f5c:	08005fdd 	.word	0x08005fdd
 8005f60:	08005fdd 	.word	0x08005fdd
 8005f64:	08005fdd 	.word	0x08005fdd
 8005f68:	08005fdd 	.word	0x08005fdd
 8005f6c:	08005fdd 	.word	0x08005fdd
 8005f70:	08005fdd 	.word	0x08005fdd
 8005f74:	08005fe3 	.word	0x08005fe3
 8005f78:	08005fdd 	.word	0x08005fdd
 8005f7c:	08005fdd 	.word	0x08005fdd
 8005f80:	08005fdd 	.word	0x08005fdd
 8005f84:	08005fdd 	.word	0x08005fdd
 8005f88:	08005fdd 	.word	0x08005fdd
 8005f8c:	08005fdd 	.word	0x08005fdd
 8005f90:	08005fdd 	.word	0x08005fdd
 8005f94:	08005fe3 	.word	0x08005fe3
 8005f98:	08005fdd 	.word	0x08005fdd
 8005f9c:	08005fdd 	.word	0x08005fdd
 8005fa0:	08005fdd 	.word	0x08005fdd
 8005fa4:	08005fdd 	.word	0x08005fdd
 8005fa8:	08005fdd 	.word	0x08005fdd
 8005fac:	08005fdd 	.word	0x08005fdd
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005fe3 	.word	0x08005fe3
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 f940 	bl	8007244 <RCCEx_PLL2_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fc8:	e00c      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3324      	adds	r3, #36	; 0x24
 8005fce:	2101      	movs	r1, #1
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 f9e9 	bl	80073a8 <RCCEx_PLL3_Config>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fda:	e003      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe0:	e000      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005fea:	4b32      	ldr	r3, [pc, #200]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ff6:	492f      	ldr	r1, [pc, #188]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	654b      	str	r3, [r1, #84]	; 0x54
 8005ffc:	e001      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d037      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006012:	2b05      	cmp	r3, #5
 8006014:	d820      	bhi.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	0800605f 	.word	0x0800605f
 8006020:	08006035 	.word	0x08006035
 8006024:	08006047 	.word	0x08006047
 8006028:	0800605f 	.word	0x0800605f
 800602c:	0800605f 	.word	0x0800605f
 8006030:	0800605f 	.word	0x0800605f
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	2101      	movs	r1, #1
 800603a:	4618      	mov	r0, r3
 800603c:	f001 f902 	bl	8007244 <RCCEx_PLL2_Config>
 8006040:	4603      	mov	r3, r0
 8006042:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006044:	e00c      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3324      	adds	r3, #36	; 0x24
 800604a:	2101      	movs	r1, #1
 800604c:	4618      	mov	r0, r3
 800604e:	f001 f9ab 	bl	80073a8 <RCCEx_PLL3_Config>
 8006052:	4603      	mov	r3, r0
 8006054:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006056:	e003      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	75fb      	strb	r3, [r7, #23]
      break;
 800605c:	e000      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800605e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d109      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606a:	f023 0207 	bic.w	r2, r3, #7
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006072:	4910      	ldr	r1, [pc, #64]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006074:	4313      	orrs	r3, r2
 8006076:	654b      	str	r3, [r1, #84]	; 0x54
 8006078:	e001      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b00      	cmp	r3, #0
 8006088:	d040      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006090:	2b05      	cmp	r3, #5
 8006092:	d827      	bhi.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060eb 	.word	0x080060eb
 80060a0:	080060c1 	.word	0x080060c1
 80060a4:	080060d3 	.word	0x080060d3
 80060a8:	080060eb 	.word	0x080060eb
 80060ac:	080060eb 	.word	0x080060eb
 80060b0:	080060eb 	.word	0x080060eb
 80060b4:	58024400 	.word	0x58024400
 80060b8:	58024800 	.word	0x58024800
 80060bc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	2101      	movs	r1, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 f8bc 	bl	8007244 <RCCEx_PLL2_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060d0:	e00c      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3324      	adds	r3, #36	; 0x24
 80060d6:	2101      	movs	r1, #1
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 f965 	bl	80073a8 <RCCEx_PLL3_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060e2:	e003      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	75fb      	strb	r3, [r7, #23]
      break;
 80060e8:	e000      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80060ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060f2:	4bb3      	ldr	r3, [pc, #716]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	f023 0207 	bic.w	r2, r3, #7
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	49af      	ldr	r1, [pc, #700]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006102:	4313      	orrs	r3, r2
 8006104:	658b      	str	r3, [r1, #88]	; 0x58
 8006106:	e001      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d044      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800611e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006122:	d01b      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006128:	d805      	bhi.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d022      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800612e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006132:	d00a      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006134:	e01b      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613a:	d01d      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800613c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006140:	d01c      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006142:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006146:	d01b      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006148:	e011      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3304      	adds	r3, #4
 800614e:	2100      	movs	r1, #0
 8006150:	4618      	mov	r0, r3
 8006152:	f001 f877 	bl	8007244 <RCCEx_PLL2_Config>
 8006156:	4603      	mov	r3, r0
 8006158:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800615a:	e012      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3324      	adds	r3, #36	; 0x24
 8006160:	2102      	movs	r1, #2
 8006162:	4618      	mov	r0, r3
 8006164:	f001 f920 	bl	80073a8 <RCCEx_PLL3_Config>
 8006168:	4603      	mov	r3, r0
 800616a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800616c:	e009      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	75fb      	strb	r3, [r7, #23]
      break;
 8006172:	e006      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006174:	bf00      	nop
 8006176:	e004      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006178:	bf00      	nop
 800617a:	e002      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006188:	4b8d      	ldr	r3, [pc, #564]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006196:	498a      	ldr	r1, [pc, #552]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006198:	4313      	orrs	r3, r2
 800619a:	654b      	str	r3, [r1, #84]	; 0x54
 800619c:	e001      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d044      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b8:	d01b      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80061ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061be:	d805      	bhi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d022      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80061c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c8:	d00a      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80061ca:	e01b      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80061cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d0:	d01d      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80061d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061d6:	d01c      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80061d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061dc:	d01b      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80061de:	e011      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 f82c 	bl	8007244 <RCCEx_PLL2_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061f0:	e012      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3324      	adds	r3, #36	; 0x24
 80061f6:	2102      	movs	r1, #2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 f8d5 	bl	80073a8 <RCCEx_PLL3_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006202:	e009      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	75fb      	strb	r3, [r7, #23]
      break;
 8006208:	e006      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800620a:	bf00      	nop
 800620c:	e004      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800620e:	bf00      	nop
 8006210:	e002      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006212:	bf00      	nop
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800621e:	4b68      	ldr	r3, [pc, #416]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006222:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800622c:	4964      	ldr	r1, [pc, #400]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800622e:	4313      	orrs	r3, r2
 8006230:	658b      	str	r3, [r1, #88]	; 0x58
 8006232:	e001      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006240:	2b00      	cmp	r3, #0
 8006242:	d044      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800624a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800624e:	d01b      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006254:	d805      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006256:	2b00      	cmp	r3, #0
 8006258:	d022      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800625a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006260:	e01b      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006266:	d01d      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006268:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800626c:	d01c      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800626e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006272:	d01b      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006274:	e011      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3304      	adds	r3, #4
 800627a:	2100      	movs	r1, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f000 ffe1 	bl	8007244 <RCCEx_PLL2_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006286:	e012      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3324      	adds	r3, #36	; 0x24
 800628c:	2102      	movs	r1, #2
 800628e:	4618      	mov	r0, r3
 8006290:	f001 f88a 	bl	80073a8 <RCCEx_PLL3_Config>
 8006294:	4603      	mov	r3, r0
 8006296:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006298:	e009      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	75fb      	strb	r3, [r7, #23]
      break;
 800629e:	e006      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80062a0:	bf00      	nop
 80062a2:	e004      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80062a4:	bf00      	nop
 80062a6:	e002      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80062a8:	bf00      	nop
 80062aa:	e000      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80062ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062b4:	4b42      	ldr	r3, [pc, #264]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80062b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062c2:	493f      	ldr	r1, [pc, #252]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	658b      	str	r3, [r1, #88]	; 0x58
 80062c8:	e001      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01b      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e4:	d10b      	bne.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3324      	adds	r3, #36	; 0x24
 80062ea:	2102      	movs	r1, #2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f85b 	bl	80073a8 <RCCEx_PLL3_Config>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00c      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75bb      	strb	r3, [r7, #22]
 80062fc:	e009      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062fe:	4b30      	ldr	r3, [pc, #192]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006302:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800630c:	492c      	ldr	r1, [pc, #176]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800630e:	4313      	orrs	r3, r2
 8006310:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01b      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006328:	d10b      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3324      	adds	r3, #36	; 0x24
 800632e:	2102      	movs	r1, #2
 8006330:	4618      	mov	r0, r3
 8006332:	f001 f839 	bl	80073a8 <RCCEx_PLL3_Config>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00c      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	75bb      	strb	r3, [r7, #22]
 8006340:	e009      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006342:	4b1f      	ldr	r3, [pc, #124]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006346:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006350:	491b      	ldr	r1, [pc, #108]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006352:	4313      	orrs	r3, r2
 8006354:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d032      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636c:	d00d      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xb92>
 800636e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006372:	d016      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d111      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f000 ff60 	bl	8007244 <RCCEx_PLL2_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006388:	e00c      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3324      	adds	r3, #36	; 0x24
 800638e:	2102      	movs	r1, #2
 8006390:	4618      	mov	r0, r3
 8006392:	f001 f809 	bl	80073a8 <RCCEx_PLL3_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800639a:	e003      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	75fb      	strb	r3, [r7, #23]
      break;
 80063a0:	e000      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80063a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10c      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80063ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063b8:	4901      	ldr	r1, [pc, #4]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	658b      	str	r3, [r1, #88]	; 0x58
 80063be:	e003      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80063c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d02f      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063de:	d00c      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80063e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063e4:	d015      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80063e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ea:	d10f      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ec:	4b79      	ldr	r3, [pc, #484]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	4a78      	ldr	r2, [pc, #480]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80063f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80063f8:	e00c      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3324      	adds	r3, #36	; 0x24
 80063fe:	2101      	movs	r1, #1
 8006400:	4618      	mov	r0, r3
 8006402:	f000 ffd1 	bl	80073a8 <RCCEx_PLL3_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800640a:	e003      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	75fb      	strb	r3, [r7, #23]
      break;
 8006410:	e000      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8006412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800641a:	4b6e      	ldr	r3, [pc, #440]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006428:	496a      	ldr	r1, [pc, #424]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800642a:	4313      	orrs	r3, r2
 800642c:	654b      	str	r3, [r1, #84]	; 0x54
 800642e:	e001      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
 8006432:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d029      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8006448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644c:	d007      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800644e:	e00f      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006450:	4b60      	ldr	r3, [pc, #384]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a5f      	ldr	r2, [pc, #380]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800645c:	e00b      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3304      	adds	r3, #4
 8006462:	2102      	movs	r1, #2
 8006464:	4618      	mov	r0, r3
 8006466:	f000 feed 	bl	8007244 <RCCEx_PLL2_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800646e:	e002      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	75fb      	strb	r3, [r7, #23]
      break;
 8006474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800647c:	4b55      	ldr	r3, [pc, #340]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800647e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006488:	4952      	ldr	r1, [pc, #328]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800648a:	4313      	orrs	r3, r2
 800648c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800648e:	e001      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3324      	adds	r3, #36	; 0x24
 80064a4:	2102      	movs	r1, #2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 ff7e 	bl	80073a8 <RCCEx_PLL3_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d02f      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ca:	d00c      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 80064cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d0:	d802      	bhi.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d011      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80064d6:	e00d      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 80064d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064dc:	d00f      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80064de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e2:	d00e      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 80064e4:	e006      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e6:	4b3b      	ldr	r3, [pc, #236]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	4a3a      	ldr	r2, [pc, #232]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80064ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80064f2:	e007      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	75fb      	strb	r3, [r7, #23]
      break;
 80064f8:	e004      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80064fa:	bf00      	nop
 80064fc:	e002      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80064fe:	bf00      	nop
 8006500:	e000      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8006502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800650a:	4b32      	ldr	r3, [pc, #200]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800650c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006516:	492f      	ldr	r1, [pc, #188]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006518:	4313      	orrs	r3, r2
 800651a:	654b      	str	r3, [r1, #84]	; 0x54
 800651c:	e001      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d008      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800652e:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006532:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653a:	4926      	ldr	r1, [pc, #152]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800653c:	4313      	orrs	r3, r2
 800653e:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800654c:	4b21      	ldr	r3, [pc, #132]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800655a:	491e      	ldr	r1, [pc, #120]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800655c:	4313      	orrs	r3, r2
 800655e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800656c:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800656e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006570:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006578:	4916      	ldr	r1, [pc, #88]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800657a:	4313      	orrs	r3, r2
 800657c:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00d      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800658a:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	4a11      	ldr	r2, [pc, #68]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006590:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006594:	6113      	str	r3, [r2, #16]
 8006596:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80065a0:	490c      	ldr	r1, [pc, #48]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	da08      	bge.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80065b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ba:	4906      	ldr	r1, [pc, #24]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80065c0:	7dbb      	ldrb	r3, [r7, #22]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	e000      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	58024400 	.word	0x58024400

080065d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b090      	sub	sp, #64	; 0x40
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e6:	d150      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80065e8:	4ba1      	ldr	r3, [pc, #644]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d844      	bhi.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006615 	.word	0x08006615
 8006604:	08006625 	.word	0x08006625
 8006608:	08006635 	.word	0x08006635
 800660c:	0800667d 	.word	0x0800667d
 8006610:	08006645 	.word	0x08006645
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fcab 	bl	8006f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006622:	e200      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006624:	f107 0318 	add.w	r3, r7, #24
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fa0b 	bl	8006a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006632:	e1f8      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006634:	f107 030c 	add.w	r3, r7, #12
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fb4f 	bl	8006cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006642:	e1f0      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006644:	4b8a      	ldr	r3, [pc, #552]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800664c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800664e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006654:	4b87      	ldr	r3, [pc, #540]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006656:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006658:	e1e5      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 800665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006660:	d102      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006662:	4b85      	ldr	r3, [pc, #532]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006666:	e1de      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666e:	d102      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006670:	4b82      	ldr	r3, [pc, #520]	; (800687c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006674:	e1d7      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800667a:	e1d4      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800667c:	4b80      	ldr	r3, [pc, #512]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006680:	e1d1      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006686:	bf00      	nop
 8006688:	e1cd      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006690:	d14f      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006692:	4b77      	ldr	r3, [pc, #476]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006696:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800669a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	2b80      	cmp	r3, #128	; 0x80
 80066a0:	d01c      	beq.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d804      	bhi.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d00e      	beq.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80066ae:	e03c      	b.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80066b0:	2bc0      	cmp	r3, #192	; 0xc0
 80066b2:	d037      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80066b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b8:	d018      	beq.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80066ba:	e036      	b.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fc57 	bl	8006f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ca:	e1ac      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066cc:	f107 0318 	add.w	r3, r7, #24
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f9b7 	bl	8006a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066da:	e1a4      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066dc:	f107 030c 	add.w	r3, r7, #12
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fafb 	bl	8006cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ea:	e19c      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066ec:	4b60      	ldr	r3, [pc, #384]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066f4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80066f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80066fc:	4b5d      	ldr	r3, [pc, #372]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006700:	e191      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006708:	d102      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800670a:	4b5b      	ldr	r3, [pc, #364]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800670c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800670e:	e18a      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006716:	d102      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006718:	4b58      	ldr	r3, [pc, #352]	; (800687c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800671c:	e183      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006722:	e180      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006724:	4b56      	ldr	r3, [pc, #344]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006728:	e17d      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672e:	bf00      	nop
 8006730:	e179      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006738:	d153      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800673a:	4b4d      	ldr	r3, [pc, #308]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006742:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800674a:	d01f      	beq.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800674c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006750:	d805      	bhi.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800675a:	d00f      	beq.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800675c:	e03d      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800675e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006762:	d037      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006768:	d018      	beq.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800676a:	e036      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800676c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fbff 	bl	8006f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800677a:	e154      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800677c:	f107 0318 	add.w	r3, r7, #24
 8006780:	4618      	mov	r0, r3
 8006782:	f000 f95f 	bl	8006a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800678a:	e14c      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800678c:	f107 030c 	add.w	r3, r7, #12
 8006790:	4618      	mov	r0, r3
 8006792:	f000 faa3 	bl	8006cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800679a:	e144      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800679c:	4b34      	ldr	r3, [pc, #208]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800679e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067a4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80067a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80067ac:	4b31      	ldr	r3, [pc, #196]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80067b0:	e139      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80067b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067b8:	d102      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80067ba:	4b2f      	ldr	r3, [pc, #188]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067be:	e132      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80067c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c6:	d102      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80067c8:	4b2c      	ldr	r3, [pc, #176]	; (800687c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067cc:	e12b      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067d2:	e128      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80067d4:	4b2a      	ldr	r3, [pc, #168]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067d8:	e125      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067de:	bf00      	nop
 80067e0:	e121      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067e8:	d15d      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80067ea:	4b21      	ldr	r3, [pc, #132]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80067f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067fa:	d01f      	beq.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80067fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006800:	d805      	bhi.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800680a:	d00f      	beq.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800680c:	e047      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800680e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006812:	d041      	beq.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8006814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006818:	d018      	beq.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800681a:	e040      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800681c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fba7 	bl	8006f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800682a:	e0fc      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800682c:	f107 0318 	add.w	r3, r7, #24
 8006830:	4618      	mov	r0, r3
 8006832:	f000 f907 	bl	8006a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800683a:	e0f4      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800683c:	f107 030c 	add.w	r3, r7, #12
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fa4b 	bl	8006cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800684a:	e0ec      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800684c:	4b08      	ldr	r3, [pc, #32]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800684e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006854:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800685e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006860:	e0e1      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006868:	d10c      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800686a:	4b03      	ldr	r3, [pc, #12]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800686c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800686e:	e0da      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006870:	58024400 	.word	0x58024400
 8006874:	03d09000 	.word	0x03d09000
 8006878:	003d0900 	.word	0x003d0900
 800687c:	017d7840 	.word	0x017d7840
 8006880:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688a:	d102      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800688c:	4b68      	ldr	r3, [pc, #416]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006890:	e0c9      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006896:	e0c6      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006898:	4b66      	ldr	r3, [pc, #408]	; (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800689c:	e0c3      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068a2:	bf00      	nop
 80068a4:	e0bf      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ac:	d153      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80068ae:	4b62      	ldr	r3, [pc, #392]	; (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80068b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80068b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068be:	d01f      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80068c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c4:	d805      	bhi.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80068ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ce:	d00f      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80068d0:	e03d      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80068d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068d6:	d037      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80068d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068dc:	d018      	beq.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80068de:	e036      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fb45 	bl	8006f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ee:	e09a      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068f0:	f107 0318 	add.w	r3, r7, #24
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f8a5 	bl	8006a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068fe:	e092      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006900:	f107 030c 	add.w	r3, r7, #12
 8006904:	4618      	mov	r0, r3
 8006906:	f000 f9e9 	bl	8006cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800690e:	e08a      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006910:	4b49      	ldr	r3, [pc, #292]	; (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006918:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691c:	2b00      	cmp	r3, #0
 800691e:	d102      	bne.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006920:	4b46      	ldr	r3, [pc, #280]	; (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8006922:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006924:	e07f      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800692c:	d102      	bne.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800692e:	4b44      	ldr	r3, [pc, #272]	; (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8006930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006932:	e078      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800693a:	d102      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800693c:	4b3c      	ldr	r3, [pc, #240]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006940:	e071      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006946:	e06e      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006948:	4b3a      	ldr	r3, [pc, #232]	; (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800694c:	e06b      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006952:	bf00      	nop
 8006954:	e067      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800695c:	d13d      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800695e:	4b36      	ldr	r3, [pc, #216]	; (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006966:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800696e:	d00c      	beq.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006974:	d011      	beq.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d12b      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800697a:	f107 0318 	add.w	r3, r7, #24
 800697e:	4618      	mov	r0, r3
 8006980:	f000 f860 	bl	8006a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006988:	e04d      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800698a:	f107 030c 	add.w	r3, r7, #12
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f9a4 	bl	8006cdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006998:	e045      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800699a:	4b27      	ldr	r3, [pc, #156]	; (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 800699c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80069a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d102      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80069aa:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80069ae:	e03a      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80069b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b6:	d102      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80069b8:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069bc:	e033      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c4:	d102      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80069c6:	4b1a      	ldr	r3, [pc, #104]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ca:	e02c      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d0:	e029      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d6:	bf00      	nop
 80069d8:	e025      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e0:	d11f      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80069e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80069f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f6:	d008      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80069f8:	e00f      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fab8 	bl	8006f74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a08:	e00d      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a0a:	f107 0318 	add.w	r3, r7, #24
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f818 	bl	8006a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a18:	e005      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a1e:	bf00      	nop
 8006a20:	e001      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3740      	adds	r7, #64	; 0x40
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	017d7840 	.word	0x017d7840
 8006a34:	00bb8000 	.word	0x00bb8000
 8006a38:	58024400 	.word	0x58024400
 8006a3c:	03d09000 	.word	0x03d09000
 8006a40:	003d0900 	.word	0x003d0900

08006a44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b089      	sub	sp, #36	; 0x24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a4c:	4b9d      	ldr	r3, [pc, #628]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8006a56:	4b9b      	ldr	r3, [pc, #620]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	0b1b      	lsrs	r3, r3, #12
 8006a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a60:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8006a62:	4b98      	ldr	r3, [pc, #608]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006a6c:	4b95      	ldr	r3, [pc, #596]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a70:	08db      	lsrs	r3, r3, #3
 8006a72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	fb02 f303 	mul.w	r3, r2, r3
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 810a 	beq.w	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d05a      	beq.n	8006b4c <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d302      	bcc.n	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d078      	beq.n	8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8006a9e:	e099      	b.n	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aa0:	4b88      	ldr	r3, [pc, #544]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d02d      	beq.n	8006b08 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006aac:	4b85      	ldr	r3, [pc, #532]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	08db      	lsrs	r3, r3, #3
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	4a84      	ldr	r2, [pc, #528]	; (8006cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8006abc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad6:	4b7b      	ldr	r3, [pc, #492]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b06:	e087      	b.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1a:	4b6a      	ldr	r3, [pc, #424]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b4a:	e065      	b.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5e:	4b59      	ldr	r3, [pc, #356]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b8e:	e043      	b.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba2:	4b48      	ldr	r3, [pc, #288]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bd2:	e021      	b.n	8006c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be6:	4b37      	ldr	r3, [pc, #220]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c18:	4b2a      	ldr	r3, [pc, #168]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	0a5b      	lsrs	r3, r3, #9
 8006c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c3e:	ee17 2a90 	vmov	r2, s15
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006c46:	4b1f      	ldr	r3, [pc, #124]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	0c1b      	lsrs	r3, r3, #16
 8006c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c6c:	ee17 2a90 	vmov	r2, s15
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006c74:	4b13      	ldr	r3, [pc, #76]	; (8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	0e1b      	lsrs	r3, r3, #24
 8006c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c9a:	ee17 2a90 	vmov	r2, s15
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ca2:	e008      	b.n	8006cb6 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	609a      	str	r2, [r3, #8]
}
 8006cb6:	bf00      	nop
 8006cb8:	3724      	adds	r7, #36	; 0x24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	58024400 	.word	0x58024400
 8006cc8:	03d09000 	.word	0x03d09000
 8006ccc:	46000000 	.word	0x46000000
 8006cd0:	4c742400 	.word	0x4c742400
 8006cd4:	4a742400 	.word	0x4a742400
 8006cd8:	4bbebc20 	.word	0x4bbebc20

08006cdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b089      	sub	sp, #36	; 0x24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ce4:	4b9d      	ldr	r3, [pc, #628]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006cee:	4b9b      	ldr	r3, [pc, #620]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	0d1b      	lsrs	r3, r3, #20
 8006cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf8:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8006cfa:	4b98      	ldr	r3, [pc, #608]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d02:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d04:	4b95      	ldr	r3, [pc, #596]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	08db      	lsrs	r3, r3, #3
 8006d0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	fb02 f303 	mul.w	r3, r2, r3
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 810a 	beq.w	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d05a      	beq.n	8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d302      	bcc.n	8006d38 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d078      	beq.n	8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8006d36:	e099      	b.n	8006e6c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d38:	4b88      	ldr	r3, [pc, #544]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d02d      	beq.n	8006da0 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d44:	4b85      	ldr	r3, [pc, #532]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	08db      	lsrs	r3, r3, #3
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	4a84      	ldr	r2, [pc, #528]	; (8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
 8006d54:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6e:	4b7b      	ldr	r3, [pc, #492]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d9e:	e087      	b.n	8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f68 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db2:	4b6a      	ldr	r3, [pc, #424]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006de2:	e065      	b.n	8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df6:	4b59      	ldr	r3, [pc, #356]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e26:	e043      	b.n	8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3a:	4b48      	ldr	r3, [pc, #288]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e6a:	e021      	b.n	8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7e:	4b37      	ldr	r3, [pc, #220]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006eb0:	4b2a      	ldr	r3, [pc, #168]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	0a5b      	lsrs	r3, r3, #9
 8006eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed6:	ee17 2a90 	vmov	r2, s15
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006ede:	4b1f      	ldr	r3, [pc, #124]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ef4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f04:	ee17 2a90 	vmov	r2, s15
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f0c:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	0e1b      	lsrs	r3, r3, #24
 8006f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f32:	ee17 2a90 	vmov	r2, s15
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f3a:	e008      	b.n	8006f4e <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	609a      	str	r2, [r3, #8]
}
 8006f4e:	bf00      	nop
 8006f50:	3724      	adds	r7, #36	; 0x24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	58024400 	.word	0x58024400
 8006f60:	03d09000 	.word	0x03d09000
 8006f64:	46000000 	.word	0x46000000
 8006f68:	4c742400 	.word	0x4c742400
 8006f6c:	4a742400 	.word	0x4a742400
 8006f70:	4bbebc20 	.word	0x4bbebc20

08006f74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b089      	sub	sp, #36	; 0x24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f7c:	4b9d      	ldr	r3, [pc, #628]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006f86:	4b9b      	ldr	r3, [pc, #620]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8a:	091b      	lsrs	r3, r3, #4
 8006f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f90:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f92:	4b98      	ldr	r3, [pc, #608]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f9c:	4b95      	ldr	r3, [pc, #596]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa0:	08db      	lsrs	r3, r3, #3
 8006fa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	fb02 f303 	mul.w	r3, r2, r3
 8006fac:	ee07 3a90 	vmov	s15, r3
 8006fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 810a 	beq.w	80071d4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d05a      	beq.n	800707c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d302      	bcc.n	8006fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d078      	beq.n	80070c0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8006fce:	e099      	b.n	8007104 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fd0:	4b88      	ldr	r3, [pc, #544]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d02d      	beq.n	8007038 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fdc:	4b85      	ldr	r3, [pc, #532]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	08db      	lsrs	r3, r3, #3
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	4a84      	ldr	r2, [pc, #528]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fec:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	ee07 3a90 	vmov	s15, r3
 8006ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007006:	4b7b      	ldr	r3, [pc, #492]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007016:	ed97 6a03 	vldr	s12, [r7, #12]
 800701a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800701e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007032:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007036:	e087      	b.n	8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704a:	4b6a      	ldr	r3, [pc, #424]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705a:	ed97 6a03 	vldr	s12, [r7, #12]
 800705e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800706e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800707a:	e065      	b.n	8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007204 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800708a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708e:	4b59      	ldr	r3, [pc, #356]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709e:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80070a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070be:	e043      	b.n	8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d2:	4b48      	ldr	r3, [pc, #288]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80070ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007102:	e021      	b.n	8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007204 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b37      	ldr	r3, [pc, #220]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a03 	vldr	s12, [r7, #12]
 800712a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071fc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007146:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007148:	4b2a      	ldr	r3, [pc, #168]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	0a5b      	lsrs	r3, r3, #9
 800714e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800715e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007162:	edd7 6a07 	vldr	s13, [r7, #28]
 8007166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800716e:	ee17 2a90 	vmov	r2, s15
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007176:	4b1f      	ldr	r3, [pc, #124]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007180:	ee07 3a90 	vmov	s15, r3
 8007184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007188:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800718c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007190:	edd7 6a07 	vldr	s13, [r7, #28]
 8007194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800719c:	ee17 2a90 	vmov	r2, s15
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80071a4:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	0e1b      	lsrs	r3, r3, #24
 80071aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071be:	edd7 6a07 	vldr	s13, [r7, #28]
 80071c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ca:	ee17 2a90 	vmov	r2, s15
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80071d2:	e008      	b.n	80071e6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	609a      	str	r2, [r3, #8]
}
 80071e6:	bf00      	nop
 80071e8:	3724      	adds	r7, #36	; 0x24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	58024400 	.word	0x58024400
 80071f8:	03d09000 	.word	0x03d09000
 80071fc:	46000000 	.word	0x46000000
 8007200:	4c742400 	.word	0x4c742400
 8007204:	4a742400 	.word	0x4a742400
 8007208:	4bbebc20 	.word	0x4bbebc20

0800720c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007210:	f7fe f964 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8007214:	4601      	mov	r1, r0
 8007216:	4b08      	ldr	r3, [pc, #32]	; (8007238 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	f003 030f 	and.w	r3, r3, #15
 8007220:	4a06      	ldr	r2, [pc, #24]	; (800723c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007222:	5cd3      	ldrb	r3, [r2, r3]
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	fa21 f303 	lsr.w	r3, r1, r3
 800722c:	4a04      	ldr	r2, [pc, #16]	; (8007240 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800722e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007230:	4b03      	ldr	r3, [pc, #12]	; (8007240 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007232:	681b      	ldr	r3, [r3, #0]
}
 8007234:	4618      	mov	r0, r3
 8007236:	bd80      	pop	{r7, pc}
 8007238:	58024400 	.word	0x58024400
 800723c:	080083cc 	.word	0x080083cc
 8007240:	24040000 	.word	0x24040000

08007244 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007252:	4b53      	ldr	r3, [pc, #332]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	2b03      	cmp	r3, #3
 800725c:	d101      	bne.n	8007262 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e099      	b.n	8007396 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007262:	4b4f      	ldr	r3, [pc, #316]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a4e      	ldr	r2, [pc, #312]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007268:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800726c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800726e:	f7f9 fde5 	bl	8000e3c <HAL_GetTick>
 8007272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007274:	e008      	b.n	8007288 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007276:	f7f9 fde1 	bl	8000e3c <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d901      	bls.n	8007288 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e086      	b.n	8007396 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007288:	4b45      	ldr	r3, [pc, #276]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f0      	bne.n	8007276 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007294:	4b42      	ldr	r3, [pc, #264]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	031b      	lsls	r3, r3, #12
 80072a2:	493f      	ldr	r1, [pc, #252]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	628b      	str	r3, [r1, #40]	; 0x28
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	025b      	lsls	r3, r3, #9
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	041b      	lsls	r3, r3, #16
 80072c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	061b      	lsls	r3, r3, #24
 80072d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072d8:	4931      	ldr	r1, [pc, #196]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80072de:	4b30      	ldr	r3, [pc, #192]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	492d      	ldr	r1, [pc, #180]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072f0:	4b2b      	ldr	r3, [pc, #172]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	f023 0220 	bic.w	r2, r3, #32
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	4928      	ldr	r1, [pc, #160]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007302:	4b27      	ldr	r3, [pc, #156]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	4a26      	ldr	r2, [pc, #152]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007308:	f023 0310 	bic.w	r3, r3, #16
 800730c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800730e:	4b24      	ldr	r3, [pc, #144]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007312:	4b24      	ldr	r3, [pc, #144]	; (80073a4 <RCCEx_PLL2_Config+0x160>)
 8007314:	4013      	ands	r3, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	69d2      	ldr	r2, [r2, #28]
 800731a:	00d2      	lsls	r2, r2, #3
 800731c:	4920      	ldr	r1, [pc, #128]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800731e:	4313      	orrs	r3, r2
 8007320:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007322:	4b1f      	ldr	r3, [pc, #124]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	4a1e      	ldr	r2, [pc, #120]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007328:	f043 0310 	orr.w	r3, r3, #16
 800732c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d106      	bne.n	8007342 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007334:	4b1a      	ldr	r3, [pc, #104]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	4a19      	ldr	r2, [pc, #100]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800733a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800733e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007340:	e00f      	b.n	8007362 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d106      	bne.n	8007356 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007348:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	4a14      	ldr	r2, [pc, #80]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800734e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007352:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007354:	e005      	b.n	8007362 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007356:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	4a11      	ldr	r2, [pc, #68]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800735c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007360:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007362:	4b0f      	ldr	r3, [pc, #60]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a0e      	ldr	r2, [pc, #56]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 8007368:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800736c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800736e:	f7f9 fd65 	bl	8000e3c <HAL_GetTick>
 8007372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007374:	e008      	b.n	8007388 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007376:	f7f9 fd61 	bl	8000e3c <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e006      	b.n	8007396 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007388:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <RCCEx_PLL2_Config+0x15c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0f0      	beq.n	8007376 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	58024400 	.word	0x58024400
 80073a4:	ffff0007 	.word	0xffff0007

080073a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073b6:	4b53      	ldr	r3, [pc, #332]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d101      	bne.n	80073c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e099      	b.n	80074fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80073c6:	4b4f      	ldr	r3, [pc, #316]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a4e      	ldr	r2, [pc, #312]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80073cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073d2:	f7f9 fd33 	bl	8000e3c <HAL_GetTick>
 80073d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073d8:	e008      	b.n	80073ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80073da:	f7f9 fd2f 	bl	8000e3c <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e086      	b.n	80074fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073ec:	4b45      	ldr	r3, [pc, #276]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f0      	bne.n	80073da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073f8:	4b42      	ldr	r3, [pc, #264]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	051b      	lsls	r3, r3, #20
 8007406:	493f      	ldr	r1, [pc, #252]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007408:	4313      	orrs	r3, r2
 800740a:	628b      	str	r3, [r1, #40]	; 0x28
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	3b01      	subs	r3, #1
 8007412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	3b01      	subs	r3, #1
 800741c:	025b      	lsls	r3, r3, #9
 800741e:	b29b      	uxth	r3, r3
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	3b01      	subs	r3, #1
 8007428:	041b      	lsls	r3, r3, #16
 800742a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	3b01      	subs	r3, #1
 8007436:	061b      	lsls	r3, r3, #24
 8007438:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800743c:	4931      	ldr	r1, [pc, #196]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007442:	4b30      	ldr	r3, [pc, #192]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	492d      	ldr	r1, [pc, #180]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007450:	4313      	orrs	r3, r2
 8007452:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007454:	4b2b      	ldr	r3, [pc, #172]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	4928      	ldr	r1, [pc, #160]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007462:	4313      	orrs	r3, r2
 8007464:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007466:	4b27      	ldr	r3, [pc, #156]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	4a26      	ldr	r2, [pc, #152]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 800746c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007472:	4b24      	ldr	r3, [pc, #144]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007476:	4b24      	ldr	r3, [pc, #144]	; (8007508 <RCCEx_PLL3_Config+0x160>)
 8007478:	4013      	ands	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	69d2      	ldr	r2, [r2, #28]
 800747e:	00d2      	lsls	r2, r2, #3
 8007480:	4920      	ldr	r1, [pc, #128]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007482:	4313      	orrs	r3, r2
 8007484:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007486:	4b1f      	ldr	r3, [pc, #124]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	4a1e      	ldr	r2, [pc, #120]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 800748c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d106      	bne.n	80074a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007498:	4b1a      	ldr	r3, [pc, #104]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	4a19      	ldr	r2, [pc, #100]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 800749e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074a4:	e00f      	b.n	80074c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d106      	bne.n	80074ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074ac:	4b15      	ldr	r3, [pc, #84]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	4a14      	ldr	r2, [pc, #80]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80074b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074b8:	e005      	b.n	80074c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	4a11      	ldr	r2, [pc, #68]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a0e      	ldr	r2, [pc, #56]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d2:	f7f9 fcb3 	bl	8000e3c <HAL_GetTick>
 80074d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074d8:	e008      	b.n	80074ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80074da:	f7f9 fcaf 	bl	8000e3c <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e006      	b.n	80074fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <RCCEx_PLL3_Config+0x15c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f0      	beq.n	80074da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	58024400 	.word	0x58024400
 8007508:	ffff0007 	.word	0xffff0007

0800750c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e01d      	b.n	800755a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d106      	bne.n	8007538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7f9 fb60 	bl	8000bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3304      	adds	r3, #4
 8007548:	4619      	mov	r1, r3
 800754a:	4610      	mov	r0, r2
 800754c:	f000 fa7e 	bl	8007a4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e01d      	b.n	80075b0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d106      	bne.n	800758e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f815 	bl	80075b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2202      	movs	r2, #2
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3304      	adds	r3, #4
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f000 fa53 	bl	8007a4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2201      	movs	r2, #1
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fe3a 	bl	8008258 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1e      	ldr	r2, [pc, #120]	; (8007664 <HAL_TIM_PWM_Start+0x98>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d013      	beq.n	8007616 <HAL_TIM_PWM_Start+0x4a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <HAL_TIM_PWM_Start+0x9c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00e      	beq.n	8007616 <HAL_TIM_PWM_Start+0x4a>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1b      	ldr	r2, [pc, #108]	; (800766c <HAL_TIM_PWM_Start+0xa0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d009      	beq.n	8007616 <HAL_TIM_PWM_Start+0x4a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <HAL_TIM_PWM_Start+0xa4>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d004      	beq.n	8007616 <HAL_TIM_PWM_Start+0x4a>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a18      	ldr	r2, [pc, #96]	; (8007674 <HAL_TIM_PWM_Start+0xa8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d101      	bne.n	800761a <HAL_TIM_PWM_Start+0x4e>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <HAL_TIM_PWM_Start+0x50>
 800761a:	2300      	movs	r3, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d007      	beq.n	8007630 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800762e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <HAL_TIM_PWM_Start+0xac>)
 8007638:	4013      	ands	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b06      	cmp	r3, #6
 8007640:	d00b      	beq.n	800765a <HAL_TIM_PWM_Start+0x8e>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007648:	d007      	beq.n	800765a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0201 	orr.w	r2, r2, #1
 8007658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	40010000 	.word	0x40010000
 8007668:	40010400 	.word	0x40010400
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800
 8007678:	00010007 	.word	0x00010007

0800767c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800768e:	2b01      	cmp	r3, #1
 8007690:	d101      	bne.n	8007696 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007692:	2302      	movs	r3, #2
 8007694:	e105      	b.n	80078a2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b14      	cmp	r3, #20
 80076aa:	f200 80f0 	bhi.w	800788e <HAL_TIM_PWM_ConfigChannel+0x212>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	08007709 	.word	0x08007709
 80076b8:	0800788f 	.word	0x0800788f
 80076bc:	0800788f 	.word	0x0800788f
 80076c0:	0800788f 	.word	0x0800788f
 80076c4:	08007749 	.word	0x08007749
 80076c8:	0800788f 	.word	0x0800788f
 80076cc:	0800788f 	.word	0x0800788f
 80076d0:	0800788f 	.word	0x0800788f
 80076d4:	0800778b 	.word	0x0800778b
 80076d8:	0800788f 	.word	0x0800788f
 80076dc:	0800788f 	.word	0x0800788f
 80076e0:	0800788f 	.word	0x0800788f
 80076e4:	080077cb 	.word	0x080077cb
 80076e8:	0800788f 	.word	0x0800788f
 80076ec:	0800788f 	.word	0x0800788f
 80076f0:	0800788f 	.word	0x0800788f
 80076f4:	0800780d 	.word	0x0800780d
 80076f8:	0800788f 	.word	0x0800788f
 80076fc:	0800788f 	.word	0x0800788f
 8007700:	0800788f 	.word	0x0800788f
 8007704:	0800784d 	.word	0x0800784d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68b9      	ldr	r1, [r7, #8]
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fa36 	bl	8007b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0208 	orr.w	r2, r2, #8
 8007722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699a      	ldr	r2, [r3, #24]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0204 	bic.w	r2, r2, #4
 8007732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6999      	ldr	r1, [r3, #24]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	619a      	str	r2, [r3, #24]
      break;
 8007746:	e0a3      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	4618      	mov	r0, r3
 8007750:	f000 faa6 	bl	8007ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699a      	ldr	r2, [r3, #24]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699a      	ldr	r2, [r3, #24]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6999      	ldr	r1, [r3, #24]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	021a      	lsls	r2, r3, #8
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	619a      	str	r2, [r3, #24]
      break;
 8007788:	e082      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fb0f 	bl	8007db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69da      	ldr	r2, [r3, #28]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0208 	orr.w	r2, r2, #8
 80077a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69da      	ldr	r2, [r3, #28]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f022 0204 	bic.w	r2, r2, #4
 80077b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69d9      	ldr	r1, [r3, #28]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	61da      	str	r2, [r3, #28]
      break;
 80077c8:	e062      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fb75 	bl	8007ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69da      	ldr	r2, [r3, #28]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	69da      	ldr	r2, [r3, #28]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69d9      	ldr	r1, [r3, #28]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	021a      	lsls	r2, r3, #8
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	61da      	str	r2, [r3, #28]
      break;
 800780a:	e041      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fbbc 	bl	8007f90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0208 	orr.w	r2, r2, #8
 8007826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0204 	bic.w	r2, r2, #4
 8007836:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	691a      	ldr	r2, [r3, #16]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800784a:	e021      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68b9      	ldr	r1, [r7, #8]
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fbfe 	bl	8008054 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007866:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007876:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	021a      	lsls	r2, r3, #8
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800788c:	e000      	b.n	8007890 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800788e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop

080078ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_TIM_ConfigClockSource+0x18>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e0b7      	b.n	8007a34 <HAL_TIM_ConfigClockSource+0x188>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4b57      	ldr	r3, [pc, #348]	; (8007a3c <HAL_TIM_ConfigClockSource+0x190>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b70      	cmp	r3, #112	; 0x70
 80078fa:	d02e      	beq.n	800795a <HAL_TIM_ConfigClockSource+0xae>
 80078fc:	2b70      	cmp	r3, #112	; 0x70
 80078fe:	d812      	bhi.n	8007926 <HAL_TIM_ConfigClockSource+0x7a>
 8007900:	2b30      	cmp	r3, #48	; 0x30
 8007902:	f000 8084 	beq.w	8007a0e <HAL_TIM_ConfigClockSource+0x162>
 8007906:	2b30      	cmp	r3, #48	; 0x30
 8007908:	d806      	bhi.n	8007918 <HAL_TIM_ConfigClockSource+0x6c>
 800790a:	2b10      	cmp	r3, #16
 800790c:	d07f      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x162>
 800790e:	2b20      	cmp	r3, #32
 8007910:	d07d      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x162>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d07b      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007916:	e084      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007918:	2b50      	cmp	r3, #80	; 0x50
 800791a:	d048      	beq.n	80079ae <HAL_TIM_ConfigClockSource+0x102>
 800791c:	2b60      	cmp	r3, #96	; 0x60
 800791e:	d056      	beq.n	80079ce <HAL_TIM_ConfigClockSource+0x122>
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d064      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0x142>
      break;
 8007924:	e07d      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007926:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800792a:	d070      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x162>
 800792c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007930:	d809      	bhi.n	8007946 <HAL_TIM_ConfigClockSource+0x9a>
 8007932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007936:	d027      	beq.n	8007988 <HAL_TIM_ConfigClockSource+0xdc>
 8007938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793c:	d067      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x162>
 800793e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007942:	d06d      	beq.n	8007a20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007944:	e06d      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007946:	4a3e      	ldr	r2, [pc, #248]	; (8007a40 <HAL_TIM_ConfigClockSource+0x194>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d060      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x162>
 800794c:	4a3d      	ldr	r2, [pc, #244]	; (8007a44 <HAL_TIM_ConfigClockSource+0x198>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d05d      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x162>
 8007952:	4a3d      	ldr	r2, [pc, #244]	; (8007a48 <HAL_TIM_ConfigClockSource+0x19c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d05a      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x162>
      break;
 8007958:	e063      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6899      	ldr	r1, [r3, #8]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f000 fc55 	bl	8008218 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800797c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	609a      	str	r2, [r3, #8]
      break;
 8007986:	e04c      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6818      	ldr	r0, [r3, #0]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	6899      	ldr	r1, [r3, #8]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f000 fc3e 	bl	8008218 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079aa:	609a      	str	r2, [r3, #8]
      break;
 80079ac:	e039      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6859      	ldr	r1, [r3, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	461a      	mov	r2, r3
 80079bc:	f000 fbae 	bl	800811c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2150      	movs	r1, #80	; 0x50
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fc08 	bl	80081dc <TIM_ITRx_SetConfig>
      break;
 80079cc:	e029      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	6859      	ldr	r1, [r3, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	461a      	mov	r2, r3
 80079dc:	f000 fbcd 	bl	800817a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2160      	movs	r1, #96	; 0x60
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fbf8 	bl	80081dc <TIM_ITRx_SetConfig>
      break;
 80079ec:	e019      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6859      	ldr	r1, [r3, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f000 fb8e 	bl	800811c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2140      	movs	r1, #64	; 0x40
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fbe8 	bl	80081dc <TIM_ITRx_SetConfig>
      break;
 8007a0c:	e009      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f000 fbdf 	bl	80081dc <TIM_ITRx_SetConfig>
      break;
 8007a1e:	e000      	b.n	8007a22 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007a20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	ffceff88 	.word	0xffceff88
 8007a40:	00100030 	.word	0x00100030
 8007a44:	00100040 	.word	0x00100040
 8007a48:	00100020 	.word	0x00100020

08007a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a40      	ldr	r2, [pc, #256]	; (8007b60 <TIM_Base_SetConfig+0x114>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6a:	d00f      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a3d      	ldr	r2, [pc, #244]	; (8007b64 <TIM_Base_SetConfig+0x118>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a3c      	ldr	r2, [pc, #240]	; (8007b68 <TIM_Base_SetConfig+0x11c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d007      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a3b      	ldr	r2, [pc, #236]	; (8007b6c <TIM_Base_SetConfig+0x120>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a3a      	ldr	r2, [pc, #232]	; (8007b70 <TIM_Base_SetConfig+0x124>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d108      	bne.n	8007a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2f      	ldr	r2, [pc, #188]	; (8007b60 <TIM_Base_SetConfig+0x114>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01f      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aac:	d01b      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a2c      	ldr	r2, [pc, #176]	; (8007b64 <TIM_Base_SetConfig+0x118>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d017      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a2b      	ldr	r2, [pc, #172]	; (8007b68 <TIM_Base_SetConfig+0x11c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d013      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a2a      	ldr	r2, [pc, #168]	; (8007b6c <TIM_Base_SetConfig+0x120>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00f      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a29      	ldr	r2, [pc, #164]	; (8007b70 <TIM_Base_SetConfig+0x124>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00b      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a28      	ldr	r2, [pc, #160]	; (8007b74 <TIM_Base_SetConfig+0x128>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d007      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a27      	ldr	r2, [pc, #156]	; (8007b78 <TIM_Base_SetConfig+0x12c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d003      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a26      	ldr	r2, [pc, #152]	; (8007b7c <TIM_Base_SetConfig+0x130>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d108      	bne.n	8007af8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a10      	ldr	r2, [pc, #64]	; (8007b60 <TIM_Base_SetConfig+0x114>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00f      	beq.n	8007b44 <TIM_Base_SetConfig+0xf8>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a12      	ldr	r2, [pc, #72]	; (8007b70 <TIM_Base_SetConfig+0x124>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d00b      	beq.n	8007b44 <TIM_Base_SetConfig+0xf8>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a11      	ldr	r2, [pc, #68]	; (8007b74 <TIM_Base_SetConfig+0x128>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d007      	beq.n	8007b44 <TIM_Base_SetConfig+0xf8>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a10      	ldr	r2, [pc, #64]	; (8007b78 <TIM_Base_SetConfig+0x12c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d003      	beq.n	8007b44 <TIM_Base_SetConfig+0xf8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a0f      	ldr	r2, [pc, #60]	; (8007b7c <TIM_Base_SetConfig+0x130>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d103      	bne.n	8007b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	615a      	str	r2, [r3, #20]
}
 8007b52:	bf00      	nop
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40010000 	.word	0x40010000
 8007b64:	40000400 	.word	0x40000400
 8007b68:	40000800 	.word	0x40000800
 8007b6c:	40000c00 	.word	0x40000c00
 8007b70:	40010400 	.word	0x40010400
 8007b74:	40014000 	.word	0x40014000
 8007b78:	40014400 	.word	0x40014400
 8007b7c:	40014800 	.word	0x40014800

08007b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	f023 0201 	bic.w	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <TIM_OC1_SetConfig+0x108>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 0303 	bic.w	r3, r3, #3
 8007bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f023 0302 	bic.w	r3, r3, #2
 8007bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a2d      	ldr	r2, [pc, #180]	; (8007c8c <TIM_OC1_SetConfig+0x10c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00f      	beq.n	8007bfc <TIM_OC1_SetConfig+0x7c>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a2c      	ldr	r2, [pc, #176]	; (8007c90 <TIM_OC1_SetConfig+0x110>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00b      	beq.n	8007bfc <TIM_OC1_SetConfig+0x7c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a2b      	ldr	r2, [pc, #172]	; (8007c94 <TIM_OC1_SetConfig+0x114>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d007      	beq.n	8007bfc <TIM_OC1_SetConfig+0x7c>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a2a      	ldr	r2, [pc, #168]	; (8007c98 <TIM_OC1_SetConfig+0x118>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d003      	beq.n	8007bfc <TIM_OC1_SetConfig+0x7c>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a29      	ldr	r2, [pc, #164]	; (8007c9c <TIM_OC1_SetConfig+0x11c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d10c      	bne.n	8007c16 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f023 0308 	bic.w	r3, r3, #8
 8007c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f023 0304 	bic.w	r3, r3, #4
 8007c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1c      	ldr	r2, [pc, #112]	; (8007c8c <TIM_OC1_SetConfig+0x10c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00f      	beq.n	8007c3e <TIM_OC1_SetConfig+0xbe>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a1b      	ldr	r2, [pc, #108]	; (8007c90 <TIM_OC1_SetConfig+0x110>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00b      	beq.n	8007c3e <TIM_OC1_SetConfig+0xbe>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a1a      	ldr	r2, [pc, #104]	; (8007c94 <TIM_OC1_SetConfig+0x114>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d007      	beq.n	8007c3e <TIM_OC1_SetConfig+0xbe>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a19      	ldr	r2, [pc, #100]	; (8007c98 <TIM_OC1_SetConfig+0x118>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d003      	beq.n	8007c3e <TIM_OC1_SetConfig+0xbe>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a18      	ldr	r2, [pc, #96]	; (8007c9c <TIM_OC1_SetConfig+0x11c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d111      	bne.n	8007c62 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	621a      	str	r2, [r3, #32]
}
 8007c7c:	bf00      	nop
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	fffeff8f 	.word	0xfffeff8f
 8007c8c:	40010000 	.word	0x40010000
 8007c90:	40010400 	.word	0x40010400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40014400 	.word	0x40014400
 8007c9c:	40014800 	.word	0x40014800

08007ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f023 0210 	bic.w	r2, r3, #16
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4b34      	ldr	r3, [pc, #208]	; (8007d9c <TIM_OC2_SetConfig+0xfc>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f023 0320 	bic.w	r3, r3, #32
 8007cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a29      	ldr	r2, [pc, #164]	; (8007da0 <TIM_OC2_SetConfig+0x100>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <TIM_OC2_SetConfig+0x68>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a28      	ldr	r2, [pc, #160]	; (8007da4 <TIM_OC2_SetConfig+0x104>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d10d      	bne.n	8007d24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	011b      	lsls	r3, r3, #4
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a1e      	ldr	r2, [pc, #120]	; (8007da0 <TIM_OC2_SetConfig+0x100>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00f      	beq.n	8007d4c <TIM_OC2_SetConfig+0xac>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a1d      	ldr	r2, [pc, #116]	; (8007da4 <TIM_OC2_SetConfig+0x104>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00b      	beq.n	8007d4c <TIM_OC2_SetConfig+0xac>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a1c      	ldr	r2, [pc, #112]	; (8007da8 <TIM_OC2_SetConfig+0x108>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d007      	beq.n	8007d4c <TIM_OC2_SetConfig+0xac>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a1b      	ldr	r2, [pc, #108]	; (8007dac <TIM_OC2_SetConfig+0x10c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_OC2_SetConfig+0xac>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a1a      	ldr	r2, [pc, #104]	; (8007db0 <TIM_OC2_SetConfig+0x110>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d113      	bne.n	8007d74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	621a      	str	r2, [r3, #32]
}
 8007d8e:	bf00      	nop
 8007d90:	371c      	adds	r7, #28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	feff8fff 	.word	0xfeff8fff
 8007da0:	40010000 	.word	0x40010000
 8007da4:	40010400 	.word	0x40010400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40014400 	.word	0x40014400
 8007db0:	40014800 	.word	0x40014800

08007db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a27      	ldr	r2, [pc, #156]	; (8007eac <TIM_OC3_SetConfig+0xf8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d003      	beq.n	8007e1a <TIM_OC3_SetConfig+0x66>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a26      	ldr	r2, [pc, #152]	; (8007eb0 <TIM_OC3_SetConfig+0xfc>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d10d      	bne.n	8007e36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	021b      	lsls	r3, r3, #8
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a1c      	ldr	r2, [pc, #112]	; (8007eac <TIM_OC3_SetConfig+0xf8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00f      	beq.n	8007e5e <TIM_OC3_SetConfig+0xaa>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1b      	ldr	r2, [pc, #108]	; (8007eb0 <TIM_OC3_SetConfig+0xfc>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00b      	beq.n	8007e5e <TIM_OC3_SetConfig+0xaa>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <TIM_OC3_SetConfig+0x100>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d007      	beq.n	8007e5e <TIM_OC3_SetConfig+0xaa>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a19      	ldr	r2, [pc, #100]	; (8007eb8 <TIM_OC3_SetConfig+0x104>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d003      	beq.n	8007e5e <TIM_OC3_SetConfig+0xaa>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a18      	ldr	r2, [pc, #96]	; (8007ebc <TIM_OC3_SetConfig+0x108>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d113      	bne.n	8007e86 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	621a      	str	r2, [r3, #32]
}
 8007ea0:	bf00      	nop
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	40010000 	.word	0x40010000
 8007eb0:	40010400 	.word	0x40010400
 8007eb4:	40014000 	.word	0x40014000
 8007eb8:	40014400 	.word	0x40014400
 8007ebc:	40014800 	.word	0x40014800

08007ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	031b      	lsls	r3, r3, #12
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <TIM_OC4_SetConfig+0xbc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00f      	beq.n	8007f40 <TIM_OC4_SetConfig+0x80>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a17      	ldr	r2, [pc, #92]	; (8007f80 <TIM_OC4_SetConfig+0xc0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <TIM_OC4_SetConfig+0x80>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a16      	ldr	r2, [pc, #88]	; (8007f84 <TIM_OC4_SetConfig+0xc4>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d007      	beq.n	8007f40 <TIM_OC4_SetConfig+0x80>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <TIM_OC4_SetConfig+0xc8>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_OC4_SetConfig+0x80>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a14      	ldr	r2, [pc, #80]	; (8007f8c <TIM_OC4_SetConfig+0xcc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d109      	bne.n	8007f54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	019b      	lsls	r3, r3, #6
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40010000 	.word	0x40010000
 8007f80:	40010400 	.word	0x40010400
 8007f84:	40014000 	.word	0x40014000
 8007f88:	40014400 	.word	0x40014400
 8007f8c:	40014800 	.word	0x40014800

08007f90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a17      	ldr	r2, [pc, #92]	; (8008040 <TIM_OC5_SetConfig+0xb0>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00f      	beq.n	8008006 <TIM_OC5_SetConfig+0x76>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a16      	ldr	r2, [pc, #88]	; (8008044 <TIM_OC5_SetConfig+0xb4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d00b      	beq.n	8008006 <TIM_OC5_SetConfig+0x76>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a15      	ldr	r2, [pc, #84]	; (8008048 <TIM_OC5_SetConfig+0xb8>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d007      	beq.n	8008006 <TIM_OC5_SetConfig+0x76>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a14      	ldr	r2, [pc, #80]	; (800804c <TIM_OC5_SetConfig+0xbc>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d003      	beq.n	8008006 <TIM_OC5_SetConfig+0x76>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a13      	ldr	r2, [pc, #76]	; (8008050 <TIM_OC5_SetConfig+0xc0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d109      	bne.n	800801a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800800c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	4313      	orrs	r3, r2
 8008018:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	621a      	str	r2, [r3, #32]
}
 8008034:	bf00      	nop
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	40010000 	.word	0x40010000
 8008044:	40010400 	.word	0x40010400
 8008048:	40014000 	.word	0x40014000
 800804c:	40014400 	.word	0x40014400
 8008050:	40014800 	.word	0x40014800

08008054 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	021b      	lsls	r3, r3, #8
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	051b      	lsls	r3, r3, #20
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a18      	ldr	r2, [pc, #96]	; (8008108 <TIM_OC6_SetConfig+0xb4>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d00f      	beq.n	80080cc <TIM_OC6_SetConfig+0x78>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a17      	ldr	r2, [pc, #92]	; (800810c <TIM_OC6_SetConfig+0xb8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00b      	beq.n	80080cc <TIM_OC6_SetConfig+0x78>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a16      	ldr	r2, [pc, #88]	; (8008110 <TIM_OC6_SetConfig+0xbc>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d007      	beq.n	80080cc <TIM_OC6_SetConfig+0x78>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a15      	ldr	r2, [pc, #84]	; (8008114 <TIM_OC6_SetConfig+0xc0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d003      	beq.n	80080cc <TIM_OC6_SetConfig+0x78>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a14      	ldr	r2, [pc, #80]	; (8008118 <TIM_OC6_SetConfig+0xc4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d109      	bne.n	80080e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80080d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	029b      	lsls	r3, r3, #10
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	621a      	str	r2, [r3, #32]
}
 80080fa:	bf00      	nop
 80080fc:	371c      	adds	r7, #28
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	40010000 	.word	0x40010000
 800810c:	40010400 	.word	0x40010400
 8008110:	40014000 	.word	0x40014000
 8008114:	40014400 	.word	0x40014400
 8008118:	40014800 	.word	0x40014800

0800811c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	f023 0201 	bic.w	r2, r3, #1
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4313      	orrs	r3, r2
 8008150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f023 030a 	bic.w	r3, r3, #10
 8008158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	4313      	orrs	r3, r2
 8008160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	621a      	str	r2, [r3, #32]
}
 800816e:	bf00      	nop
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800817a:	b480      	push	{r7}
 800817c:	b087      	sub	sp, #28
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	f023 0210 	bic.w	r2, r3, #16
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	031b      	lsls	r3, r3, #12
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	621a      	str	r2, [r3, #32]
}
 80081ce:	bf00      	nop
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
	...

080081dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4b09      	ldr	r3, [pc, #36]	; (8008214 <TIM_ITRx_SetConfig+0x38>)
 80081f0:	4013      	ands	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f043 0307 	orr.w	r3, r3, #7
 80081fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	609a      	str	r2, [r3, #8]
}
 8008206:	bf00      	nop
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	ffcfff8f 	.word	0xffcfff8f

08008218 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008232:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	021a      	lsls	r2, r3, #8
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	431a      	orrs	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4313      	orrs	r3, r2
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	609a      	str	r2, [r3, #8]
}
 800824c:	bf00      	nop
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f003 031f 	and.w	r3, r3, #31
 800826a:	2201      	movs	r2, #1
 800826c:	fa02 f303 	lsl.w	r3, r2, r3
 8008270:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6a1a      	ldr	r2, [r3, #32]
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	43db      	mvns	r3, r3
 800827a:	401a      	ands	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a1a      	ldr	r2, [r3, #32]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	fa01 f303 	lsl.w	r3, r1, r3
 8008290:	431a      	orrs	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	621a      	str	r2, [r3, #32]
}
 8008296:	bf00      	nop
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
	...

080082a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d101      	bne.n	80082bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e045      	b.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1c      	ldr	r2, [pc, #112]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d004      	beq.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1b      	ldr	r2, [pc, #108]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d108      	bne.n	8008302 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008308:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	4313      	orrs	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800831a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	4313      	orrs	r3, r2
 8008324:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	40010000 	.word	0x40010000
 8008358:	40010400 	.word	0x40010400

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	4e0d      	ldr	r6, [pc, #52]	; (8008394 <__libc_init_array+0x38>)
 8008360:	4c0d      	ldr	r4, [pc, #52]	; (8008398 <__libc_init_array+0x3c>)
 8008362:	1ba4      	subs	r4, r4, r6
 8008364:	10a4      	asrs	r4, r4, #2
 8008366:	2500      	movs	r5, #0
 8008368:	42a5      	cmp	r5, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	4e0b      	ldr	r6, [pc, #44]	; (800839c <__libc_init_array+0x40>)
 800836e:	4c0c      	ldr	r4, [pc, #48]	; (80083a0 <__libc_init_array+0x44>)
 8008370:	f000 f820 	bl	80083b4 <_init>
 8008374:	1ba4      	subs	r4, r4, r6
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	2500      	movs	r5, #0
 800837a:	42a5      	cmp	r5, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008384:	4798      	blx	r3
 8008386:	3501      	adds	r5, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800838e:	4798      	blx	r3
 8008390:	3501      	adds	r5, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	080083e4 	.word	0x080083e4
 8008398:	080083e4 	.word	0x080083e4
 800839c:	080083e4 	.word	0x080083e4
 80083a0:	080083e8 	.word	0x080083e8

080083a4 <memset>:
 80083a4:	4402      	add	r2, r0
 80083a6:	4603      	mov	r3, r0
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d100      	bne.n	80083ae <memset+0xa>
 80083ac:	4770      	bx	lr
 80083ae:	f803 1b01 	strb.w	r1, [r3], #1
 80083b2:	e7f9      	b.n	80083a8 <memset+0x4>

080083b4 <_init>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	bf00      	nop
 80083b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ba:	bc08      	pop	{r3}
 80083bc:	469e      	mov	lr, r3
 80083be:	4770      	bx	lr

080083c0 <_fini>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	bf00      	nop
 80083c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c6:	bc08      	pop	{r3}
 80083c8:	469e      	mov	lr, r3
 80083ca:	4770      	bx	lr
