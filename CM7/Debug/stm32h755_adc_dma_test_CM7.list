
stm32h755_adc_dma_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008370  08008370  00018370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008388  08008388  00018388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800838c  0800838c  0001838c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  24040000  08008390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  2404001c  080083ac  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24040158  080083ac  00020158  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f90d  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003354  00000000  00000000  0003f957  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001270  00000000  00000000  00042cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001128  00000000  00000000  00043f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b285  00000000  00000000  00045048  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010f38  00000000  00000000  000802cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018d0f7  00000000  00000000  00091205  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0021e2fc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004d70  00000000  00000000  0021e378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2404001c 	.word	0x2404001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008358 	.word	0x08008358

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24040020 	.word	0x24040020
 80002d4:	08008358 	.word	0x08008358

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b2f      	ldr	r3, [pc, #188]	; (800039c <SystemInit+0xc4>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a2e      	ldr	r2, [pc, #184]	; (800039c <SystemInit+0xc4>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80002ec:	4b2b      	ldr	r3, [pc, #172]	; (800039c <SystemInit+0xc4>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a2a      	ldr	r2, [pc, #168]	; (800039c <SystemInit+0xc4>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80002f8:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <SystemInit+0xc8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a28      	ldr	r2, [pc, #160]	; (80003a0 <SystemInit+0xc8>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000304:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <SystemInit+0xc8>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <SystemInit+0xc8>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	4924      	ldr	r1, [pc, #144]	; (80003a0 <SystemInit+0xc8>)
 8000310:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <SystemInit+0xcc>)
 8000312:	4013      	ands	r3, r2
 8000314:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000316:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <SystemInit+0xc8>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <SystemInit+0xc8>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <SystemInit+0xc8>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <SystemInit+0xc8>)
 800032a:	2200      	movs	r2, #0
 800032c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800032e:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <SystemInit+0xc8>)
 8000330:	2200      	movs	r2, #0
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
 8000336:	2200      	movs	r2, #0
 8000338:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <SystemInit+0xc8>)
 800033c:	2200      	movs	r2, #0
 800033e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <SystemInit+0xc8>)
 8000342:	2200      	movs	r2, #0
 8000344:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <SystemInit+0xc8>)
 8000348:	2200      	movs	r2, #0
 800034a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <SystemInit+0xc8>)
 800034e:	2200      	movs	r2, #0
 8000350:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <SystemInit+0xc8>)
 8000354:	2200      	movs	r2, #0
 8000356:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <SystemInit+0xc8>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <SystemInit+0xc8>)
 800035e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000362:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemInit+0xc8>)
 8000366:	2200      	movs	r2, #0
 8000368:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <SystemInit+0xd0>)
 800036c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <SystemInit+0xd0>)
 8000370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000374:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <SystemInit+0xd4>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <SystemInit+0xd8>)
 800037c:	4013      	ands	r3, r2
 800037e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000382:	d202      	bcs.n	800038a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <SystemInit+0xdc>)
 8000386:	2201      	movs	r2, #1
 8000388:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SystemInit+0xc4>)
 800038c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000390:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00
 80003a0:	58024400 	.word	0x58024400
 80003a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a8:	580000c0 	.word	0x580000c0
 80003ac:	5c001000 	.word	0x5c001000
 80003b0:	ffff0000 	.word	0xffff0000
 80003b4:	51008108 	.word	0x51008108

080003b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80003be:	f107 031c 	add.w	r3, r7, #28
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ca:	463b      	mov	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]
 80003da:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80003dc:	4b4b      	ldr	r3, [pc, #300]	; (800050c <MX_ADC1_Init+0x154>)
 80003de:	4a4c      	ldr	r2, [pc, #304]	; (8000510 <MX_ADC1_Init+0x158>)
 80003e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003e2:	4b4a      	ldr	r3, [pc, #296]	; (800050c <MX_ADC1_Init+0x154>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003e8:	4b48      	ldr	r3, [pc, #288]	; (800050c <MX_ADC1_Init+0x154>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003ee:	4b47      	ldr	r3, [pc, #284]	; (800050c <MX_ADC1_Init+0x154>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80003f4:	4b45      	ldr	r3, [pc, #276]	; (800050c <MX_ADC1_Init+0x154>)
 80003f6:	2208      	movs	r2, #8
 80003f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003fa:	4b44      	ldr	r3, [pc, #272]	; (800050c <MX_ADC1_Init+0x154>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000400:	4b42      	ldr	r3, [pc, #264]	; (800050c <MX_ADC1_Init+0x154>)
 8000402:	2200      	movs	r2, #0
 8000404:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 5;
 8000406:	4b41      	ldr	r3, [pc, #260]	; (800050c <MX_ADC1_Init+0x154>)
 8000408:	2205      	movs	r2, #5
 800040a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800040c:	4b3f      	ldr	r3, [pc, #252]	; (800050c <MX_ADC1_Init+0x154>)
 800040e:	2200      	movs	r2, #0
 8000410:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000412:	4b3e      	ldr	r3, [pc, #248]	; (800050c <MX_ADC1_Init+0x154>)
 8000414:	2200      	movs	r2, #0
 8000416:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000418:	4b3c      	ldr	r3, [pc, #240]	; (800050c <MX_ADC1_Init+0x154>)
 800041a:	2200      	movs	r2, #0
 800041c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800041e:	4b3b      	ldr	r3, [pc, #236]	; (800050c <MX_ADC1_Init+0x154>)
 8000420:	2203      	movs	r2, #3
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000424:	4b39      	ldr	r3, [pc, #228]	; (800050c <MX_ADC1_Init+0x154>)
 8000426:	2200      	movs	r2, #0
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800042a:	4b38      	ldr	r3, [pc, #224]	; (800050c <MX_ADC1_Init+0x154>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000430:	4b36      	ldr	r3, [pc, #216]	; (800050c <MX_ADC1_Init+0x154>)
 8000432:	2200      	movs	r2, #0
 8000434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000438:	4834      	ldr	r0, [pc, #208]	; (800050c <MX_ADC1_Init+0x154>)
 800043a:	f000 fef9 	bl	8001230 <HAL_ADC_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000444:	f000 fad8 	bl	80009f8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	4619      	mov	r1, r3
 8000452:	482e      	ldr	r0, [pc, #184]	; (800050c <MX_ADC1_Init+0x154>)
 8000454:	f001 ff9e 	bl	8002394 <HAL_ADCEx_MultiModeConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800045e:	f000 facb 	bl	80009f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000462:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <MX_ADC1_Init+0x15c>)
 8000464:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000466:	2306      	movs	r3, #6
 8000468:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800046a:	2300      	movs	r3, #0
 800046c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000472:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000474:	2304      	movs	r3, #4
 8000476:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047c:	463b      	mov	r3, r7
 800047e:	4619      	mov	r1, r3
 8000480:	4822      	ldr	r0, [pc, #136]	; (800050c <MX_ADC1_Init+0x154>)
 8000482:	f001 f945 	bl	8001710 <HAL_ADC_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800048c:	f000 fab4 	bl	80009f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <MX_ADC1_Init+0x160>)
 8000492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000494:	230c      	movs	r3, #12
 8000496:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	481b      	ldr	r0, [pc, #108]	; (800050c <MX_ADC1_Init+0x154>)
 800049e:	f001 f937 	bl	8001710 <HAL_ADC_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80004a8:	f000 faa6 	bl	80009f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_ADC1_Init+0x164>)
 80004ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004b0:	2312      	movs	r3, #18
 80004b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b4:	463b      	mov	r3, r7
 80004b6:	4619      	mov	r1, r3
 80004b8:	4814      	ldr	r0, [pc, #80]	; (800050c <MX_ADC1_Init+0x154>)
 80004ba:	f001 f929 	bl	8001710 <HAL_ADC_ConfigChannel>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80004c4:	f000 fa98 	bl	80009f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <MX_ADC1_Init+0x168>)
 80004ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004cc:	2318      	movs	r3, #24
 80004ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d0:	463b      	mov	r3, r7
 80004d2:	4619      	mov	r1, r3
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <MX_ADC1_Init+0x154>)
 80004d6:	f001 f91b 	bl	8001710 <HAL_ADC_ConfigChannel>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80004e0:	f000 fa8a 	bl	80009f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_ADC1_Init+0x16c>)
 80004e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80004e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ee:	463b      	mov	r3, r7
 80004f0:	4619      	mov	r1, r3
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <MX_ADC1_Init+0x154>)
 80004f4:	f001 f90c 	bl	8001710 <HAL_ADC_ConfigChannel>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 80004fe:	f000 fa7b 	bl	80009f8 <Error_Handler>
  }

}
 8000502:	bf00      	nop
 8000504:	3728      	adds	r7, #40	; 0x28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	24040038 	.word	0x24040038
 8000510:	40022000 	.word	0x40022000
 8000514:	1d500080 	.word	0x1d500080
 8000518:	21800100 	.word	0x21800100
 800051c:	2e300800 	.word	0x2e300800
 8000520:	3ac04000 	.word	0x3ac04000
 8000524:	3ef08000 	.word	0x3ef08000

08000528 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	; 0x28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a3d      	ldr	r2, [pc, #244]	; (800063c <HAL_ADC_MspInit+0x114>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d174      	bne.n	8000634 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800054a:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <HAL_ADC_MspInit+0x118>)
 800054c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000550:	4a3b      	ldr	r2, [pc, #236]	; (8000640 <HAL_ADC_MspInit+0x118>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800055a:	4b39      	ldr	r3, [pc, #228]	; (8000640 <HAL_ADC_MspInit+0x118>)
 800055c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000560:	f003 0320 	and.w	r3, r3, #32
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000568:	4b35      	ldr	r3, [pc, #212]	; (8000640 <HAL_ADC_MspInit+0x118>)
 800056a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056e:	4a34      	ldr	r2, [pc, #208]	; (8000640 <HAL_ADC_MspInit+0x118>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000578:	4b31      	ldr	r3, [pc, #196]	; (8000640 <HAL_ADC_MspInit+0x118>)
 800057a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <HAL_ADC_MspInit+0x118>)
 8000588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800058c:	4a2c      	ldr	r2, [pc, #176]	; (8000640 <HAL_ADC_MspInit+0x118>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <HAL_ADC_MspInit+0x118>)
 8000598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    PA7     ------> ADC1_INP7
    PC5     ------> ADC1_INP8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80005a4:	2322      	movs	r3, #34	; 0x22
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a8:	2303      	movs	r3, #3
 80005aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	4823      	ldr	r0, [pc, #140]	; (8000644 <HAL_ADC_MspInit+0x11c>)
 80005b8:	f003 ff9c 	bl	80044f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 80005bc:	238c      	movs	r3, #140	; 0x8c
 80005be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c0:	2303      	movs	r3, #3
 80005c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	481e      	ldr	r0, [pc, #120]	; (8000648 <HAL_ADC_MspInit+0x120>)
 80005d0:	f003 ff90 	bl	80044f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <HAL_ADC_MspInit+0x128>)
 80005d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005dc:	2209      	movs	r2, #9
 80005de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <HAL_ADC_MspInit+0x124>)
 80005fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000602:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_ADC_MspInit+0x124>)
 8000606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_ADC_MspInit+0x124>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_ADC_MspInit+0x124>)
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <HAL_ADC_MspInit+0x124>)
 800061a:	f002 f8b9 	bl	8002790 <HAL_DMA_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8000624:	f000 f9e8 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_ADC_MspInit+0x124>)
 800062c:	64da      	str	r2, [r3, #76]	; 0x4c
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_ADC_MspInit+0x124>)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40022000 	.word	0x40022000
 8000640:	58024400 	.word	0x58024400
 8000644:	58020800 	.word	0x58020800
 8000648:	58020000 	.word	0x58020000
 800064c:	2404009c 	.word	0x2404009c
 8000650:	40020010 	.word	0x40020010

08000654 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <MX_DMA_Init+0x3c>)
 800065c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000660:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <MX_DMA_Init+0x3c>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_DMA_Init+0x3c>)
 800066c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	200b      	movs	r0, #11
 800067e:	f002 f83e 	bl	80026fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000682:	200b      	movs	r0, #11
 8000684:	f002 f855 	bl	8002732 <HAL_NVIC_EnableIRQ>

}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	58024400 	.word	0x58024400

08000694 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ce:	4a19      	ldr	r2, [pc, #100]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006ee:	f043 0302 	orr.w	r3, r3, #2
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fc:	f003 0302 	and.w	r3, r3, #2
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2101      	movs	r1, #1
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <MX_GPIO_Init+0xa4>)
 800070a:	f004 f8a3 	bl	8004854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800070e:	2301      	movs	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	4619      	mov	r1, r3
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_GPIO_Init+0xa4>)
 8000726:	f003 fee5 	bl	80044f4 <HAL_GPIO_Init>

}
 800072a:	bf00      	nop
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58024400 	.word	0x58024400
 8000738:	58020400 	.word	0x58020400

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000746:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000748:	bf00      	nop
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <main+0xd4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x24>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	1e5a      	subs	r2, r3, #1
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	dcf4      	bgt.n	800074a <main+0xe>
  if ( timeout < 0 )
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	da01      	bge.n	800076a <main+0x2e>
  {
  Error_Handler();
 8000766:	f000 f947 	bl	80009f8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 fa9d 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f857 	bl	8000820 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <main+0xd4>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	4a25      	ldr	r2, [pc, #148]	; (8000810 <main+0xd4>)
 800077a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <main+0xd4>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000790:	2000      	movs	r0, #0
 8000792:	f004 f893 	bl	80048bc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000796:	2100      	movs	r1, #0
 8000798:	2000      	movs	r0, #0
 800079a:	f004 f8a9 	bl	80048f0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800079e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a2:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007a4:	bf00      	nop
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <main+0xd4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d104      	bne.n	80007bc <main+0x80>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	1e5a      	subs	r2, r3, #1
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dcf4      	bgt.n	80007a6 <main+0x6a>
if ( timeout < 0 )
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	da01      	bge.n	80007c6 <main+0x8a>
{
Error_Handler();
 80007c2:	f000 f919 	bl	80009f8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f7ff ff65 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f7ff ff43 	bl	8000654 <MX_DMA_Init>
  MX_ADC1_Init();
 80007ce:	f7ff fdf3 	bl	80003b8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80007d2:	f000 f96b 	bl	8000aac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80007d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007da:	2100      	movs	r1, #0
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <main+0xd8>)
 80007de:	f001 fd75 	bl	80022cc <HAL_ADCEx_Calibration_Start>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <main+0xb0>
  {
    /* Calibration Error */
    Error_Handler();
 80007e8:	f000 f906 	bl	80009f8 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <main+0xdc>)
 80007f0:	f006 febe 	bl	8007570 <HAL_TIM_PWM_Start>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <main+0xc2>
  {
    /* PWM Generation Error */
    Error_Handler();
 80007fa:	f000 f8fd 	bl	80009f8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)aADCDualConvertedValues1, 5);
 80007fe:	2205      	movs	r2, #5
 8000800:	4906      	ldr	r1, [pc, #24]	; (800081c <main+0xe0>)
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <main+0xd8>)
 8000804:	f000 feb4 	bl	8001570 <HAL_ADC_Start_DMA>
    HAL_Delay(100);
 8000808:	2064      	movs	r0, #100	; 0x64
 800080a:	f000 faf5 	bl	8000df8 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)aADCDualConvertedValues1, 5);
 800080e:	e7f6      	b.n	80007fe <main+0xc2>
 8000810:	58024400 	.word	0x58024400
 8000814:	24040038 	.word	0x24040038
 8000818:	24040114 	.word	0x24040114
 800081c:	24040008 	.word	0x24040008

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b0cc      	sub	sp, #304	; 0x130
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800082a:	224c      	movs	r2, #76	; 0x4c
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f007 fd8a 	bl	8008348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000838:	2220      	movs	r2, #32
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f007 fd83 	bl	8008348 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	4618      	mov	r0, r3
 8000848:	23bc      	movs	r3, #188	; 0xbc
 800084a:	461a      	mov	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f007 fd7b 	bl	8008348 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000852:	2004      	movs	r0, #4
 8000854:	f004 f860 	bl	8004918 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	4b5c      	ldr	r3, [pc, #368]	; (80009d0 <SystemClock_Config+0x1b0>)
 8000860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000862:	4a5b      	ldr	r2, [pc, #364]	; (80009d0 <SystemClock_Config+0x1b0>)
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	62d3      	str	r3, [r2, #44]	; 0x2c
 800086a:	4b59      	ldr	r3, [pc, #356]	; (80009d0 <SystemClock_Config+0x1b0>)
 800086c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086e:	f003 0201 	and.w	r2, r3, #1
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	4b57      	ldr	r3, [pc, #348]	; (80009d4 <SystemClock_Config+0x1b4>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800087e:	4a55      	ldr	r2, [pc, #340]	; (80009d4 <SystemClock_Config+0x1b4>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b53      	ldr	r3, [pc, #332]	; (80009d4 <SystemClock_Config+0x1b4>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000896:	bf00      	nop
 8000898:	4b4e      	ldr	r3, [pc, #312]	; (80009d4 <SystemClock_Config+0x1b4>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a4:	d1f8      	bne.n	8000898 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80008a6:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <SystemClock_Config+0x1b8>)
 80008a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008aa:	4a4b      	ldr	r2, [pc, #300]	; (80009d8 <SystemClock_Config+0x1b8>)
 80008ac:	f023 0303 	bic.w	r3, r3, #3
 80008b0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b2:	2302      	movs	r3, #2
 80008b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b8:	2301      	movs	r3, #1
 80008ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008be:	2320      	movs	r3, #32
 80008c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c4:	2302      	movs	r3, #2
 80008c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 12;
 80008d6:	230c      	movs	r3, #12
 80008d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008dc:	2302      	movs	r3, #2
 80008de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ee:	230c      	movs	r3, #12
 80008f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80008fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000906:	4618      	mov	r0, r3
 8000908:	f004 f85e 	bl	80049c8 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000912:	f000 f871 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	233f      	movs	r3, #63	; 0x3f
 8000918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2303      	movs	r3, #3
 800091e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800093a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000948:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800094c:	2101      	movs	r1, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f004 fbf2 	bl	8005138 <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x13e>
  {
    Error_Handler();
 800095a:	f000 f84d 	bl	80009f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000966:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2220      	movs	r2, #32
 800096e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2281      	movs	r2, #129	; 0x81
 8000976:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2202      	movs	r2, #2
 800097e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	2202      	movs	r2, #2
 8000986:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2202      	movs	r2, #2
 800098e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	2240      	movs	r2, #64	; 0x40
 8000996:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2200      	movs	r2, #0
 80009ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4618      	mov	r0, r3
 80009b8:	f004 fef0 	bl	800579c <HAL_RCCEx_PeriphCLKConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x1a6>
  {
    Error_Handler();
 80009c2:	f000 f819 	bl	80009f8 <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	58000400 	.word	0x58000400
 80009d4:	58024800 	.word	0x58024800
 80009d8:	58024400 	.word	0x58024400

080009dc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80009e4:	2101      	movs	r1, #1
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <HAL_ADC_ConvCpltCallback+0x18>)
 80009e8:	f003 ff4d 	bl	8004886 <HAL_GPIO_TogglePin>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	58020400 	.word	0x58020400

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //while(1);
  /* USER CODE END Error_Handler_Debug */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_MspInit+0x30>)
 8000a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x30>)
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x30>)
 8000a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	58024400 	.word	0x58024400

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f992 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <DMA1_Stream0_IRQHandler+0x10>)
 8000a9e:	f002 faa5 	bl	8002fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2404009c 	.word	0x2404009c

08000aac <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000ae0:	4a2d      	ldr	r2, [pc, #180]	; (8000b98 <MX_TIM3_Init+0xec>)
 8000ae2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000ae6:	2264      	movs	r2, #100	; 0x64
 8000ae8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b04:	4823      	ldr	r0, [pc, #140]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000b06:	f006 fcd3 	bl	80074b0 <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b10:	f7ff ff72 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000b22:	f006 fe95 	bl	8007850 <HAL_TIM_ConfigClockSource>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b2c:	f7ff ff64 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b30:	4818      	ldr	r0, [pc, #96]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000b32:	f006 fce8 	bl	8007506 <HAL_TIM_PWM_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b3c:	f7ff ff5c 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4811      	ldr	r0, [pc, #68]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000b50:	f007 fb7a 	bl	8008248 <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b5a:	f7ff ff4d 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5e:	2360      	movs	r3, #96	; 0x60
 8000b60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8000b62:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000b66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	4619      	mov	r1, r3
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000b78:	f006 fd52 	bl	8007620 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b82:	f7ff ff39 	bl	80009f8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_TIM3_Init+0xe8>)
 8000b88:	f000 f82a 	bl	8000be0 <HAL_TIM_MspPostInit>

}
 8000b8c:	bf00      	nop
 8000b8e:	3738      	adds	r7, #56	; 0x38
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	24040114 	.word	0x24040114
 8000b98:	40000400 	.word	0x40000400

08000b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d10e      	bne.n	8000bcc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_TIM_Base_MspInit+0x40>)
 8000bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb4:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <HAL_TIM_Base_MspInit+0x40>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <HAL_TIM_Base_MspInit+0x40>)
 8000bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40000400 	.word	0x40000400
 8000bdc:	58024400 	.word	0x58024400

08000be0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <HAL_TIM_MspPostInit+0x68>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d11e      	bne.n	8000c40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_TIM_MspPostInit+0x6c>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <HAL_TIM_MspPostInit+0x6c>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_TIM_MspPostInit+0x6c>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c20:	2340      	movs	r3, #64	; 0x40
 8000c22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_TIM_MspPostInit+0x70>)
 8000c3c:	f003 fc5a 	bl	80044f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40000400 	.word	0x40000400
 8000c4c:	58024400 	.word	0x58024400
 8000c50:	58020000 	.word	0x58020000

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c5a:	e003      	b.n	8000c64 <LoopCopyDataInit>

08000c5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c62:	3104      	adds	r1, #4

08000c64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c6c:	d3f6      	bcc.n	8000c5c <CopyDataInit>
  ldr  r2, =_sbss
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c70:	e002      	b.n	8000c78 <LoopFillZerobss>

08000c72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c74:	f842 3b04 	str.w	r3, [r2], #4

08000c78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c7c:	d3f9      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c7e:	f7ff fb2b 	bl	80002d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f007 fb3d 	bl	8008300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fd59 	bl	800073c <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c8c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000c90:	08008390 	.word	0x08008390
  ldr  r0, =_sdata
 8000c94:	24040000 	.word	0x24040000
  ldr  r3, =_edata
 8000c98:	2404001c 	.word	0x2404001c
  ldr  r2, =_sbss
 8000c9c:	2404001c 	.word	0x2404001c
  ldr  r3, = _ebss
 8000ca0:	24040158 	.word	0x24040158

08000ca4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC3_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f001 fd1b 	bl	80026e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cb2:	f004 fbe5 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_Init+0x60>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <HAL_Init+0x64>)
 8000cc4:	5cd3      	ldrb	r3, [r2, r3]
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	fa21 f303 	lsr.w	r3, r1, r3
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_Init+0x68>)
 8000cd0:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_Init+0x68>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_Init+0x60>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	490b      	ldr	r1, [pc, #44]	; (8000d0c <HAL_Init+0x64>)
 8000ce0:	5ccb      	ldrb	r3, [r1, r3]
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x6c>)
 8000cec:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f812 	bl	8000d18 <HAL_InitTick>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e002      	b.n	8000d04 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfe:	f7ff fe83 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	58024400 	.word	0x58024400
 8000d0c:	08008370 	.word	0x08008370
 8000d10:	24040000 	.word	0x24040000
 8000d14:	24040004 	.word	0x24040004

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <HAL_InitTick+0x94>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e03a      	b.n	8000da2 <HAL_InitTick+0x8a>
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8000d2c:	f001 fd1c 	bl	8002768 <HAL_GetCurrentCPUID>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d112      	bne.n	8000d5c <HAL_InitTick+0x44>
  {
    /* Cortex-M7 detected */
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <HAL_InitTick+0x98>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_InitTick+0x94>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 fcfe 	bl	800274e <HAL_SYSTICK_Config>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d015      	beq.n	8000d84 <HAL_InitTick+0x6c>
    {
      return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e022      	b.n	8000da2 <HAL_InitTick+0x8a>
  }
  else
  {
    /* Cortex-M4 detected */
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d5c:	f004 fd02 	bl	8005764 <HAL_RCC_GetHCLKFreq>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x94>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4619      	mov	r1, r3
 8000d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 fcea 	bl	800274e <HAL_SYSTICK_Config>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_InitTick+0x6c>
    {
      return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e00e      	b.n	8000da2 <HAL_InitTick+0x8a>
    return HAL_ERROR;
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d80a      	bhi.n	8000da0 <HAL_InitTick+0x88>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d92:	f001 fcb4 	bl	80026fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_InitTick+0x9c>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e000      	b.n	8000da2 <HAL_InitTick+0x8a>
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24040018 	.word	0x24040018
 8000db0:	24040000 	.word	0x24040000
 8000db4:	24040014 	.word	0x24040014

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	24040018 	.word	0x24040018
 8000ddc:	24040154 	.word	0x24040154

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	24040154 	.word	0x24040154

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff ffee 	bl	8000de0 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_Delay+0x40>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffde 	bl	8000de0 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	24040018 	.word	0x24040018

08000e3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetREVID+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0c1b      	lsrs	r3, r3, #16
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	5c001000 	.word	0x5c001000

08000e54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	609a      	str	r2, [r3, #8]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ebc:	b490      	push	{r4, r7}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3360      	adds	r3, #96	; 0x60
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	430b      	orrs	r3, r1
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc90      	pop	{r4, r7}
 8000ef4:	4770      	bx	lr

08000ef6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	431a      	orrs	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000f28:	b490      	push	{r4, r7}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3360      	adds	r3, #96	; 0x60
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	6023      	str	r3, [r4, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc90      	pop	{r4, r7}
 8000f56:	4770      	bx	lr

08000f58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f7e:	b490      	push	{r4, r7}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3330      	adds	r3, #48	; 0x30
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	4413      	add	r3, r2
 8000f9c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000f9e:	6822      	ldr	r2, [r4, #0]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	211f      	movs	r1, #31
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	401a      	ands	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	0e9b      	lsrs	r3, r3, #26
 8000fb4:	f003 011f 	and.w	r1, r3, #31
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc90      	pop	{r4, r7}
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fd0:	b490      	push	{r4, r7}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3314      	adds	r3, #20
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	0e5b      	lsrs	r3, r3, #25
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	4413      	add	r3, r2
 8000fee:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000ff0:	6822      	ldr	r2, [r4, #0]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	0d1b      	lsrs	r3, r3, #20
 8000ff6:	f003 031f 	and.w	r3, r3, #31
 8000ffa:	2107      	movs	r1, #7
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	401a      	ands	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	0d1b      	lsrs	r3, r3, #20
 8001008:	f003 031f 	and.w	r3, r3, #31
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bc90      	pop	{r4, r7}
 800101e:	4770      	bx	lr

08001020 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001038:	43db      	mvns	r3, r3
 800103a:	401a      	ands	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0318 	and.w	r3, r3, #24
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001044:	40d9      	lsrs	r1, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	400b      	ands	r3, r1
 800104a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800104e:	431a      	orrs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	000fffff 	.word	0x000fffff

08001068 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 031f 	and.w	r3, r3, #31
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001092:	4013      	ands	r3, r2
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6093      	str	r3, [r2, #8]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	5fffffc0 	.word	0x5fffffc0

080010a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010bc:	d101      	bne.n	80010c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80010de:	4013      	ands	r3, r2
 80010e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	6fffffc0 	.word	0x6fffffc0

080010f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800110c:	d101      	bne.n	8001112 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <LL_ADC_Enable+0x24>)
 800112e:	4013      	ands	r3, r2
 8001130:	f043 0201 	orr.w	r2, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	7fffffc0 	.word	0x7fffffc0

08001148 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <LL_ADC_Disable+0x24>)
 8001156:	4013      	ands	r3, r2
 8001158:	f043 0202 	orr.w	r2, r3, #2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	7fffffc0 	.word	0x7fffffc0

08001170 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b01      	cmp	r3, #1
 8001182:	d101      	bne.n	8001188 <LL_ADC_IsEnabled+0x18>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <LL_ADC_IsEnabled+0x1a>
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d101      	bne.n	80011ae <LL_ADC_IsDisableOngoing+0x18>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <LL_ADC_IsDisableOngoing+0x1a>
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <LL_ADC_REG_StartConversion+0x24>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	f043 0204 	orr.w	r2, r3, #4
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	7fffffc0 	.word	0x7fffffc0

080011e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d101      	bne.n	80011fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b08      	cmp	r3, #8
 800121c:	d101      	bne.n	8001222 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e18e      	b.n	8001568 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	2b00      	cmp	r3, #0
 8001256:	d109      	bne.n	800126c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff f965 	bl	8000528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff19 	bl	80010a8 <LL_ADC_IsDeepPowerDownEnabled>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff feff 	bl	8001084 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff34 	bl	80010f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d113      	bne.n	80012be <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff18 	bl	80010d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80012a0:	4b9a      	ldr	r3, [pc, #616]	; (800150c <HAL_ADC_Init+0x2dc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	4a9a      	ldr	r2, [pc, #616]	; (8001510 <HAL_ADC_Init+0x2e0>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012b0:	e002      	b.n	80012b8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f9      	bne.n	80012b2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff18 	bl	80010f8 <LL_ADC_IsInternalRegulatorEnabled>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10d      	bne.n	80012ea <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d2:	f043 0210 	orr.w	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff78 	bl	80011e4 <LL_ADC_REG_IsConversionOngoing>
 80012f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 8129 	bne.w	8001556 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 8125 	bne.w	8001556 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001310:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001314:	f043 0202 	orr.w	r2, r3, #2
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff25 	bl	8001170 <LL_ADC_IsEnabled>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d136      	bne.n	800139a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a78      	ldr	r2, [pc, #480]	; (8001514 <HAL_ADC_Init+0x2e4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d004      	beq.n	8001340 <HAL_ADC_Init+0x110>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a77      	ldr	r2, [pc, #476]	; (8001518 <HAL_ADC_Init+0x2e8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d10e      	bne.n	800135e <HAL_ADC_Init+0x12e>
 8001340:	4874      	ldr	r0, [pc, #464]	; (8001514 <HAL_ADC_Init+0x2e4>)
 8001342:	f7ff ff15 	bl	8001170 <LL_ADC_IsEnabled>
 8001346:	4604      	mov	r4, r0
 8001348:	4873      	ldr	r0, [pc, #460]	; (8001518 <HAL_ADC_Init+0x2e8>)
 800134a:	f7ff ff11 	bl	8001170 <LL_ADC_IsEnabled>
 800134e:	4603      	mov	r3, r0
 8001350:	4323      	orrs	r3, r4
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	e008      	b.n	8001370 <HAL_ADC_Init+0x140>
 800135e:	486f      	ldr	r0, [pc, #444]	; (800151c <HAL_ADC_Init+0x2ec>)
 8001360:	f7ff ff06 	bl	8001170 <LL_ADC_IsEnabled>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	bf0c      	ite	eq
 800136a:	2301      	moveq	r3, #1
 800136c:	2300      	movne	r3, #0
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d012      	beq.n	800139a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a66      	ldr	r2, [pc, #408]	; (8001514 <HAL_ADC_Init+0x2e4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d004      	beq.n	8001388 <HAL_ADC_Init+0x158>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a65      	ldr	r2, [pc, #404]	; (8001518 <HAL_ADC_Init+0x2e8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d101      	bne.n	800138c <HAL_ADC_Init+0x15c>
 8001388:	4a65      	ldr	r2, [pc, #404]	; (8001520 <HAL_ADC_Init+0x2f0>)
 800138a:	e000      	b.n	800138e <HAL_ADC_Init+0x15e>
 800138c:	4a65      	ldr	r2, [pc, #404]	; (8001524 <HAL_ADC_Init+0x2f4>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff fd5d 	bl	8000e54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800139a:	f7ff fd4f 	bl	8000e3c <HAL_GetREVID>
 800139e:	4602      	mov	r2, r0
 80013a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d914      	bls.n	80013d2 <HAL_ADC_Init+0x1a2>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b10      	cmp	r3, #16
 80013ae:	d110      	bne.n	80013d2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7d5b      	ldrb	r3, [r3, #21]
 80013b4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013ba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80013c0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7f1b      	ldrb	r3, [r3, #28]
 80013c6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80013c8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013ca:	f043 030c 	orr.w	r3, r3, #12
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	e00d      	b.n	80013ee <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7d5b      	ldrb	r3, [r3, #21]
 80013d6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013dc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80013e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7f1b      	ldrb	r3, [r3, #28]
 80013e8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
    }


    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7f1b      	ldrb	r3, [r3, #28]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d106      	bne.n	8001404 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	045b      	lsls	r3, r3, #17
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	2b00      	cmp	r3, #0
 800140a:	d009      	beq.n	8001420 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	4b40      	ldr	r3, [pc, #256]	; (8001528 <HAL_ADC_Init+0x2f8>)
 8001428:	4013      	ands	r3, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	69b9      	ldr	r1, [r7, #24]
 8001430:	430b      	orrs	r3, r1
 8001432:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fed3 	bl	80011e4 <LL_ADC_REG_IsConversionOngoing>
 800143e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fee0 	bl	800120a <LL_ADC_INJ_IsConversionOngoing>
 800144a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d14a      	bne.n	80014e8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d147      	bne.n	80014e8 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7d1b      	ldrb	r3, [r3, #20]
 800145c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_ADC_Init+0x2fc>)
 800146e:	4013      	ands	r3, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	69b9      	ldr	r1, [r7, #24]
 8001476:	430b      	orrs	r3, r1
 8001478:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001480:	2b01      	cmp	r3, #1
 8001482:	d11b      	bne.n	80014bc <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_ADC_Init+0x300>)
 8001492:	4013      	ands	r3, r2
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001498:	3a01      	subs	r2, #1
 800149a:	0411      	lsls	r1, r2, #16
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014a0:	4311      	orrs	r1, r2
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014a6:	4311      	orrs	r1, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014ac:	430a      	orrs	r2, r1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	e007      	b.n	80014cc <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fd98 	bl	8002018 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d121      	bne.n	8001534 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f023 010f 	bic.w	r1, r3, #15
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	1e5a      	subs	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
 8001508:	e01c      	b.n	8001544 <HAL_ADC_Init+0x314>
 800150a:	bf00      	nop
 800150c:	24040000 	.word	0x24040000
 8001510:	053e2d63 	.word	0x053e2d63
 8001514:	40022000 	.word	0x40022000
 8001518:	40022100 	.word	0x40022100
 800151c:	58026000 	.word	0x58026000
 8001520:	40022300 	.word	0x40022300
 8001524:	58026300 	.word	0x58026300
 8001528:	fff0c003 	.word	0xfff0c003
 800152c:	ffffbffc 	.word	0xffffbffc
 8001530:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 020f 	bic.w	r2, r2, #15
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001548:	f023 0303 	bic.w	r3, r3, #3
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	655a      	str	r2, [r3, #84]	; 0x54
 8001554:	e007      	b.n	8001566 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155a:	f043 0210 	orr.w	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001566:	7ffb      	ldrb	r3, [r7, #31]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3724      	adds	r7, #36	; 0x24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}

08001570 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a51      	ldr	r2, [pc, #324]	; (80016c8 <HAL_ADC_Start_DMA+0x158>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d004      	beq.n	8001590 <HAL_ADC_Start_DMA+0x20>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a50      	ldr	r2, [pc, #320]	; (80016cc <HAL_ADC_Start_DMA+0x15c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_ADC_Start_DMA+0x24>
 8001590:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <HAL_ADC_Start_DMA+0x160>)
 8001592:	e000      	b.n	8001596 <HAL_ADC_Start_DMA+0x26>
 8001594:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <HAL_ADC_Start_DMA+0x164>)
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fd66 	bl	8001068 <LL_ADC_GetMultimode>
 800159c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fe1e 	bl	80011e4 <LL_ADC_REG_IsConversionOngoing>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 8084 	bne.w	80016b8 <HAL_ADC_Start_DMA+0x148>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_ADC_Start_DMA+0x4e>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e07f      	b.n	80016be <HAL_ADC_Start_DMA+0x14e>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d002      	beq.n	80015d8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b09      	cmp	r3, #9
 80015d6:	d168      	bne.n	80016aa <HAL_ADC_Start_DMA+0x13a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fbad 	bl	8001d38 <ADC_Enable>
 80015de:	4603      	mov	r3, r0
 80015e0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d15b      	bne.n	80016a0 <HAL_ADC_Start_DMA+0x130>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_ADC_Start_DMA+0x168>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a33      	ldr	r2, [pc, #204]	; (80016cc <HAL_ADC_Start_DMA+0x15c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d002      	beq.n	8001608 <HAL_ADC_Start_DMA+0x98>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	e000      	b.n	800160a <HAL_ADC_Start_DMA+0x9a>
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_ADC_Start_DMA+0x158>)
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	4293      	cmp	r3, r2
 8001610:	d002      	beq.n	8001618 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	f023 0206 	bic.w	r2, r3, #6
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	659a      	str	r2, [r3, #88]	; 0x58
 800163c:	e002      	b.n	8001644 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	4a24      	ldr	r2, [pc, #144]	; (80016dc <HAL_ADC_Start_DMA+0x16c>)
 800164a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <HAL_ADC_Start_DMA+0x170>)
 8001652:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <HAL_ADC_Start_DMA+0x174>)
 800165a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	221c      	movs	r2, #28
 8001662:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0210 	orr.w	r2, r2, #16
 800167a:	605a      	str	r2, [r3, #4]


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3340      	adds	r3, #64	; 0x40
 8001686:	4619      	mov	r1, r3
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f001 fad2 	bl	8002c34 <HAL_DMA_Start_IT>
 8001690:	4603      	mov	r3, r0
 8001692:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fd8f 	bl	80011bc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800169e:	e00d      	b.n	80016bc <HAL_ADC_Start_DMA+0x14c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80016a8:	e008      	b.n	80016bc <HAL_ADC_Start_DMA+0x14c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80016b6:	e001      	b.n	80016bc <HAL_ADC_Start_DMA+0x14c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016b8:	2302      	movs	r3, #2
 80016ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000
 80016cc:	40022100 	.word	0x40022100
 80016d0:	40022300 	.word	0x40022300
 80016d4:	58026300 	.word	0x58026300
 80016d8:	fffff0fe 	.word	0xfffff0fe
 80016dc:	08001ef1 	.word	0x08001ef1
 80016e0:	08001fc9 	.word	0x08001fc9
 80016e4:	08001fe5 	.word	0x08001fe5

080016e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b099      	sub	sp, #100	; 0x64
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4a99      	ldr	r2, [pc, #612]	; (8001990 <HAL_ADC_ConfigChannel+0x280>)
 800172a:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_ADC_ConfigChannel+0x2a>
 8001736:	2302      	movs	r3, #2
 8001738:	e2e6      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x5f8>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fd4c 	bl	80011e4 <LL_ADC_REG_IsConversionOngoing>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 82cb 	bne.w	8001cea <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800175c:	2b00      	cmp	r3, #0
 800175e:	d108      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x62>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0e9b      	lsrs	r3, r3, #26
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	2201      	movs	r2, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	e00f      	b.n	8001792 <HAL_ADC_ConfigChannel+0x82>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	2201      	movs	r2, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	69d1      	ldr	r1, [r2, #28]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	430b      	orrs	r3, r1
 800179e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	f7ff fbe6 	bl	8000f7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fd14 	bl	80011e4 <LL_ADC_REG_IsConversionOngoing>
 80017bc:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fd21 	bl	800120a <LL_ADC_INJ_IsConversionOngoing>
 80017c8:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f040 80b3 	bne.w	8001938 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 80af 	bne.w	8001938 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	f7ff fbf2 	bl	8000fd0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017ec:	4b69      	ldr	r3, [pc, #420]	; (8001994 <HAL_ADC_ConfigChannel+0x284>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80017f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017f8:	d10b      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x102>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	e01d      	b.n	800184e <HAL_ADC_ConfigChannel+0x13e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10b      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x128>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	e00a      	b.n	800184e <HAL_ADC_ConfigChannel+0x13e>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	2b04      	cmp	r3, #4
 8001856:	d027      	beq.n	80018a8 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6919      	ldr	r1, [r3, #16]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001866:	f7ff fb29 	bl	8000ebc <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6919      	ldr	r1, [r3, #16]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	7e5b      	ldrb	r3, [r3, #25]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x170>
 800187a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800187e:	e000      	b.n	8001882 <HAL_ADC_ConfigChannel+0x172>
 8001880:	2300      	movs	r3, #0
 8001882:	461a      	mov	r2, r3
 8001884:	f7ff fb50 	bl	8000f28 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6919      	ldr	r1, [r3, #16]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	7e1b      	ldrb	r3, [r3, #24]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d102      	bne.n	800189e <HAL_ADC_ConfigChannel+0x18e>
 8001898:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800189c:	e000      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x190>
 800189e:	2300      	movs	r3, #0
 80018a0:	461a      	mov	r2, r3
 80018a2:	f7ff fb28 	bl	8000ef6 <LL_ADC_SetDataRightShift>
 80018a6:	e047      	b.n	8001938 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	069b      	lsls	r3, r3, #26
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d107      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ca:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	069b      	lsls	r3, r3, #26
 80018dc:	429a      	cmp	r2, r3
 80018de:	d107      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018ee:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	069b      	lsls	r3, r3, #26
 8001900:	429a      	cmp	r2, r3
 8001902:	d107      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001912:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800191a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	069b      	lsls	r3, r3, #26
 8001924:	429a      	cmp	r2, r3
 8001926:	d107      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001936:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fc17 	bl	8001170 <LL_ADC_IsEnabled>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	f040 81d9 	bne.w	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	461a      	mov	r2, r3
 8001958:	f7ff fb62 	bl	8001020 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <HAL_ADC_ConfigChannel+0x280>)
 8001962:	4293      	cmp	r3, r2
 8001964:	f040 8101 	bne.w	8001b6a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10f      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x288>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0e9b      	lsrs	r3, r3, #26
 800197e:	3301      	adds	r3, #1
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	2b09      	cmp	r3, #9
 8001986:	bf94      	ite	ls
 8001988:	2301      	movls	r3, #1
 800198a:	2300      	movhi	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	e016      	b.n	80019be <HAL_ADC_ConfigChannel+0x2ae>
 8001990:	47ff0000 	.word	0x47ff0000
 8001994:	5c001000 	.word	0x5c001000
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80019a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	bf94      	ite	ls
 80019b8:	2301      	movls	r3, #1
 80019ba:	2300      	movhi	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d064      	beq.n	8001a8c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d107      	bne.n	80019de <HAL_ADC_ConfigChannel+0x2ce>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	0e9b      	lsrs	r3, r3, #26
 80019d4:	3301      	adds	r3, #1
 80019d6:	069b      	lsls	r3, r3, #26
 80019d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019dc:	e00e      	b.n	80019fc <HAL_ADC_ConfigChannel+0x2ec>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80019ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	069b      	lsls	r3, r3, #26
 80019f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x30c>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	e010      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x32e>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	ea42 0103 	orr.w	r1, r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10a      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x354>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0e9b      	lsrs	r3, r3, #26
 8001a54:	3301      	adds	r3, #1
 8001a56:	f003 021f 	and.w	r2, r3, #31
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	051b      	lsls	r3, r3, #20
 8001a62:	e011      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x378>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	fab3 f383 	clz	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	e069      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d107      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x398>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0e9b      	lsrs	r3, r3, #26
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	069b      	lsls	r3, r3, #26
 8001aa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aa6:	e00e      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x3b6>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	61fb      	str	r3, [r7, #28]
  return result;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	069b      	lsls	r3, r3, #26
 8001ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x3d6>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	e010      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x3f8>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	617b      	str	r3, [r7, #20]
  return result;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	f003 031f 	and.w	r3, r3, #31
 8001b02:	2101      	movs	r1, #1
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	ea42 0103 	orr.w	r1, r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10d      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x424>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	3301      	adds	r3, #1
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b1e      	subs	r3, #30
 8001b2c:	051b      	lsls	r3, r3, #20
 8001b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b32:	e014      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x44e>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	60fb      	str	r3, [r7, #12]
  return result;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	3b1e      	subs	r3, #30
 8001b58:	051b      	lsls	r3, r3, #20
 8001b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	6892      	ldr	r2, [r2, #8]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff fa33 	bl	8000fd0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f280 80c4 	bge.w	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a65      	ldr	r2, [pc, #404]	; (8001d10 <HAL_ADC_ConfigChannel+0x600>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x478>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a64      	ldr	r2, [pc, #400]	; (8001d14 <HAL_ADC_ConfigChannel+0x604>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x47c>
 8001b88:	4b63      	ldr	r3, [pc, #396]	; (8001d18 <HAL_ADC_ConfigChannel+0x608>)
 8001b8a:	e000      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x47e>
 8001b8c:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_ADC_ConfigChannel+0x60c>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f986 	bl	8000ea0 <LL_ADC_GetCommonPathInternalCh>
 8001b94:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a5d      	ldr	r2, [pc, #372]	; (8001d10 <HAL_ADC_ConfigChannel+0x600>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d004      	beq.n	8001baa <HAL_ADC_ConfigChannel+0x49a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a5b      	ldr	r2, [pc, #364]	; (8001d14 <HAL_ADC_ConfigChannel+0x604>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10e      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x4b8>
 8001baa:	4859      	ldr	r0, [pc, #356]	; (8001d10 <HAL_ADC_ConfigChannel+0x600>)
 8001bac:	f7ff fae0 	bl	8001170 <LL_ADC_IsEnabled>
 8001bb0:	4604      	mov	r4, r0
 8001bb2:	4858      	ldr	r0, [pc, #352]	; (8001d14 <HAL_ADC_ConfigChannel+0x604>)
 8001bb4:	f7ff fadc 	bl	8001170 <LL_ADC_IsEnabled>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4323      	orrs	r3, r4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	e008      	b.n	8001bda <HAL_ADC_ConfigChannel+0x4ca>
 8001bc8:	4855      	ldr	r0, [pc, #340]	; (8001d20 <HAL_ADC_ConfigChannel+0x610>)
 8001bca:	f7ff fad1 	bl	8001170 <LL_ADC_IsEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d07b      	beq.n	8001cd6 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a50      	ldr	r2, [pc, #320]	; (8001d24 <HAL_ADC_ConfigChannel+0x614>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d12e      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x536>
 8001be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d129      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_ADC_ConfigChannel+0x610>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d17f      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a43      	ldr	r2, [pc, #268]	; (8001d10 <HAL_ADC_ConfigChannel+0x600>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d004      	beq.n	8001c10 <HAL_ADC_ConfigChannel+0x500>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <HAL_ADC_ConfigChannel+0x604>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x504>
 8001c10:	4a41      	ldr	r2, [pc, #260]	; (8001d18 <HAL_ADC_ConfigChannel+0x608>)
 8001c12:	e000      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x506>
 8001c14:	4a41      	ldr	r2, [pc, #260]	; (8001d1c <HAL_ADC_ConfigChannel+0x60c>)
 8001c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f7ff f92b 	bl	8000e7a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c24:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_ADC_ConfigChannel+0x618>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	4a40      	ldr	r2, [pc, #256]	; (8001d2c <HAL_ADC_ConfigChannel+0x61c>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001c36:	e002      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f9      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c44:	e05a      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a39      	ldr	r2, [pc, #228]	; (8001d30 <HAL_ADC_ConfigChannel+0x620>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d11e      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x57e>
 8001c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d119      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a30      	ldr	r2, [pc, #192]	; (8001d20 <HAL_ADC_ConfigChannel+0x610>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d14b      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a29      	ldr	r2, [pc, #164]	; (8001d10 <HAL_ADC_ConfigChannel+0x600>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d004      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0x568>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a28      	ldr	r2, [pc, #160]	; (8001d14 <HAL_ADC_ConfigChannel+0x604>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x56c>
 8001c78:	4a27      	ldr	r2, [pc, #156]	; (8001d18 <HAL_ADC_ConfigChannel+0x608>)
 8001c7a:	e000      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x56e>
 8001c7c:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_ADC_ConfigChannel+0x60c>)
 8001c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f7ff f8f7 	bl	8000e7a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c8c:	e036      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a28      	ldr	r2, [pc, #160]	; (8001d34 <HAL_ADC_ConfigChannel+0x624>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d131      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
 8001c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d12c      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_ADC_ConfigChannel+0x610>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d127      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_ADC_ConfigChannel+0x600>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_ADC_ConfigChannel+0x5b0>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <HAL_ADC_ConfigChannel+0x604>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x5b4>
 8001cc0:	4a15      	ldr	r2, [pc, #84]	; (8001d18 <HAL_ADC_ConfigChannel+0x608>)
 8001cc2:	e000      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x5b6>
 8001cc4:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <HAL_ADC_ConfigChannel+0x60c>)
 8001cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4610      	mov	r0, r2
 8001cd0:	f7ff f8d3 	bl	8000e7a <LL_ADC_SetCommonPathInternalCh>
 8001cd4:	e012      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	f043 0220 	orr.w	r2, r3, #32
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001ce8:	e008      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cee:	f043 0220 	orr.w	r2, r3, #32
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3764      	adds	r7, #100	; 0x64
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}
 8001d10:	40022000 	.word	0x40022000
 8001d14:	40022100 	.word	0x40022100
 8001d18:	40022300 	.word	0x40022300
 8001d1c:	58026300 	.word	0x58026300
 8001d20:	58026000 	.word	0x58026000
 8001d24:	cb840000 	.word	0xcb840000
 8001d28:	24040000 	.word	0x24040000
 8001d2c:	053e2d63 	.word	0x053e2d63
 8001d30:	c7520000 	.word	0xc7520000
 8001d34:	cfb80000 	.word	0xcfb80000

08001d38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fa13 	bl	8001170 <LL_ADC_IsEnabled>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d167      	bne.n	8001e20 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <ADC_Enable+0xf4>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00d      	beq.n	8001d7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f043 0210 	orr.w	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	f043 0201 	orr.w	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e053      	b.n	8001e22 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f9ce 	bl	8001120 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d84:	f7ff f82c 	bl	8000de0 <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a28      	ldr	r2, [pc, #160]	; (8001e30 <ADC_Enable+0xf8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d004      	beq.n	8001d9e <ADC_Enable+0x66>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <ADC_Enable+0xfc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <ADC_Enable+0x6a>
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <ADC_Enable+0x100>)
 8001da0:	e000      	b.n	8001da4 <ADC_Enable+0x6c>
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <ADC_Enable+0x104>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff f95f 	bl	8001068 <LL_ADC_GetMultimode>
 8001daa:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <ADC_Enable+0xfc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d002      	beq.n	8001dbc <ADC_Enable+0x84>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	e000      	b.n	8001dbe <ADC_Enable+0x86>
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <ADC_Enable+0xf8>)
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d025      	beq.n	8001e12 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d129      	bne.n	8001e20 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dcc:	e021      	b.n	8001e12 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f9cc 	bl	8001170 <LL_ADC_IsEnabled>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f99c 	bl	8001120 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001de8:	f7fe fffa 	bl	8000de0 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d90d      	bls.n	8001e12 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0210 	orr.w	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e007      	b.n	8001e22 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d1d6      	bne.n	8001dce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	8000003f 	.word	0x8000003f
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40022100 	.word	0x40022100
 8001e38:	40022300 	.word	0x40022300
 8001e3c:	58026300 	.word	0x58026300

08001e40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f9a2 	bl	8001196 <LL_ADC_IsDisableOngoing>
 8001e52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff f989 	bl	8001170 <LL_ADC_IsEnabled>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d040      	beq.n	8001ee6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d13d      	bne.n	8001ee6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030d 	and.w	r3, r3, #13
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10c      	bne.n	8001e92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff f963 	bl	8001148 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2203      	movs	r2, #3
 8001e88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e8a:	f7fe ffa9 	bl	8000de0 <HAL_GetTick>
 8001e8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e90:	e022      	b.n	8001ed8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	f043 0210 	orr.w	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e01c      	b.n	8001ee8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eae:	f7fe ff97 	bl	8000de0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d90d      	bls.n	8001ed8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f043 0210 	orr.w	r2, r3, #16
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e007      	b.n	8001ee8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1e3      	bne.n	8001eae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d14b      	bne.n	8001fa2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d021      	beq.n	8001f68 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff f815 	bl	8000f58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d032      	beq.n	8001f9a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d12b      	bne.n	8001f9a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d11f      	bne.n	8001f9a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
 8001f66:	e018      	b.n	8001f9a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d111      	bne.n	8001f9a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7fe fd1e 	bl	80009dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fa0:	e00e      	b.n	8001fc0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff fba4 	bl	80016fc <HAL_ADC_ErrorCallback>
}
 8001fb4:	e004      	b.n	8001fc0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff fb86 	bl	80016e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f043 0204 	orr.w	r2, r3, #4
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fb76 	bl	80016fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a74      	ldr	r2, [pc, #464]	; (80021f8 <ADC_ConfigureBoostMode+0x1e0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d004      	beq.n	8002034 <ADC_ConfigureBoostMode+0x1c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a73      	ldr	r2, [pc, #460]	; (80021fc <ADC_ConfigureBoostMode+0x1e4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d109      	bne.n	8002048 <ADC_ConfigureBoostMode+0x30>
 8002034:	4b72      	ldr	r3, [pc, #456]	; (8002200 <ADC_ConfigureBoostMode+0x1e8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e008      	b.n	800205a <ADC_ConfigureBoostMode+0x42>
 8002048:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <ADC_ConfigureBoostMode+0x1ec>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d01a      	beq.n	8002094 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800205e:	f003 fb81 	bl	8005764 <HAL_RCC_GetHCLKFreq>
 8002062:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800206c:	d006      	beq.n	800207c <ADC_ConfigureBoostMode+0x64>
 800206e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002072:	d00b      	beq.n	800208c <ADC_ConfigureBoostMode+0x74>
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002078:	d000      	beq.n	800207c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800207a:	e05d      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	60fb      	str	r3, [r7, #12]
        break;
 800208a:	e055      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	60fb      	str	r3, [r7, #12]
        break;
 8002092:	e051      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002094:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002098:	f004 fa70 	bl	800657c <HAL_RCCEx_GetPeriphCLKFreq>
 800209c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020a6:	d02a      	beq.n	80020fe <ADC_ConfigureBoostMode+0xe6>
 80020a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020ac:	d813      	bhi.n	80020d6 <ADC_ConfigureBoostMode+0xbe>
 80020ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020b2:	d024      	beq.n	80020fe <ADC_ConfigureBoostMode+0xe6>
 80020b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020b8:	d806      	bhi.n	80020c8 <ADC_ConfigureBoostMode+0xb0>
 80020ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020be:	d01e      	beq.n	80020fe <ADC_ConfigureBoostMode+0xe6>
 80020c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020c4:	d01b      	beq.n	80020fe <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80020c6:	e037      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80020c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020cc:	d017      	beq.n	80020fe <ADC_ConfigureBoostMode+0xe6>
 80020ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80020d2:	d014      	beq.n	80020fe <ADC_ConfigureBoostMode+0xe6>
        break;
 80020d4:	e030      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80020d6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020da:	d021      	beq.n	8002120 <ADC_ConfigureBoostMode+0x108>
 80020dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020e0:	d806      	bhi.n	80020f0 <ADC_ConfigureBoostMode+0xd8>
 80020e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80020e6:	d013      	beq.n	8002110 <ADC_ConfigureBoostMode+0xf8>
 80020e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020ec:	d014      	beq.n	8002118 <ADC_ConfigureBoostMode+0x100>
        break;
 80020ee:	e023      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80020f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80020f4:	d018      	beq.n	8002128 <ADC_ConfigureBoostMode+0x110>
 80020f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80020fa:	d019      	beq.n	8002130 <ADC_ConfigureBoostMode+0x118>
        break;
 80020fc:	e01c      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	0c9b      	lsrs	r3, r3, #18
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	60fb      	str	r3, [r7, #12]
        break;
 800210e:	e013      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	60fb      	str	r3, [r7, #12]
      break;
 8002116:	e00f      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	60fb      	str	r3, [r7, #12]
        break;
 800211e:	e00b      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	099b      	lsrs	r3, r3, #6
 8002124:	60fb      	str	r3, [r7, #12]
        break;
 8002126:	e007      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	09db      	lsrs	r3, r3, #7
 800212c:	60fb      	str	r3, [r7, #12]
        break;
 800212e:	e003      	b.n	8002138 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	60fb      	str	r3, [r7, #12]
        break;
 8002136:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002138:	f7fe fe80 	bl	8000e3c <HAL_GetREVID>
 800213c:	4602      	mov	r2, r0
 800213e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002142:	429a      	cmp	r2, r3
 8002144:	d815      	bhi.n	8002172 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <ADC_ConfigureBoostMode+0x1f0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d908      	bls.n	8002160 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800215c:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 800215e:	e047      	b.n	80021f0 <ADC_ConfigureBoostMode+0x1d8>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800216e:	609a      	str	r2, [r3, #8]
}
 8002170:	e03e      	b.n	80021f0 <ADC_ConfigureBoostMode+0x1d8>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a24      	ldr	r2, [pc, #144]	; (800220c <ADC_ConfigureBoostMode+0x1f4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d808      	bhi.n	8002192 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800218e:	609a      	str	r2, [r3, #8]
}
 8002190:	e02e      	b.n	80021f0 <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <ADC_ConfigureBoostMode+0x1f4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d90e      	bls.n	80021b8 <ADC_ConfigureBoostMode+0x1a0>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <ADC_ConfigureBoostMode+0x1f8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d80a      	bhi.n	80021b8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	e01b      	b.n	80021f0 <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a15      	ldr	r2, [pc, #84]	; (8002210 <ADC_ConfigureBoostMode+0x1f8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d90e      	bls.n	80021de <ADC_ConfigureBoostMode+0x1c6>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a14      	ldr	r2, [pc, #80]	; (8002214 <ADC_ConfigureBoostMode+0x1fc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d80a      	bhi.n	80021de <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e008      	b.n	80021f0 <ADC_ConfigureBoostMode+0x1d8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80021ec:	609a      	str	r2, [r3, #8]
}
 80021ee:	e7ff      	b.n	80021f0 <ADC_ConfigureBoostMode+0x1d8>
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40022100 	.word	0x40022100
 8002200:	40022300 	.word	0x40022300
 8002204:	58026300 	.word	0x58026300
 8002208:	01312d00 	.word	0x01312d00
 800220c:	005f5e10 	.word	0x005f5e10
 8002210:	00bebc20 	.word	0x00bebc20
 8002214:	017d7840 	.word	0x017d7840

08002218 <LL_ADC_IsEnabled>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <LL_ADC_IsEnabled+0x18>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <LL_ADC_IsEnabled+0x1a>
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <LL_ADC_StartCalibration>:
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <LL_ADC_StartCalibration+0x38>)
 8002252:	4013      	ands	r3, r2
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002260:	430a      	orrs	r2, r1
 8002262:	4313      	orrs	r3, r2
 8002264:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	609a      	str	r2, [r3, #8]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	3ffeffc0 	.word	0x3ffeffc0

0800227c <LL_ADC_IsCalibrationOnGoing>:
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800228c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002290:	d101      	bne.n	8002296 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_REG_IsConversionOngoing>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d101      	bne.n	80022bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_ADCEx_Calibration_Start+0x1e>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e04c      	b.n	8002384 <HAL_ADCEx_Calibration_Start+0xb8>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff fda4 	bl	8001e40 <ADC_Disable>
 80022f8:	4603      	mov	r3, r0
 80022fa:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d135      	bne.n	800236e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_ADCEx_Calibration_Start+0xc0>)
 8002308:	4013      	ands	r3, r2
 800230a:	f043 0202 	orr.w	r2, r3, #2
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff90 	bl	8002240 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002320:	e014      	b.n	800234c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	3301      	adds	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4a19      	ldr	r2, [pc, #100]	; (8002390 <HAL_ADCEx_Calibration_Start+0xc4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d90d      	bls.n	800234c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	f023 0312 	bic.w	r3, r3, #18
 8002338:	f043 0210 	orr.w	r2, r3, #16
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e01b      	b.n	8002384 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff93 	bl	800227c <LL_ADC_IsCalibrationOnGoing>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e2      	bne.n	8002322 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f023 0303 	bic.w	r3, r3, #3
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	655a      	str	r2, [r3, #84]	; 0x54
 800236c:	e005      	b.n	800237a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002382:	7dfb      	ldrb	r3, [r7, #23]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	ffffeefd 	.word	0xffffeefd
 8002390:	25c3f7ff 	.word	0x25c3f7ff

08002394 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b09f      	sub	sp, #124	; 0x7c
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e0ba      	b.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d102      	bne.n	80023ca <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80023c4:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	e001      	b.n	80023ce <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e09d      	b.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff58 	bl	80022a4 <LL_ADC_REG_IsConversionOngoing>
 80023f4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff52 	bl	80022a4 <LL_ADC_REG_IsConversionOngoing>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d17f      	bne.n	8002506 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002408:	2b00      	cmp	r3, #0
 800240a:	d17c      	bne.n	8002506 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a47      	ldr	r2, [pc, #284]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d004      	beq.n	8002420 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a46      	ldr	r2, [pc, #280]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d101      	bne.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002420:	4b45      	ldr	r3, [pc, #276]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002422:	e000      	b.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002424:	4b45      	ldr	r3, [pc, #276]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002426:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d039      	beq.n	80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	431a      	orrs	r2, r3
 800243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002440:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a3a      	ldr	r2, [pc, #232]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a38      	ldr	r2, [pc, #224]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d10e      	bne.n	8002474 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002456:	4836      	ldr	r0, [pc, #216]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002458:	f7ff fede 	bl	8002218 <LL_ADC_IsEnabled>
 800245c:	4604      	mov	r4, r0
 800245e:	4835      	ldr	r0, [pc, #212]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002460:	f7ff feda 	bl	8002218 <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	4323      	orrs	r3, r4
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e008      	b.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002474:	4832      	ldr	r0, [pc, #200]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002476:	f7ff fecf 	bl	8002218 <LL_ADC_IsEnabled>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d047      	beq.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800248a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002490:	4013      	ands	r3, r2
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	6811      	ldr	r1, [r2, #0]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	6892      	ldr	r2, [r2, #8]
 800249a:	430a      	orrs	r2, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024a2:	e03a      	b.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80024a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d10e      	bne.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80024c4:	481a      	ldr	r0, [pc, #104]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80024c6:	f7ff fea7 	bl	8002218 <LL_ADC_IsEnabled>
 80024ca:	4604      	mov	r4, r0
 80024cc:	4819      	ldr	r0, [pc, #100]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80024ce:	f7ff fea3 	bl	8002218 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4323      	orrs	r3, r4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf0c      	ite	eq
 80024da:	2301      	moveq	r3, #1
 80024dc:	2300      	movne	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	e008      	b.n	80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80024e2:	4817      	ldr	r0, [pc, #92]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80024e4:	f7ff fe98 	bl	8002218 <LL_ADC_IsEnabled>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80024fe:	4013      	ands	r3, r2
 8002500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002502:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002504:	e009      	b.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	f043 0220 	orr.w	r2, r3, #32
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002518:	e000      	b.n	800251c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800251a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002524:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002528:	4618      	mov	r0, r3
 800252a:	377c      	adds	r7, #124	; 0x7c
 800252c:	46bd      	mov	sp, r7
 800252e:	bd90      	pop	{r4, r7, pc}
 8002530:	40022000 	.word	0x40022000
 8002534:	40022100 	.word	0x40022100
 8002538:	40022300 	.word	0x40022300
 800253c:	58026300 	.word	0x58026300
 8002540:	58026000 	.word	0x58026000
 8002544:	fffff0e0 	.word	0xfffff0e0

08002548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <__NVIC_SetPriorityGrouping+0x40>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	4313      	orrs	r3, r2
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	; (8002588 <__NVIC_SetPriorityGrouping+0x40>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00
 800258c:	05fa0000 	.word	0x05fa0000

08002590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0307 	and.w	r3, r3, #7
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0b      	blt.n	80025d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4907      	ldr	r1, [pc, #28]	; (80025e4 <__NVIC_EnableIRQ+0x38>)
 80025c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2001      	movs	r0, #1
 80025ce:	fa00 f202 	lsl.w	r2, r0, r2
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db0a      	blt.n	8002612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	490c      	ldr	r1, [pc, #48]	; (8002634 <__NVIC_SetPriority+0x4c>)
 8002602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002610:	e00a      	b.n	8002628 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4908      	ldr	r1, [pc, #32]	; (8002638 <__NVIC_SetPriority+0x50>)
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3b04      	subs	r3, #4
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	440b      	add	r3, r1
 8002626:	761a      	strb	r2, [r3, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000e100 	.word	0xe000e100
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	bf28      	it	cs
 800265a:	2304      	movcs	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3304      	adds	r3, #4
 8002662:	2b06      	cmp	r3, #6
 8002664:	d902      	bls.n	800266c <NVIC_EncodePriority+0x30>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b03      	subs	r3, #3
 800266a:	e000      	b.n	800266e <NVIC_EncodePriority+0x32>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	f04f 32ff 	mov.w	r2, #4294967295
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002684:	f04f 31ff 	mov.w	r1, #4294967295
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43d9      	mvns	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	4313      	orrs	r3, r2
         );
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b4:	d301      	bcc.n	80026ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00f      	b.n	80026da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <SysTick_Config+0x40>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c2:	210f      	movs	r1, #15
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f7ff ff8e 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <SysTick_Config+0x40>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <SysTick_Config+0x40>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff29 	bl	8002548 <__NVIC_SetPriorityGrouping>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800270c:	f7ff ff40 	bl	8002590 <__NVIC_GetPriorityGrouping>
 8002710:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ff90 	bl	800263c <NVIC_EncodePriority>
 800271c:	4602      	mov	r2, r0
 800271e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff5f 	bl	80025e8 <__NVIC_SetPriority>
}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff33 	bl	80025ac <__NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ffa4 	bl	80026a4 <SysTick_Config>
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_GetCurrentCPUID+0x24>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	2b07      	cmp	r3, #7
 8002778:	d101      	bne.n	800277e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800277a:	2303      	movs	r3, #3
 800277c:	e000      	b.n	8002780 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800277e:	2301      	movs	r3, #1
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002798:	f7fe fb22 	bl	8000de0 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e228      	b.n	8002bfa <HAL_DMA_Init+0x46a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a66      	ldr	r2, [pc, #408]	; (8002948 <HAL_DMA_Init+0x1b8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d04a      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a65      	ldr	r2, [pc, #404]	; (800294c <HAL_DMA_Init+0x1bc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d045      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a63      	ldr	r2, [pc, #396]	; (8002950 <HAL_DMA_Init+0x1c0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d040      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a62      	ldr	r2, [pc, #392]	; (8002954 <HAL_DMA_Init+0x1c4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d03b      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a60      	ldr	r2, [pc, #384]	; (8002958 <HAL_DMA_Init+0x1c8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d036      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a5f      	ldr	r2, [pc, #380]	; (800295c <HAL_DMA_Init+0x1cc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d031      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a5d      	ldr	r2, [pc, #372]	; (8002960 <HAL_DMA_Init+0x1d0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02c      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a5c      	ldr	r2, [pc, #368]	; (8002964 <HAL_DMA_Init+0x1d4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d027      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a5a      	ldr	r2, [pc, #360]	; (8002968 <HAL_DMA_Init+0x1d8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d022      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a59      	ldr	r2, [pc, #356]	; (800296c <HAL_DMA_Init+0x1dc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d01d      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <HAL_DMA_Init+0x1e0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d018      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a56      	ldr	r2, [pc, #344]	; (8002974 <HAL_DMA_Init+0x1e4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a54      	ldr	r2, [pc, #336]	; (8002978 <HAL_DMA_Init+0x1e8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a53      	ldr	r2, [pc, #332]	; (800297c <HAL_DMA_Init+0x1ec>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a51      	ldr	r2, [pc, #324]	; (8002980 <HAL_DMA_Init+0x1f0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_DMA_Init+0xb8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a50      	ldr	r2, [pc, #320]	; (8002984 <HAL_DMA_Init+0x1f4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d101      	bne.n	800284c <HAL_DMA_Init+0xbc>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_DMA_Init+0xbe>
 800284c:	2300      	movs	r3, #0
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 810b 	beq.w	8002a6a <HAL_DMA_Init+0x2da>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a37      	ldr	r2, [pc, #220]	; (8002948 <HAL_DMA_Init+0x1b8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d04a      	beq.n	8002904 <HAL_DMA_Init+0x174>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a36      	ldr	r2, [pc, #216]	; (800294c <HAL_DMA_Init+0x1bc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d045      	beq.n	8002904 <HAL_DMA_Init+0x174>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a34      	ldr	r2, [pc, #208]	; (8002950 <HAL_DMA_Init+0x1c0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d040      	beq.n	8002904 <HAL_DMA_Init+0x174>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a33      	ldr	r2, [pc, #204]	; (8002954 <HAL_DMA_Init+0x1c4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d03b      	beq.n	8002904 <HAL_DMA_Init+0x174>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a31      	ldr	r2, [pc, #196]	; (8002958 <HAL_DMA_Init+0x1c8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d036      	beq.n	8002904 <HAL_DMA_Init+0x174>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a30      	ldr	r2, [pc, #192]	; (800295c <HAL_DMA_Init+0x1cc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d031      	beq.n	8002904 <HAL_DMA_Init+0x174>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2e      	ldr	r2, [pc, #184]	; (8002960 <HAL_DMA_Init+0x1d0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d02c      	beq.n	8002904 <HAL_DMA_Init+0x174>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2d      	ldr	r2, [pc, #180]	; (8002964 <HAL_DMA_Init+0x1d4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d027      	beq.n	8002904 <HAL_DMA_Init+0x174>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2b      	ldr	r2, [pc, #172]	; (8002968 <HAL_DMA_Init+0x1d8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d022      	beq.n	8002904 <HAL_DMA_Init+0x174>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2a      	ldr	r2, [pc, #168]	; (800296c <HAL_DMA_Init+0x1dc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d01d      	beq.n	8002904 <HAL_DMA_Init+0x174>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a28      	ldr	r2, [pc, #160]	; (8002970 <HAL_DMA_Init+0x1e0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d018      	beq.n	8002904 <HAL_DMA_Init+0x174>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a27      	ldr	r2, [pc, #156]	; (8002974 <HAL_DMA_Init+0x1e4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <HAL_DMA_Init+0x174>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a25      	ldr	r2, [pc, #148]	; (8002978 <HAL_DMA_Init+0x1e8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00e      	beq.n	8002904 <HAL_DMA_Init+0x174>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_DMA_Init+0x1ec>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d009      	beq.n	8002904 <HAL_DMA_Init+0x174>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a22      	ldr	r2, [pc, #136]	; (8002980 <HAL_DMA_Init+0x1f0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_DMA_Init+0x174>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a21      	ldr	r2, [pc, #132]	; (8002984 <HAL_DMA_Init+0x1f4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d108      	bne.n	8002916 <HAL_DMA_Init+0x186>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e007      	b.n	8002926 <HAL_DMA_Init+0x196>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002926:	e02f      	b.n	8002988 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002928:	f7fe fa5a 	bl	8000de0 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b05      	cmp	r3, #5
 8002934:	d928      	bls.n	8002988 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2203      	movs	r2, #3
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e158      	b.n	8002bfa <HAL_DMA_Init+0x46a>
 8002948:	40020010 	.word	0x40020010
 800294c:	40020028 	.word	0x40020028
 8002950:	40020040 	.word	0x40020040
 8002954:	40020058 	.word	0x40020058
 8002958:	40020070 	.word	0x40020070
 800295c:	40020088 	.word	0x40020088
 8002960:	400200a0 	.word	0x400200a0
 8002964:	400200b8 	.word	0x400200b8
 8002968:	40020410 	.word	0x40020410
 800296c:	40020428 	.word	0x40020428
 8002970:	40020440 	.word	0x40020440
 8002974:	40020458 	.word	0x40020458
 8002978:	40020470 	.word	0x40020470
 800297c:	40020488 	.word	0x40020488
 8002980:	400204a0 	.word	0x400204a0
 8002984:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1c8      	bne.n	8002928 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4b98      	ldr	r3, [pc, #608]	; (8002c04 <HAL_DMA_Init+0x474>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80029ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d107      	bne.n	80029ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4313      	orrs	r3, r2
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0307 	bic.w	r3, r3, #7
 8002a02:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d117      	bne.n	8002a46 <HAL_DMA_Init+0x2b6>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00e      	beq.n	8002a46 <HAL_DMA_Init+0x2b6>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f001 fbd9 	bl	80041e0 <DMA_CheckFifoParam>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_DMA_Init+0x2b6>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0d9      	b.n	8002bfa <HAL_DMA_Init+0x46a>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f001 fb14 	bl	800407c <DMA_CalcBaseAndBitshift>
 8002a54:	4603      	mov	r3, r0
 8002a56:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	223f      	movs	r2, #63	; 0x3f
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	e08c      	b.n	8002b84 <HAL_DMA_Init+0x3f4>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a66      	ldr	r2, [pc, #408]	; (8002c08 <HAL_DMA_Init+0x478>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <HAL_DMA_Init+0x32a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a64      	ldr	r2, [pc, #400]	; (8002c0c <HAL_DMA_Init+0x47c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01d      	beq.n	8002aba <HAL_DMA_Init+0x32a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a63      	ldr	r2, [pc, #396]	; (8002c10 <HAL_DMA_Init+0x480>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d018      	beq.n	8002aba <HAL_DMA_Init+0x32a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a61      	ldr	r2, [pc, #388]	; (8002c14 <HAL_DMA_Init+0x484>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_DMA_Init+0x32a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a60      	ldr	r2, [pc, #384]	; (8002c18 <HAL_DMA_Init+0x488>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <HAL_DMA_Init+0x32a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a5e      	ldr	r2, [pc, #376]	; (8002c1c <HAL_DMA_Init+0x48c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_DMA_Init+0x32a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a5d      	ldr	r2, [pc, #372]	; (8002c20 <HAL_DMA_Init+0x490>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_DMA_Init+0x32a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a5b      	ldr	r2, [pc, #364]	; (8002c24 <HAL_DMA_Init+0x494>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_DMA_Init+0x32e>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_Init+0x330>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d056      	beq.n	8002b72 <HAL_DMA_Init+0x3e2>
  {
    /* Check the request parameter */
    assert_param(IS_BDMA_REQUEST(hdma->Init.Request));

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <HAL_DMA_Init+0x498>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d008      	beq.n	8002afe <HAL_DMA_Init+0x36e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d102      	bne.n	8002afa <HAL_DMA_Init+0x36a>
 8002af4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002af8:	e002      	b.n	8002b00 <HAL_DMA_Init+0x370>
 8002afa:	2300      	movs	r3, #0
 8002afc:	e000      	b.n	8002b00 <HAL_DMA_Init+0x370>
 8002afe:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68d2      	ldr	r2, [r2, #12]
 8002b04:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002b06:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       | \
 8002b0e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              | \
 8002b16:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) | \
 8002b1e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    | \
 8002b26:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      | \
 8002b2e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            | \
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_DMA_Init+0x49c>)
 8002b46:	4413      	add	r3, r2
 8002b48:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <HAL_DMA_Init+0x4a0>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	009a      	lsls	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f001 fa90 	bl	800407c <DMA_CalcBaseAndBitshift>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2201      	movs	r2, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	e008      	b.n	8002b84 <HAL_DMA_Init+0x3f4>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2240      	movs	r2, #64	; 0x40
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e03a      	b.n	8002bfa <HAL_DMA_Init+0x46a>
  }

  /* Initialize parameters for DMAMUX channel :
  DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f001 fba7 	bl	80042d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b80      	cmp	r3, #128	; 0x80
 8002b90:	d102      	bne.n	8002b98 <HAL_DMA_Init+0x408>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bac:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
  if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */
  if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <HAL_DMA_Init+0x448>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d80c      	bhi.n	8002bd8 <HAL_DMA_Init+0x448>
  {
    /* Initialize parameters for DMAMUX request generator :
    DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f001 fc24 	bl	800440c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register */
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e008      	b.n	8002bea <HAL_DMA_Init+0x45a>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	fe10803f 	.word	0xfe10803f
 8002c08:	58025408 	.word	0x58025408
 8002c0c:	5802541c 	.word	0x5802541c
 8002c10:	58025430 	.word	0x58025430
 8002c14:	58025444 	.word	0x58025444
 8002c18:	58025458 	.word	0x58025458
 8002c1c:	5802546c 	.word	0x5802546c
 8002c20:	58025480 	.word	0x58025480
 8002c24:	58025494 	.word	0x58025494
 8002c28:	fffe000f 	.word	0xfffe000f
 8002c2c:	a7fdabf8 	.word	0xa7fdabf8
 8002c30:	cccccccd 	.word	0xcccccccd

08002c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e1a9      	b.n	8002fa4 <HAL_DMA_Start_IT+0x370>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_DMA_Start_IT+0x2a>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e1a2      	b.n	8002fa4 <HAL_DMA_Start_IT+0x370>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	f040 818d 	bne.w	8002f8e <HAL_DMA_Start_IT+0x35a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a68      	ldr	r2, [pc, #416]	; (8002e28 <HAL_DMA_Start_IT+0x1f4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d04a      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a66      	ldr	r2, [pc, #408]	; (8002e2c <HAL_DMA_Start_IT+0x1f8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d045      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a65      	ldr	r2, [pc, #404]	; (8002e30 <HAL_DMA_Start_IT+0x1fc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d040      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a63      	ldr	r2, [pc, #396]	; (8002e34 <HAL_DMA_Start_IT+0x200>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d03b      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a62      	ldr	r2, [pc, #392]	; (8002e38 <HAL_DMA_Start_IT+0x204>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d036      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a60      	ldr	r2, [pc, #384]	; (8002e3c <HAL_DMA_Start_IT+0x208>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d031      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a5f      	ldr	r2, [pc, #380]	; (8002e40 <HAL_DMA_Start_IT+0x20c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d02c      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a5d      	ldr	r2, [pc, #372]	; (8002e44 <HAL_DMA_Start_IT+0x210>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d027      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a5c      	ldr	r2, [pc, #368]	; (8002e48 <HAL_DMA_Start_IT+0x214>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d022      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a5a      	ldr	r2, [pc, #360]	; (8002e4c <HAL_DMA_Start_IT+0x218>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01d      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a59      	ldr	r2, [pc, #356]	; (8002e50 <HAL_DMA_Start_IT+0x21c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d018      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a57      	ldr	r2, [pc, #348]	; (8002e54 <HAL_DMA_Start_IT+0x220>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a56      	ldr	r2, [pc, #344]	; (8002e58 <HAL_DMA_Start_IT+0x224>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00e      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a54      	ldr	r2, [pc, #336]	; (8002e5c <HAL_DMA_Start_IT+0x228>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d009      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a53      	ldr	r2, [pc, #332]	; (8002e60 <HAL_DMA_Start_IT+0x22c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d004      	beq.n	8002d22 <HAL_DMA_Start_IT+0xee>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a51      	ldr	r2, [pc, #324]	; (8002e64 <HAL_DMA_Start_IT+0x230>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <HAL_DMA_Start_IT+0x100>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e007      	b.n	8002d44 <HAL_DMA_Start_IT+0x110>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f001 f878 	bl	8003e40 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <HAL_DMA_Start_IT+0x1f4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d04a      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <HAL_DMA_Start_IT+0x1f8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d045      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_DMA_Start_IT+0x1fc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d040      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a30      	ldr	r2, [pc, #192]	; (8002e34 <HAL_DMA_Start_IT+0x200>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d03b      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <HAL_DMA_Start_IT+0x204>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d036      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <HAL_DMA_Start_IT+0x208>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d031      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2b      	ldr	r2, [pc, #172]	; (8002e40 <HAL_DMA_Start_IT+0x20c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02c      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <HAL_DMA_Start_IT+0x210>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d027      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <HAL_DMA_Start_IT+0x214>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d022      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <HAL_DMA_Start_IT+0x218>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d01d      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a25      	ldr	r2, [pc, #148]	; (8002e50 <HAL_DMA_Start_IT+0x21c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d018      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_DMA_Start_IT+0x220>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_DMA_Start_IT+0x224>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_DMA_Start_IT+0x228>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <HAL_DMA_Start_IT+0x22c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_DMA_Start_IT+0x1bc>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_DMA_Start_IT+0x230>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_DMA_Start_IT+0x1c0>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_DMA_Start_IT+0x1c2>
 8002df4:	2300      	movs	r3, #0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d036      	beq.n	8002e68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 021e 	bic.w	r2, r3, #30
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0216 	orr.w	r2, r2, #22
 8002e0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d03e      	beq.n	8002e94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0208 	orr.w	r2, r2, #8
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e035      	b.n	8002e94 <HAL_DMA_Start_IT+0x260>
 8002e28:	40020010 	.word	0x40020010
 8002e2c:	40020028 	.word	0x40020028
 8002e30:	40020040 	.word	0x40020040
 8002e34:	40020058 	.word	0x40020058
 8002e38:	40020070 	.word	0x40020070
 8002e3c:	40020088 	.word	0x40020088
 8002e40:	400200a0 	.word	0x400200a0
 8002e44:	400200b8 	.word	0x400200b8
 8002e48:	40020410 	.word	0x40020410
 8002e4c:	40020428 	.word	0x40020428
 8002e50:	40020440 	.word	0x40020440
 8002e54:	40020458 	.word	0x40020458
 8002e58:	40020470 	.word	0x40020470
 8002e5c:	40020488 	.word	0x40020488
 8002e60:	400204a0 	.word	0x400204a0
 8002e64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 020e 	bic.w	r2, r3, #14
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 020a 	orr.w	r2, r2, #10
 8002e7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0204 	orr.w	r2, r2, #4
 8002e92:	601a      	str	r2, [r3, #0]
      }
    }

    /* Check if DMAMUX Synchronization is enabled */
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_DMA_Start_IT+0x27e>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_DMA_Start_IT+0x296>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT */
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a37      	ldr	r2, [pc, #220]	; (8002fac <HAL_DMA_Start_IT+0x378>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d04a      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a35      	ldr	r2, [pc, #212]	; (8002fb0 <HAL_DMA_Start_IT+0x37c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d045      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <HAL_DMA_Start_IT+0x380>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d040      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a32      	ldr	r2, [pc, #200]	; (8002fb8 <HAL_DMA_Start_IT+0x384>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d03b      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a31      	ldr	r2, [pc, #196]	; (8002fbc <HAL_DMA_Start_IT+0x388>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d036      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2f      	ldr	r2, [pc, #188]	; (8002fc0 <HAL_DMA_Start_IT+0x38c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d031      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2e      	ldr	r2, [pc, #184]	; (8002fc4 <HAL_DMA_Start_IT+0x390>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d02c      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <HAL_DMA_Start_IT+0x394>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d027      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <HAL_DMA_Start_IT+0x398>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <HAL_DMA_Start_IT+0x39c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01d      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <HAL_DMA_Start_IT+0x3a0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d018      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <HAL_DMA_Start_IT+0x3a4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <HAL_DMA_Start_IT+0x3a8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00e      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_DMA_Start_IT+0x3ac>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <HAL_DMA_Start_IT+0x3b0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_DMA_Start_IT+0x336>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_DMA_Start_IT+0x3b4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d108      	bne.n	8002f7c <HAL_DMA_Start_IT+0x348>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e012      	b.n	8002fa2 <HAL_DMA_Start_IT+0x36e>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e009      	b.n	8002fa2 <HAL_DMA_Start_IT+0x36e>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40020010 	.word	0x40020010
 8002fb0:	40020028 	.word	0x40020028
 8002fb4:	40020040 	.word	0x40020040
 8002fb8:	40020058 	.word	0x40020058
 8002fbc:	40020070 	.word	0x40020070
 8002fc0:	40020088 	.word	0x40020088
 8002fc4:	400200a0 	.word	0x400200a0
 8002fc8:	400200b8 	.word	0x400200b8
 8002fcc:	40020410 	.word	0x40020410
 8002fd0:	40020428 	.word	0x40020428
 8002fd4:	40020440 	.word	0x40020440
 8002fd8:	40020458 	.word	0x40020458
 8002fdc:	40020470 	.word	0x40020470
 8002fe0:	40020488 	.word	0x40020488
 8002fe4:	400204a0 	.word	0x400204a0
 8002fe8:	400204b8 	.word	0x400204b8

08002fec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff8:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_DMA_IRQHandler+0x1ac>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a67      	ldr	r2, [pc, #412]	; (800319c <HAL_DMA_IRQHandler+0x1b0>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0a9b      	lsrs	r3, r3, #10
 8003004:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5f      	ldr	r2, [pc, #380]	; (80031a0 <HAL_DMA_IRQHandler+0x1b4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04a      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a5d      	ldr	r2, [pc, #372]	; (80031a4 <HAL_DMA_IRQHandler+0x1b8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d045      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_DMA_IRQHandler+0x1bc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d040      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5a      	ldr	r2, [pc, #360]	; (80031ac <HAL_DMA_IRQHandler+0x1c0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d03b      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a59      	ldr	r2, [pc, #356]	; (80031b0 <HAL_DMA_IRQHandler+0x1c4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d036      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_DMA_IRQHandler+0x1c8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d031      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_DMA_IRQHandler+0x1cc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d02c      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_DMA_IRQHandler+0x1d0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d027      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a53      	ldr	r2, [pc, #332]	; (80031c0 <HAL_DMA_IRQHandler+0x1d4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a51      	ldr	r2, [pc, #324]	; (80031c4 <HAL_DMA_IRQHandler+0x1d8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01d      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a50      	ldr	r2, [pc, #320]	; (80031c8 <HAL_DMA_IRQHandler+0x1dc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d018      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a4e      	ldr	r2, [pc, #312]	; (80031cc <HAL_DMA_IRQHandler+0x1e0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a4d      	ldr	r2, [pc, #308]	; (80031d0 <HAL_DMA_IRQHandler+0x1e4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a4b      	ldr	r2, [pc, #300]	; (80031d4 <HAL_DMA_IRQHandler+0x1e8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a4a      	ldr	r2, [pc, #296]	; (80031d8 <HAL_DMA_IRQHandler+0x1ec>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_DMA_IRQHandler+0xd2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_DMA_IRQHandler+0x1f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_DMA_IRQHandler+0xd6>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_DMA_IRQHandler+0xd8>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 842b 	beq.w	8003920 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2208      	movs	r2, #8
 80030d4:	409a      	lsls	r2, r3
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80a2 	beq.w	8003224 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2e      	ldr	r2, [pc, #184]	; (80031a0 <HAL_DMA_IRQHandler+0x1b4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d04a      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2d      	ldr	r2, [pc, #180]	; (80031a4 <HAL_DMA_IRQHandler+0x1b8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d045      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <HAL_DMA_IRQHandler+0x1bc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d040      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <HAL_DMA_IRQHandler+0x1c0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d03b      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a28      	ldr	r2, [pc, #160]	; (80031b0 <HAL_DMA_IRQHandler+0x1c4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d036      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <HAL_DMA_IRQHandler+0x1c8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d031      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <HAL_DMA_IRQHandler+0x1cc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d02c      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a24      	ldr	r2, [pc, #144]	; (80031bc <HAL_DMA_IRQHandler+0x1d0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d027      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <HAL_DMA_IRQHandler+0x1d4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d022      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_DMA_IRQHandler+0x1d8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d01d      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <HAL_DMA_IRQHandler+0x1dc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d018      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <HAL_DMA_IRQHandler+0x1e0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d013      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <HAL_DMA_IRQHandler+0x1e4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00e      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <HAL_DMA_IRQHandler+0x1e8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_DMA_IRQHandler+0x1ec>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_DMA_IRQHandler+0x194>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a18      	ldr	r2, [pc, #96]	; (80031dc <HAL_DMA_IRQHandler+0x1f0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d12f      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x1f4>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e02e      	b.n	80031f4 <HAL_DMA_IRQHandler+0x208>
 8003196:	bf00      	nop
 8003198:	24040000 	.word	0x24040000
 800319c:	1b4e81b5 	.word	0x1b4e81b5
 80031a0:	40020010 	.word	0x40020010
 80031a4:	40020028 	.word	0x40020028
 80031a8:	40020040 	.word	0x40020040
 80031ac:	40020058 	.word	0x40020058
 80031b0:	40020070 	.word	0x40020070
 80031b4:	40020088 	.word	0x40020088
 80031b8:	400200a0 	.word	0x400200a0
 80031bc:	400200b8 	.word	0x400200b8
 80031c0:	40020410 	.word	0x40020410
 80031c4:	40020428 	.word	0x40020428
 80031c8:	40020440 	.word	0x40020440
 80031cc:	40020458 	.word	0x40020458
 80031d0:	40020470 	.word	0x40020470
 80031d4:	40020488 	.word	0x40020488
 80031d8:	400204a0 	.word	0x400204a0
 80031dc:	400204b8 	.word	0x400204b8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bf14      	ite	ne
 80031ee:	2301      	movne	r3, #1
 80031f0:	2300      	moveq	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0204 	bic.w	r2, r2, #4
 8003206:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2208      	movs	r2, #8
 8003212:	409a      	lsls	r2, r3
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06e      	beq.n	8003318 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_DMA_IRQHandler+0x3f8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d04a      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <HAL_DMA_IRQHandler+0x3fc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d045      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a66      	ldr	r2, [pc, #408]	; (80033ec <HAL_DMA_IRQHandler+0x400>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d040      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a64      	ldr	r2, [pc, #400]	; (80033f0 <HAL_DMA_IRQHandler+0x404>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d03b      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a63      	ldr	r2, [pc, #396]	; (80033f4 <HAL_DMA_IRQHandler+0x408>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d036      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a61      	ldr	r2, [pc, #388]	; (80033f8 <HAL_DMA_IRQHandler+0x40c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d031      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a60      	ldr	r2, [pc, #384]	; (80033fc <HAL_DMA_IRQHandler+0x410>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d02c      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a5e      	ldr	r2, [pc, #376]	; (8003400 <HAL_DMA_IRQHandler+0x414>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d027      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5d      	ldr	r2, [pc, #372]	; (8003404 <HAL_DMA_IRQHandler+0x418>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d022      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5b      	ldr	r2, [pc, #364]	; (8003408 <HAL_DMA_IRQHandler+0x41c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01d      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5a      	ldr	r2, [pc, #360]	; (800340c <HAL_DMA_IRQHandler+0x420>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d018      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_DMA_IRQHandler+0x424>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a57      	ldr	r2, [pc, #348]	; (8003414 <HAL_DMA_IRQHandler+0x428>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a55      	ldr	r2, [pc, #340]	; (8003418 <HAL_DMA_IRQHandler+0x42c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_DMA_IRQHandler+0x430>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_DMA_IRQHandler+0x2ee>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a52      	ldr	r2, [pc, #328]	; (8003420 <HAL_DMA_IRQHandler+0x434>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10a      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x304>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e003      	b.n	80032f8 <HAL_DMA_IRQHandler+0x30c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2201      	movs	r2, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0202 	orr.w	r2, r3, #2
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2204      	movs	r2, #4
 8003322:	409a      	lsls	r2, r3
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 808f 	beq.w	800344c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <HAL_DMA_IRQHandler+0x3f8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04a      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <HAL_DMA_IRQHandler+0x3fc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d045      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a29      	ldr	r2, [pc, #164]	; (80033ec <HAL_DMA_IRQHandler+0x400>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d040      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <HAL_DMA_IRQHandler+0x404>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d03b      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <HAL_DMA_IRQHandler+0x408>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d036      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <HAL_DMA_IRQHandler+0x40c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_DMA_IRQHandler+0x410>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d02c      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_DMA_IRQHandler+0x414>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d027      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a20      	ldr	r2, [pc, #128]	; (8003404 <HAL_DMA_IRQHandler+0x418>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_DMA_IRQHandler+0x41c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <HAL_DMA_IRQHandler+0x420>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_DMA_IRQHandler+0x424>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_DMA_IRQHandler+0x428>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_DMA_IRQHandler+0x42c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a17      	ldr	r2, [pc, #92]	; (800341c <HAL_DMA_IRQHandler+0x430>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_IRQHandler+0x3e2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a15      	ldr	r2, [pc, #84]	; (8003420 <HAL_DMA_IRQHandler+0x434>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d12a      	bne.n	8003424 <HAL_DMA_IRQHandler+0x438>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e023      	b.n	800342c <HAL_DMA_IRQHandler+0x440>
 80033e4:	40020010 	.word	0x40020010
 80033e8:	40020028 	.word	0x40020028
 80033ec:	40020040 	.word	0x40020040
 80033f0:	40020058 	.word	0x40020058
 80033f4:	40020070 	.word	0x40020070
 80033f8:	40020088 	.word	0x40020088
 80033fc:	400200a0 	.word	0x400200a0
 8003400:	400200b8 	.word	0x400200b8
 8003404:	40020410 	.word	0x40020410
 8003408:	40020428 	.word	0x40020428
 800340c:	40020440 	.word	0x40020440
 8003410:	40020458 	.word	0x40020458
 8003414:	40020470 	.word	0x40020470
 8003418:	40020488 	.word	0x40020488
 800341c:	400204a0 	.word	0x400204a0
 8003420:	400204b8 	.word	0x400204b8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	2204      	movs	r2, #4
 800343a:	409a      	lsls	r2, r3
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2210      	movs	r2, #16
 8003456:	409a      	lsls	r2, r3
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80a6 	beq.w	80035ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a85      	ldr	r2, [pc, #532]	; (800367c <HAL_DMA_IRQHandler+0x690>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d04a      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a83      	ldr	r2, [pc, #524]	; (8003680 <HAL_DMA_IRQHandler+0x694>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d045      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a82      	ldr	r2, [pc, #520]	; (8003684 <HAL_DMA_IRQHandler+0x698>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d040      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a80      	ldr	r2, [pc, #512]	; (8003688 <HAL_DMA_IRQHandler+0x69c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d03b      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7f      	ldr	r2, [pc, #508]	; (800368c <HAL_DMA_IRQHandler+0x6a0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d036      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a7d      	ldr	r2, [pc, #500]	; (8003690 <HAL_DMA_IRQHandler+0x6a4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7c      	ldr	r2, [pc, #496]	; (8003694 <HAL_DMA_IRQHandler+0x6a8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d02c      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a7a      	ldr	r2, [pc, #488]	; (8003698 <HAL_DMA_IRQHandler+0x6ac>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d027      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a79      	ldr	r2, [pc, #484]	; (800369c <HAL_DMA_IRQHandler+0x6b0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a77      	ldr	r2, [pc, #476]	; (80036a0 <HAL_DMA_IRQHandler+0x6b4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01d      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a76      	ldr	r2, [pc, #472]	; (80036a4 <HAL_DMA_IRQHandler+0x6b8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a74      	ldr	r2, [pc, #464]	; (80036a8 <HAL_DMA_IRQHandler+0x6bc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a73      	ldr	r2, [pc, #460]	; (80036ac <HAL_DMA_IRQHandler+0x6c0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a71      	ldr	r2, [pc, #452]	; (80036b0 <HAL_DMA_IRQHandler+0x6c4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a70      	ldr	r2, [pc, #448]	; (80036b4 <HAL_DMA_IRQHandler+0x6c8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_DMA_IRQHandler+0x516>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6e      	ldr	r2, [pc, #440]	; (80036b8 <HAL_DMA_IRQHandler+0x6cc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10a      	bne.n	8003518 <HAL_DMA_IRQHandler+0x52c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e009      	b.n	800352c <HAL_DMA_IRQHandler+0x540>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d03e      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2210      	movs	r2, #16
 800353a:	409a      	lsls	r2, r3
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d018      	beq.n	8003580 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d024      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e01f      	b.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01b      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
 800357e:	e016      	b.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0208 	bic.w	r2, r2, #8
 800359c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2220      	movs	r2, #32
 80035b8:	409a      	lsls	r2, r3
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8110 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2c      	ldr	r2, [pc, #176]	; (800367c <HAL_DMA_IRQHandler+0x690>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d04a      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <HAL_DMA_IRQHandler+0x694>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d045      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <HAL_DMA_IRQHandler+0x698>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d040      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a28      	ldr	r2, [pc, #160]	; (8003688 <HAL_DMA_IRQHandler+0x69c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d03b      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a26      	ldr	r2, [pc, #152]	; (800368c <HAL_DMA_IRQHandler+0x6a0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d036      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a25      	ldr	r2, [pc, #148]	; (8003690 <HAL_DMA_IRQHandler+0x6a4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d031      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a23      	ldr	r2, [pc, #140]	; (8003694 <HAL_DMA_IRQHandler+0x6a8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d02c      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a22      	ldr	r2, [pc, #136]	; (8003698 <HAL_DMA_IRQHandler+0x6ac>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d027      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a20      	ldr	r2, [pc, #128]	; (800369c <HAL_DMA_IRQHandler+0x6b0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d022      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <HAL_DMA_IRQHandler+0x6b4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d01d      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_DMA_IRQHandler+0x6b8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_DMA_IRQHandler+0x6bc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1a      	ldr	r2, [pc, #104]	; (80036ac <HAL_DMA_IRQHandler+0x6c0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00e      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_DMA_IRQHandler+0x6c4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_DMA_IRQHandler+0x6c8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_DMA_IRQHandler+0x678>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <HAL_DMA_IRQHandler+0x6cc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d12b      	bne.n	80036bc <HAL_DMA_IRQHandler+0x6d0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e02a      	b.n	80036d0 <HAL_DMA_IRQHandler+0x6e4>
 800367a:	bf00      	nop
 800367c:	40020010 	.word	0x40020010
 8003680:	40020028 	.word	0x40020028
 8003684:	40020040 	.word	0x40020040
 8003688:	40020058 	.word	0x40020058
 800368c:	40020070 	.word	0x40020070
 8003690:	40020088 	.word	0x40020088
 8003694:	400200a0 	.word	0x400200a0
 8003698:	400200b8 	.word	0x400200b8
 800369c:	40020410 	.word	0x40020410
 80036a0:	40020428 	.word	0x40020428
 80036a4:	40020440 	.word	0x40020440
 80036a8:	40020458 	.word	0x40020458
 80036ac:	40020470 	.word	0x40020470
 80036b0:	40020488 	.word	0x40020488
 80036b4:	400204a0 	.word	0x400204a0
 80036b8:	400204b8 	.word	0x400204b8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bf14      	ite	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	2300      	moveq	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8087 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2220      	movs	r2, #32
 80036e0:	409a      	lsls	r2, r3
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d139      	bne.n	8003766 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0216 	bic.w	r2, r2, #22
 8003700:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003710:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <HAL_DMA_IRQHandler+0x736>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0208 	bic.w	r2, r2, #8
 8003730:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	223f      	movs	r2, #63	; 0x3f
 800373c:	409a      	lsls	r2, r3
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 834a 	beq.w	8003df0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
          }
          return;
 8003764:	e344      	b.n	8003df0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d018      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02c      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
 8003792:	e027      	b.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d023      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
 80037a4:	e01e      	b.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10f      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0210 	bic.w	r2, r2, #16
 80037c2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8306 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8088 	beq.w	800390c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2204      	movs	r2, #4
 8003800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7a      	ldr	r2, [pc, #488]	; (80039f4 <HAL_DMA_IRQHandler+0xa08>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d04a      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a79      	ldr	r2, [pc, #484]	; (80039f8 <HAL_DMA_IRQHandler+0xa0c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d045      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a77      	ldr	r2, [pc, #476]	; (80039fc <HAL_DMA_IRQHandler+0xa10>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d040      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a76      	ldr	r2, [pc, #472]	; (8003a00 <HAL_DMA_IRQHandler+0xa14>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d03b      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a74      	ldr	r2, [pc, #464]	; (8003a04 <HAL_DMA_IRQHandler+0xa18>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d036      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a73      	ldr	r2, [pc, #460]	; (8003a08 <HAL_DMA_IRQHandler+0xa1c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d031      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a71      	ldr	r2, [pc, #452]	; (8003a0c <HAL_DMA_IRQHandler+0xa20>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02c      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a70      	ldr	r2, [pc, #448]	; (8003a10 <HAL_DMA_IRQHandler+0xa24>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d027      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a6e      	ldr	r2, [pc, #440]	; (8003a14 <HAL_DMA_IRQHandler+0xa28>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d022      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6d      	ldr	r2, [pc, #436]	; (8003a18 <HAL_DMA_IRQHandler+0xa2c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d01d      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6b      	ldr	r2, [pc, #428]	; (8003a1c <HAL_DMA_IRQHandler+0xa30>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d018      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6a      	ldr	r2, [pc, #424]	; (8003a20 <HAL_DMA_IRQHandler+0xa34>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a68      	ldr	r2, [pc, #416]	; (8003a24 <HAL_DMA_IRQHandler+0xa38>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a67      	ldr	r2, [pc, #412]	; (8003a28 <HAL_DMA_IRQHandler+0xa3c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a65      	ldr	r2, [pc, #404]	; (8003a2c <HAL_DMA_IRQHandler+0xa40>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x8b8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a64      	ldr	r2, [pc, #400]	; (8003a30 <HAL_DMA_IRQHandler+0xa44>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <HAL_DMA_IRQHandler+0x8ca>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e007      	b.n	80038c6 <HAL_DMA_IRQHandler+0x8da>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d307      	bcc.n	80038e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f2      	bne.n	80038c6 <HAL_DMA_IRQHandler+0x8da>
 80038e0:	e000      	b.n	80038e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038e2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2203      	movs	r2, #3
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003902:	e003      	b.n	800390c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8272 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
 800391e:	e26c      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a43      	ldr	r2, [pc, #268]	; (8003a34 <HAL_DMA_IRQHandler+0xa48>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d022      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a42      	ldr	r2, [pc, #264]	; (8003a38 <HAL_DMA_IRQHandler+0xa4c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d01d      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a40      	ldr	r2, [pc, #256]	; (8003a3c <HAL_DMA_IRQHandler+0xa50>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d018      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a3f      	ldr	r2, [pc, #252]	; (8003a40 <HAL_DMA_IRQHandler+0xa54>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a3d      	ldr	r2, [pc, #244]	; (8003a44 <HAL_DMA_IRQHandler+0xa58>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00e      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3c      	ldr	r2, [pc, #240]	; (8003a48 <HAL_DMA_IRQHandler+0xa5c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d009      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3a      	ldr	r2, [pc, #232]	; (8003a4c <HAL_DMA_IRQHandler+0xa60>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_DMA_IRQHandler+0x984>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a39      	ldr	r2, [pc, #228]	; (8003a50 <HAL_DMA_IRQHandler+0xa64>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_DMA_IRQHandler+0x988>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_DMA_IRQHandler+0x98a>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 823f 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2204      	movs	r2, #4
 800398e:	409a      	lsls	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80cd 	beq.w	8003b34 <HAL_DMA_IRQHandler+0xb48>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80c7 	beq.w	8003b34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2204      	movs	r2, #4
 80039b0:	409a      	lsls	r2, r3
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d049      	beq.n	8003a54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8210 	beq.w	8003df4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039dc:	e20a      	b.n	8003df4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8206 	beq.w	8003df4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f0:	e200      	b.n	8003df4 <HAL_DMA_IRQHandler+0xe08>
 80039f2:	bf00      	nop
 80039f4:	40020010 	.word	0x40020010
 80039f8:	40020028 	.word	0x40020028
 80039fc:	40020040 	.word	0x40020040
 8003a00:	40020058 	.word	0x40020058
 8003a04:	40020070 	.word	0x40020070
 8003a08:	40020088 	.word	0x40020088
 8003a0c:	400200a0 	.word	0x400200a0
 8003a10:	400200b8 	.word	0x400200b8
 8003a14:	40020410 	.word	0x40020410
 8003a18:	40020428 	.word	0x40020428
 8003a1c:	40020440 	.word	0x40020440
 8003a20:	40020458 	.word	0x40020458
 8003a24:	40020470 	.word	0x40020470
 8003a28:	40020488 	.word	0x40020488
 8003a2c:	400204a0 	.word	0x400204a0
 8003a30:	400204b8 	.word	0x400204b8
 8003a34:	58025408 	.word	0x58025408
 8003a38:	5802541c 	.word	0x5802541c
 8003a3c:	58025430 	.word	0x58025430
 8003a40:	58025444 	.word	0x58025444
 8003a44:	58025458 	.word	0x58025458
 8003a48:	5802546c 	.word	0x5802546c
 8003a4c:	58025480 	.word	0x58025480
 8003a50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d160      	bne.n	8003b20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a8c      	ldr	r2, [pc, #560]	; (8003c94 <HAL_DMA_IRQHandler+0xca8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a8a      	ldr	r2, [pc, #552]	; (8003c98 <HAL_DMA_IRQHandler+0xcac>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a89      	ldr	r2, [pc, #548]	; (8003c9c <HAL_DMA_IRQHandler+0xcb0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a87      	ldr	r2, [pc, #540]	; (8003ca0 <HAL_DMA_IRQHandler+0xcb4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a86      	ldr	r2, [pc, #536]	; (8003ca4 <HAL_DMA_IRQHandler+0xcb8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a84      	ldr	r2, [pc, #528]	; (8003ca8 <HAL_DMA_IRQHandler+0xcbc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a83      	ldr	r2, [pc, #524]	; (8003cac <HAL_DMA_IRQHandler+0xcc0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a81      	ldr	r2, [pc, #516]	; (8003cb0 <HAL_DMA_IRQHandler+0xcc4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a80      	ldr	r2, [pc, #512]	; (8003cb4 <HAL_DMA_IRQHandler+0xcc8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a7e      	ldr	r2, [pc, #504]	; (8003cb8 <HAL_DMA_IRQHandler+0xccc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a7d      	ldr	r2, [pc, #500]	; (8003cbc <HAL_DMA_IRQHandler+0xcd0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7b      	ldr	r2, [pc, #492]	; (8003cc0 <HAL_DMA_IRQHandler+0xcd4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7a      	ldr	r2, [pc, #488]	; (8003cc4 <HAL_DMA_IRQHandler+0xcd8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a78      	ldr	r2, [pc, #480]	; (8003cc8 <HAL_DMA_IRQHandler+0xcdc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a77      	ldr	r2, [pc, #476]	; (8003ccc <HAL_DMA_IRQHandler+0xce0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_IRQHandler+0xb12>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a75      	ldr	r2, [pc, #468]	; (8003cd0 <HAL_DMA_IRQHandler+0xce4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <HAL_DMA_IRQHandler+0xb24>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0208 	bic.w	r2, r2, #8
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e007      	b.n	8003b20 <HAL_DMA_IRQHandler+0xb34>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0204 	bic.w	r2, r2, #4
 8003b1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8165 	beq.w	8003df4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b32:	e15f      	b.n	8003df4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80c5 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xce8>
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80bf 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	2202      	movs	r2, #2
 8003b60:	409a      	lsls	r2, r3
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d018      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 813a 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b8c:	e134      	b.n	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8130 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba0:	e12a      	b.n	8003df8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d168      	bne.n	8003c7e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_DMA_IRQHandler+0xca8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d04a      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <HAL_DMA_IRQHandler+0xcac>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d045      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a35      	ldr	r2, [pc, #212]	; (8003c9c <HAL_DMA_IRQHandler+0xcb0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d040      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a34      	ldr	r2, [pc, #208]	; (8003ca0 <HAL_DMA_IRQHandler+0xcb4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d03b      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a32      	ldr	r2, [pc, #200]	; (8003ca4 <HAL_DMA_IRQHandler+0xcb8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d036      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a31      	ldr	r2, [pc, #196]	; (8003ca8 <HAL_DMA_IRQHandler+0xcbc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d031      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <HAL_DMA_IRQHandler+0xcc0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02c      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <HAL_DMA_IRQHandler+0xcc4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d027      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <HAL_DMA_IRQHandler+0xcc8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d022      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2b      	ldr	r2, [pc, #172]	; (8003cb8 <HAL_DMA_IRQHandler+0xccc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d01d      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <HAL_DMA_IRQHandler+0xcd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d018      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <HAL_DMA_IRQHandler+0xcd4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_DMA_IRQHandler+0xcd8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <HAL_DMA_IRQHandler+0xcdc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <HAL_DMA_IRQHandler+0xce0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc60>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <HAL_DMA_IRQHandler+0xce4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <HAL_DMA_IRQHandler+0xc72>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0214 	bic.w	r2, r2, #20
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	e007      	b.n	8003c6e <HAL_DMA_IRQHandler+0xc82>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 020a 	bic.w	r2, r2, #10
 8003c6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80b8 	beq.w	8003df8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c90:	e0b2      	b.n	8003df8 <HAL_DMA_IRQHandler+0xe0c>
 8003c92:	bf00      	nop
 8003c94:	40020010 	.word	0x40020010
 8003c98:	40020028 	.word	0x40020028
 8003c9c:	40020040 	.word	0x40020040
 8003ca0:	40020058 	.word	0x40020058
 8003ca4:	40020070 	.word	0x40020070
 8003ca8:	40020088 	.word	0x40020088
 8003cac:	400200a0 	.word	0x400200a0
 8003cb0:	400200b8 	.word	0x400200b8
 8003cb4:	40020410 	.word	0x40020410
 8003cb8:	40020428 	.word	0x40020428
 8003cbc:	40020440 	.word	0x40020440
 8003cc0:	40020458 	.word	0x40020458
 8003cc4:	40020470 	.word	0x40020470
 8003cc8:	40020488 	.word	0x40020488
 8003ccc:	400204a0 	.word	0x400204a0
 8003cd0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2208      	movs	r2, #8
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8088 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8082 	beq.w	8003dfa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a41      	ldr	r2, [pc, #260]	; (8003e00 <HAL_DMA_IRQHandler+0xe14>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d04a      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a3f      	ldr	r2, [pc, #252]	; (8003e04 <HAL_DMA_IRQHandler+0xe18>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d045      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a3e      	ldr	r2, [pc, #248]	; (8003e08 <HAL_DMA_IRQHandler+0xe1c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d040      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <HAL_DMA_IRQHandler+0xe20>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d03b      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_DMA_IRQHandler+0xe24>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d036      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a39      	ldr	r2, [pc, #228]	; (8003e14 <HAL_DMA_IRQHandler+0xe28>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d031      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a38      	ldr	r2, [pc, #224]	; (8003e18 <HAL_DMA_IRQHandler+0xe2c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d02c      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a36      	ldr	r2, [pc, #216]	; (8003e1c <HAL_DMA_IRQHandler+0xe30>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d027      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a35      	ldr	r2, [pc, #212]	; (8003e20 <HAL_DMA_IRQHandler+0xe34>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a33      	ldr	r2, [pc, #204]	; (8003e24 <HAL_DMA_IRQHandler+0xe38>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01d      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a32      	ldr	r2, [pc, #200]	; (8003e28 <HAL_DMA_IRQHandler+0xe3c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d018      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a30      	ldr	r2, [pc, #192]	; (8003e2c <HAL_DMA_IRQHandler+0xe40>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2f      	ldr	r2, [pc, #188]	; (8003e30 <HAL_DMA_IRQHandler+0xe44>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2d      	ldr	r2, [pc, #180]	; (8003e34 <HAL_DMA_IRQHandler+0xe48>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <HAL_DMA_IRQHandler+0xe4c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_DMA_IRQHandler+0xdaa>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <HAL_DMA_IRQHandler+0xe50>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <HAL_DMA_IRQHandler+0xdbc>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 021c 	bic.w	r2, r2, #28
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e007      	b.n	8003db8 <HAL_DMA_IRQHandler+0xdcc>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 020e 	bic.w	r2, r2, #14
 8003db6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
 8003dee:	e004      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003df0:	bf00      	nop
 8003df2:	e002      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40020010 	.word	0x40020010
 8003e04:	40020028 	.word	0x40020028
 8003e08:	40020040 	.word	0x40020040
 8003e0c:	40020058 	.word	0x40020058
 8003e10:	40020070 	.word	0x40020070
 8003e14:	40020088 	.word	0x40020088
 8003e18:	400200a0 	.word	0x400200a0
 8003e1c:	400200b8 	.word	0x400200b8
 8003e20:	40020410 	.word	0x40020410
 8003e24:	40020428 	.word	0x40020428
 8003e28:	40020440 	.word	0x40020440
 8003e2c:	40020458 	.word	0x40020458
 8003e30:	40020470 	.word	0x40020470
 8003e34:	40020488 	.word	0x40020488
 8003e38:	400204a0 	.word	0x400204a0
 8003e3c:	400204b8 	.word	0x400204b8

08003e40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	613b      	str	r3, [r7, #16]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e62:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <DMA_SetConfig+0x36>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e74:	605a      	str	r2, [r3, #4]
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a68      	ldr	r2, [pc, #416]	; (800401c <DMA_SetConfig+0x1dc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d04a      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a66      	ldr	r2, [pc, #408]	; (8004020 <DMA_SetConfig+0x1e0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d045      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a65      	ldr	r2, [pc, #404]	; (8004024 <DMA_SetConfig+0x1e4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d040      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a63      	ldr	r2, [pc, #396]	; (8004028 <DMA_SetConfig+0x1e8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d03b      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a62      	ldr	r2, [pc, #392]	; (800402c <DMA_SetConfig+0x1ec>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d036      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a60      	ldr	r2, [pc, #384]	; (8004030 <DMA_SetConfig+0x1f0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d031      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a5f      	ldr	r2, [pc, #380]	; (8004034 <DMA_SetConfig+0x1f4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d02c      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a5d      	ldr	r2, [pc, #372]	; (8004038 <DMA_SetConfig+0x1f8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d027      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a5c      	ldr	r2, [pc, #368]	; (800403c <DMA_SetConfig+0x1fc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d022      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5a      	ldr	r2, [pc, #360]	; (8004040 <DMA_SetConfig+0x200>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01d      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a59      	ldr	r2, [pc, #356]	; (8004044 <DMA_SetConfig+0x204>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d018      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a57      	ldr	r2, [pc, #348]	; (8004048 <DMA_SetConfig+0x208>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a56      	ldr	r2, [pc, #344]	; (800404c <DMA_SetConfig+0x20c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a54      	ldr	r2, [pc, #336]	; (8004050 <DMA_SetConfig+0x210>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a53      	ldr	r2, [pc, #332]	; (8004054 <DMA_SetConfig+0x214>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <DMA_SetConfig+0xd6>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a51      	ldr	r2, [pc, #324]	; (8004058 <DMA_SetConfig+0x218>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <DMA_SetConfig+0xda>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <DMA_SetConfig+0xdc>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d029      	beq.n	8003f74 <DMA_SetConfig+0x134>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	223f      	movs	r2, #63	; 0x3f
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f3e:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d108      	bne.n	8003f62 <DMA_SetConfig+0x122>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f60:	e056      	b.n	8004010 <DMA_SetConfig+0x1d0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	60da      	str	r2, [r3, #12]
}
 8003f72:	e04d      	b.n	8004010 <DMA_SetConfig+0x1d0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a38      	ldr	r2, [pc, #224]	; (800405c <DMA_SetConfig+0x21c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d022      	beq.n	8003fc4 <DMA_SetConfig+0x184>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a37      	ldr	r2, [pc, #220]	; (8004060 <DMA_SetConfig+0x220>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d01d      	beq.n	8003fc4 <DMA_SetConfig+0x184>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a35      	ldr	r2, [pc, #212]	; (8004064 <DMA_SetConfig+0x224>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d018      	beq.n	8003fc4 <DMA_SetConfig+0x184>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a34      	ldr	r2, [pc, #208]	; (8004068 <DMA_SetConfig+0x228>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <DMA_SetConfig+0x184>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a32      	ldr	r2, [pc, #200]	; (800406c <DMA_SetConfig+0x22c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <DMA_SetConfig+0x184>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a31      	ldr	r2, [pc, #196]	; (8004070 <DMA_SetConfig+0x230>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <DMA_SetConfig+0x184>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2f      	ldr	r2, [pc, #188]	; (8004074 <DMA_SetConfig+0x234>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <DMA_SetConfig+0x184>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2e      	ldr	r2, [pc, #184]	; (8004078 <DMA_SetConfig+0x238>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d101      	bne.n	8003fc8 <DMA_SetConfig+0x188>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <DMA_SetConfig+0x18a>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <DMA_SetConfig+0x1d0>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b40      	cmp	r3, #64	; 0x40
 8003fec:	d108      	bne.n	8004000 <DMA_SetConfig+0x1c0>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
}
 8003ffe:	e007      	b.n	8004010 <DMA_SetConfig+0x1d0>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40020010 	.word	0x40020010
 8004020:	40020028 	.word	0x40020028
 8004024:	40020040 	.word	0x40020040
 8004028:	40020058 	.word	0x40020058
 800402c:	40020070 	.word	0x40020070
 8004030:	40020088 	.word	0x40020088
 8004034:	400200a0 	.word	0x400200a0
 8004038:	400200b8 	.word	0x400200b8
 800403c:	40020410 	.word	0x40020410
 8004040:	40020428 	.word	0x40020428
 8004044:	40020440 	.word	0x40020440
 8004048:	40020458 	.word	0x40020458
 800404c:	40020470 	.word	0x40020470
 8004050:	40020488 	.word	0x40020488
 8004054:	400204a0 	.word	0x400204a0
 8004058:	400204b8 	.word	0x400204b8
 800405c:	58025408 	.word	0x58025408
 8004060:	5802541c 	.word	0x5802541c
 8004064:	58025430 	.word	0x58025430
 8004068:	58025444 	.word	0x58025444
 800406c:	58025458 	.word	0x58025458
 8004070:	5802546c 	.word	0x5802546c
 8004074:	58025480 	.word	0x58025480
 8004078:	58025494 	.word	0x58025494

0800407c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a42      	ldr	r2, [pc, #264]	; (8004194 <DMA_CalcBaseAndBitshift+0x118>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d04a      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a41      	ldr	r2, [pc, #260]	; (8004198 <DMA_CalcBaseAndBitshift+0x11c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d045      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3f      	ldr	r2, [pc, #252]	; (800419c <DMA_CalcBaseAndBitshift+0x120>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d040      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3e      	ldr	r2, [pc, #248]	; (80041a0 <DMA_CalcBaseAndBitshift+0x124>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d03b      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a3c      	ldr	r2, [pc, #240]	; (80041a4 <DMA_CalcBaseAndBitshift+0x128>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d036      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a3b      	ldr	r2, [pc, #236]	; (80041a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d031      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a39      	ldr	r2, [pc, #228]	; (80041ac <DMA_CalcBaseAndBitshift+0x130>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02c      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a38      	ldr	r2, [pc, #224]	; (80041b0 <DMA_CalcBaseAndBitshift+0x134>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d027      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a36      	ldr	r2, [pc, #216]	; (80041b4 <DMA_CalcBaseAndBitshift+0x138>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d022      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a35      	ldr	r2, [pc, #212]	; (80041b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d01d      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a33      	ldr	r2, [pc, #204]	; (80041bc <DMA_CalcBaseAndBitshift+0x140>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d018      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a32      	ldr	r2, [pc, #200]	; (80041c0 <DMA_CalcBaseAndBitshift+0x144>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a30      	ldr	r2, [pc, #192]	; (80041c4 <DMA_CalcBaseAndBitshift+0x148>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2f      	ldr	r2, [pc, #188]	; (80041c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d009      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2d      	ldr	r2, [pc, #180]	; (80041cc <DMA_CalcBaseAndBitshift+0x150>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <DMA_CalcBaseAndBitshift+0xa8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2c      	ldr	r2, [pc, #176]	; (80041d0 <DMA_CalcBaseAndBitshift+0x154>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <DMA_CalcBaseAndBitshift+0xac>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <DMA_CalcBaseAndBitshift+0xae>
 8004128:	2300      	movs	r3, #0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d024      	beq.n	8004178 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	3b10      	subs	r3, #16
 8004136:	4a27      	ldr	r2, [pc, #156]	; (80041d4 <DMA_CalcBaseAndBitshift+0x158>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	4a24      	ldr	r2, [pc, #144]	; (80041d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004148:	5cd3      	ldrb	r3, [r2, r3]
 800414a:	461a      	mov	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d908      	bls.n	8004168 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <DMA_CalcBaseAndBitshift+0x160>)
 800415e:	4013      	ands	r3, r2
 8004160:	1d1a      	adds	r2, r3, #4
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	659a      	str	r2, [r3, #88]	; 0x58
 8004166:	e00d      	b.n	8004184 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <DMA_CalcBaseAndBitshift+0x160>)
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6593      	str	r3, [r2, #88]	; 0x58
 8004176:	e005      	b.n	8004184 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40020010 	.word	0x40020010
 8004198:	40020028 	.word	0x40020028
 800419c:	40020040 	.word	0x40020040
 80041a0:	40020058 	.word	0x40020058
 80041a4:	40020070 	.word	0x40020070
 80041a8:	40020088 	.word	0x40020088
 80041ac:	400200a0 	.word	0x400200a0
 80041b0:	400200b8 	.word	0x400200b8
 80041b4:	40020410 	.word	0x40020410
 80041b8:	40020428 	.word	0x40020428
 80041bc:	40020440 	.word	0x40020440
 80041c0:	40020458 	.word	0x40020458
 80041c4:	40020470 	.word	0x40020470
 80041c8:	40020488 	.word	0x40020488
 80041cc:	400204a0 	.word	0x400204a0
 80041d0:	400204b8 	.word	0x400204b8
 80041d4:	aaaaaaab 	.word	0xaaaaaaab
 80041d8:	08008380 	.word	0x08008380
 80041dc:	fffffc00 	.word	0xfffffc00

080041e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d120      	bne.n	8004236 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d858      	bhi.n	80042ae <DMA_CheckFifoParam+0xce>
 80041fc:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <DMA_CheckFifoParam+0x24>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004215 	.word	0x08004215
 8004208:	08004227 	.word	0x08004227
 800420c:	08004215 	.word	0x08004215
 8004210:	080042af 	.word	0x080042af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d048      	beq.n	80042b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004224:	e045      	b.n	80042b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800422e:	d142      	bne.n	80042b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004234:	e03f      	b.n	80042b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423e:	d123      	bne.n	8004288 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	2b03      	cmp	r3, #3
 8004246:	d838      	bhi.n	80042ba <DMA_CheckFifoParam+0xda>
 8004248:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <DMA_CheckFifoParam+0x70>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004261 	.word	0x08004261
 8004254:	08004267 	.word	0x08004267
 8004258:	08004261 	.word	0x08004261
 800425c:	08004279 	.word	0x08004279
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
        break;
 8004264:	e030      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d025      	beq.n	80042be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004276:	e022      	b.n	80042be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004280:	d11f      	bne.n	80042c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004286:	e01c      	b.n	80042c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	2b02      	cmp	r3, #2
 800428e:	d902      	bls.n	8004296 <DMA_CheckFifoParam+0xb6>
 8004290:	2b03      	cmp	r3, #3
 8004292:	d003      	beq.n	800429c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004294:	e018      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
        break;
 800429a:	e015      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00e      	beq.n	80042c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
    break;
 80042ac:	e00b      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
        break;
 80042ae:	bf00      	nop
 80042b0:	e00a      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        break;
 80042b2:	bf00      	nop
 80042b4:	e008      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        break;
 80042b6:	bf00      	nop
 80042b8:	e006      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        break;
 80042ba:	bf00      	nop
 80042bc:	e004      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        break;
 80042be:	bf00      	nop
 80042c0:	e002      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
        break;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <DMA_CheckFifoParam+0xe8>
    break;
 80042c6:	bf00      	nop
    }
  }

  return status;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop

080042d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a38      	ldr	r2, [pc, #224]	; (80043cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a36      	ldr	r2, [pc, #216]	; (80043d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01d      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a35      	ldr	r2, [pc, #212]	; (80043d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a33      	ldr	r2, [pc, #204]	; (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a32      	ldr	r2, [pc, #200]	; (80043dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a30      	ldr	r2, [pc, #192]	; (80043e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2f      	ldr	r2, [pc, #188]	; (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2d      	ldr	r2, [pc, #180]	; (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d101      	bne.n	800433a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01a      	beq.n	8004376 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	3b08      	subs	r3, #8
 8004348:	4a28      	ldr	r2, [pc, #160]	; (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	461a      	mov	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a24      	ldr	r2, [pc, #144]	; (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004364:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004374:	e024      	b.n	80043c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	3b10      	subs	r3, #16
 800437e:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d806      	bhi.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d902      	bls.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3308      	adds	r3, #8
 800439c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	461a      	mov	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a16      	ldr	r2, [pc, #88]	; (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80043b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2201      	movs	r2, #1
 80043ba:	409a      	lsls	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	58025408 	.word	0x58025408
 80043d0:	5802541c 	.word	0x5802541c
 80043d4:	58025430 	.word	0x58025430
 80043d8:	58025444 	.word	0x58025444
 80043dc:	58025458 	.word	0x58025458
 80043e0:	5802546c 	.word	0x5802546c
 80043e4:	58025480 	.word	0x58025480
 80043e8:	58025494 	.word	0x58025494
 80043ec:	cccccccd 	.word	0xcccccccd
 80043f0:	16009600 	.word	0x16009600
 80043f4:	58025880 	.word	0x58025880
 80043f8:	aaaaaaab 	.word	0xaaaaaaab
 80043fc:	400204b8 	.word	0x400204b8
 8004400:	4002040f 	.word	0x4002040f
 8004404:	10008200 	.word	0x10008200
 8004408:	40020880 	.word	0x40020880

0800440c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d04a      	beq.n	80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d847      	bhi.n	80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a25      	ldr	r2, [pc, #148]	; (80044c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d022      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d01d      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a22      	ldr	r2, [pc, #136]	; (80044cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d018      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d013      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00e      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d009      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d101      	bne.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800447c:	2300      	movs	r3, #0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004494:	671a      	str	r2, [r3, #112]	; 0x70
 8004496:	e009      	b.n	80044ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4b14      	ldr	r3, [pc, #80]	; (80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a11      	ldr	r2, [pc, #68]	; (80044f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80044aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	2201      	movs	r2, #1
 80044b2:	409a      	lsls	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	58025408 	.word	0x58025408
 80044c8:	5802541c 	.word	0x5802541c
 80044cc:	58025430 	.word	0x58025430
 80044d0:	58025444 	.word	0x58025444
 80044d4:	58025458 	.word	0x58025458
 80044d8:	5802546c 	.word	0x5802546c
 80044dc:	58025480 	.word	0x58025480
 80044e0:	58025494 	.word	0x58025494
 80044e4:	1600963f 	.word	0x1600963f
 80044e8:	58025940 	.word	0x58025940
 80044ec:	1000823f 	.word	0x1000823f
 80044f0:	40020940 	.word	0x40020940

080044f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004502:	4b89      	ldr	r3, [pc, #548]	; (8004728 <HAL_GPIO_Init+0x234>)
 8004504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004506:	e194      	b.n	8004832 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	2101      	movs	r1, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	4013      	ands	r3, r2
 8004516:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8186 	beq.w	800482c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_Init+0x3c>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b12      	cmp	r3, #18
 800452e:	d123      	bne.n	8004578 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	08da      	lsrs	r2, r3, #3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3208      	adds	r2, #8
 8004538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	220f      	movs	r2, #15
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	08da      	lsrs	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3208      	adds	r2, #8
 8004572:	69b9      	ldr	r1, [r7, #24]
 8004574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	2203      	movs	r2, #3
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4013      	ands	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 0203 	and.w	r2, r3, #3
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d00b      	beq.n	80045cc <HAL_GPIO_Init+0xd8>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d007      	beq.n	80045cc <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045c0:	2b11      	cmp	r3, #17
 80045c2:	d003      	beq.n	80045cc <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b12      	cmp	r3, #18
 80045ca:	d130      	bne.n	800462e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	2203      	movs	r2, #3
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004602:	2201      	movs	r2, #1
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	f003 0201 	and.w	r2, r3, #1
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4313      	orrs	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	2203      	movs	r2, #3
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80e0 	beq.w	800482c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800466c:	4b2f      	ldr	r3, [pc, #188]	; (800472c <HAL_GPIO_Init+0x238>)
 800466e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004672:	4a2e      	ldr	r2, [pc, #184]	; (800472c <HAL_GPIO_Init+0x238>)
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800467c:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_GPIO_Init+0x238>)
 800467e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800468a:	4a29      	ldr	r2, [pc, #164]	; (8004730 <HAL_GPIO_Init+0x23c>)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	3302      	adds	r3, #2
 8004692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	220f      	movs	r2, #15
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a20      	ldr	r2, [pc, #128]	; (8004734 <HAL_GPIO_Init+0x240>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d052      	beq.n	800475c <HAL_GPIO_Init+0x268>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <HAL_GPIO_Init+0x244>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d031      	beq.n	8004722 <HAL_GPIO_Init+0x22e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1e      	ldr	r2, [pc, #120]	; (800473c <HAL_GPIO_Init+0x248>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d02b      	beq.n	800471e <HAL_GPIO_Init+0x22a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <HAL_GPIO_Init+0x24c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d025      	beq.n	800471a <HAL_GPIO_Init+0x226>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <HAL_GPIO_Init+0x250>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01f      	beq.n	8004716 <HAL_GPIO_Init+0x222>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1b      	ldr	r2, [pc, #108]	; (8004748 <HAL_GPIO_Init+0x254>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d019      	beq.n	8004712 <HAL_GPIO_Init+0x21e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1a      	ldr	r2, [pc, #104]	; (800474c <HAL_GPIO_Init+0x258>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_GPIO_Init+0x21a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <HAL_GPIO_Init+0x25c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00d      	beq.n	800470a <HAL_GPIO_Init+0x216>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_GPIO_Init+0x260>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <HAL_GPIO_Init+0x212>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a17      	ldr	r2, [pc, #92]	; (8004758 <HAL_GPIO_Init+0x264>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <HAL_GPIO_Init+0x20e>
 80046fe:	2309      	movs	r3, #9
 8004700:	e02d      	b.n	800475e <HAL_GPIO_Init+0x26a>
 8004702:	230a      	movs	r3, #10
 8004704:	e02b      	b.n	800475e <HAL_GPIO_Init+0x26a>
 8004706:	2308      	movs	r3, #8
 8004708:	e029      	b.n	800475e <HAL_GPIO_Init+0x26a>
 800470a:	2307      	movs	r3, #7
 800470c:	e027      	b.n	800475e <HAL_GPIO_Init+0x26a>
 800470e:	2306      	movs	r3, #6
 8004710:	e025      	b.n	800475e <HAL_GPIO_Init+0x26a>
 8004712:	2305      	movs	r3, #5
 8004714:	e023      	b.n	800475e <HAL_GPIO_Init+0x26a>
 8004716:	2304      	movs	r3, #4
 8004718:	e021      	b.n	800475e <HAL_GPIO_Init+0x26a>
 800471a:	2303      	movs	r3, #3
 800471c:	e01f      	b.n	800475e <HAL_GPIO_Init+0x26a>
 800471e:	2302      	movs	r3, #2
 8004720:	e01d      	b.n	800475e <HAL_GPIO_Init+0x26a>
 8004722:	2301      	movs	r3, #1
 8004724:	e01b      	b.n	800475e <HAL_GPIO_Init+0x26a>
 8004726:	bf00      	nop
 8004728:	58000080 	.word	0x58000080
 800472c:	58024400 	.word	0x58024400
 8004730:	58000400 	.word	0x58000400
 8004734:	58020000 	.word	0x58020000
 8004738:	58020400 	.word	0x58020400
 800473c:	58020800 	.word	0x58020800
 8004740:	58020c00 	.word	0x58020c00
 8004744:	58021000 	.word	0x58021000
 8004748:	58021400 	.word	0x58021400
 800474c:	58021800 	.word	0x58021800
 8004750:	58021c00 	.word	0x58021c00
 8004754:	58022000 	.word	0x58022000
 8004758:	58022400 	.word	0x58022400
 800475c:	2300      	movs	r3, #0
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	f002 0203 	and.w	r2, r2, #3
 8004764:	0092      	lsls	r2, r2, #2
 8004766:	4093      	lsls	r3, r2
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800476e:	4938      	ldr	r1, [pc, #224]	; (8004850 <HAL_GPIO_Init+0x35c>)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	3302      	adds	r3, #2
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	43db      	mvns	r3, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	43db      	mvns	r3, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4013      	ands	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	3301      	adds	r3, #1
 8004830:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	f47f ae63 	bne.w	8004508 <HAL_GPIO_Init+0x14>
  }
}
 8004842:	bf00      	nop
 8004844:	3724      	adds	r7, #36	; 0x24
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	58000400 	.word	0x58000400

08004854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
 8004860:	4613      	mov	r3, r2
 8004862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004864:	787b      	ldrb	r3, [r7, #1]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800486a:	887a      	ldrh	r2, [r7, #2]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004870:	e003      	b.n	800487a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004872:	887b      	ldrh	r3, [r7, #2]
 8004874:	041a      	lsls	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	619a      	str	r2, [r3, #24]
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	460b      	mov	r3, r1
 8004890:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	887b      	ldrh	r3, [r7, #2]
 8004898:	401a      	ands	r2, r3
 800489a:	887b      	ldrh	r3, [r7, #2]
 800489c:	429a      	cmp	r2, r3
 800489e:	d104      	bne.n	80048aa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048a0:	887b      	ldrh	r3, [r7, #2]
 80048a2:	041a      	lsls	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80048a8:	e002      	b.n	80048b0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	619a      	str	r2, [r3, #24]
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80048c4:	4a08      	ldr	r2, [pc, #32]	; (80048e8 <HAL_HSEM_FastTake+0x2c>)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3320      	adds	r3, #32
 80048ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ce:	4a07      	ldr	r2, [pc, #28]	; (80048ec <HAL_HSEM_FastTake+0x30>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d101      	bne.n	80048d8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e000      	b.n	80048da <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	58026400 	.word	0x58026400
 80048ec:	80000300 	.word	0x80000300

080048f0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80048fa:	4906      	ldr	r1, [pc, #24]	; (8004914 <HAL_HSEM_Release+0x24>)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	58026400 	.word	0x58026400

08004918 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The SMPS and the LDO are Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004920:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <HAL_PWREx_ConfigSupply+0xac>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	2b06      	cmp	r3, #6
 800492a:	d008      	beq.n	800493e <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800492c:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <HAL_PWREx_ConfigSupply+0xac>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e03e      	b.n	80049bc <HAL_PWREx_ConfigSupply+0xa4>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800493e:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <HAL_PWREx_ConfigSupply+0xac>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004946:	491f      	ldr	r1, [pc, #124]	; (80049c4 <HAL_PWREx_ConfigSupply+0xac>)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4313      	orrs	r3, r2
 800494c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800494e:	f7fc fa47 	bl	8000de0 <HAL_GetTick>
 8004952:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004954:	e009      	b.n	800496a <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8004956:	f7fc fa43 	bl	8000de0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004964:	d901      	bls.n	800496a <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e028      	b.n	80049bc <HAL_PWREx_ConfigSupply+0xa4>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800496a:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <HAL_PWREx_ConfigSupply+0xac>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004976:	d1ee      	bne.n	8004956 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b1e      	cmp	r3, #30
 800497c:	d008      	beq.n	8004990 <HAL_PWREx_ConfigSupply+0x78>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b2e      	cmp	r3, #46	; 0x2e
 8004982:	d005      	beq.n	8004990 <HAL_PWREx_ConfigSupply+0x78>
     (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b1d      	cmp	r3, #29
 8004988:	d002      	beq.n	8004990 <HAL_PWREx_ConfigSupply+0x78>
     (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT) ||
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b2d      	cmp	r3, #45	; 0x2d
 800498e:	d114      	bne.n	80049ba <HAL_PWREx_ConfigSupply+0xa2>
     (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004990:	f7fc fa26 	bl	8000de0 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while(!__HAL_PWR_GET_FLAG(PWR_FLAG_SMPSEXTRDY))
 8004996:	e009      	b.n	80049ac <HAL_PWREx_ConfigSupply+0x94>
    {
      if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8004998:	f7fc fa22 	bl	8000de0 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049a6:	d901      	bls.n	80049ac <HAL_PWREx_ConfigSupply+0x94>
      {
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e007      	b.n	80049bc <HAL_PWREx_ConfigSupply+0xa4>
    while(!__HAL_PWR_GET_FLAG(PWR_FLAG_SMPSEXTRDY))
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_PWREx_ConfigSupply+0xac>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d1ee      	bne.n	8004998 <HAL_PWREx_ConfigSupply+0x80>
      }
    }
  }

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	58024800 	.word	0x58024800

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e3a4      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8087 	beq.w	8004af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e8:	4b9a      	ldr	r3, [pc, #616]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049f2:	4b98      	ldr	r3, [pc, #608]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d007      	beq.n	8004a0e <HAL_RCC_OscConfig+0x46>
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	2b18      	cmp	r3, #24
 8004a02:	d110      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5e>
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d10b      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0e:	4b91      	ldr	r3, [pc, #580]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d06c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x12c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d168      	bne.n	8004af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e37e      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x76>
 8004a30:	4b88      	ldr	r3, [pc, #544]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a87      	ldr	r2, [pc, #540]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	e02e      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x98>
 8004a46:	4b83      	ldr	r3, [pc, #524]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a82      	ldr	r2, [pc, #520]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b80      	ldr	r3, [pc, #512]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a7f      	ldr	r2, [pc, #508]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e01d      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0xbc>
 8004a6a:	4b7a      	ldr	r3, [pc, #488]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a79      	ldr	r2, [pc, #484]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b77      	ldr	r3, [pc, #476]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a76      	ldr	r2, [pc, #472]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a84:	4b73      	ldr	r3, [pc, #460]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a72      	ldr	r2, [pc, #456]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b70      	ldr	r3, [pc, #448]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a6f      	ldr	r2, [pc, #444]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fc f99c 	bl	8000de0 <HAL_GetTick>
 8004aa8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fc f998 	bl	8000de0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e332      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004abe:	4b65      	ldr	r3, [pc, #404]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0xe4>
 8004aca:	e014      	b.n	8004af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fc f988 	bl	8000de0 <HAL_GetTick>
 8004ad0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fc f984 	bl	8000de0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e31e      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ae6:	4b5b      	ldr	r3, [pc, #364]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x10c>
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80b0 	beq.w	8004c64 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b04:	4b53      	ldr	r3, [pc, #332]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b0c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b0e:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <HAL_RCC_OscConfig+0x162>
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b18      	cmp	r3, #24
 8004b1e:	d149      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x1ec>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d144      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <HAL_RCC_OscConfig+0x17a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e2f0      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b42:	4b44      	ldr	r3, [pc, #272]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 0219 	bic.w	r2, r3, #25
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	4941      	ldr	r1, [pc, #260]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fc f944 	bl	8000de0 <HAL_GetTick>
 8004b58:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b5c:	f7fc f940 	bl	8000de0 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e2da      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b6e:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7a:	f7fc f95f 	bl	8000e3c <HAL_GetREVID>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	f241 0303 	movw	r3, #4099	; 0x1003
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d80a      	bhi.n	8004b9e <HAL_RCC_OscConfig+0x1d6>
 8004b88:	4b32      	ldr	r3, [pc, #200]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	031b      	lsls	r3, r3, #12
 8004b96:	492f      	ldr	r1, [pc, #188]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b9c:	e062      	b.n	8004c64 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	061b      	lsls	r3, r3, #24
 8004bac:	4929      	ldr	r1, [pc, #164]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb2:	e057      	b.n	8004c64 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d038      	beq.n	8004c2e <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bbc:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 0219 	bic.w	r2, r3, #25
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4922      	ldr	r1, [pc, #136]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bce:	f7fc f907 	bl	8000de0 <HAL_GetTick>
 8004bd2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd6:	f7fc f903 	bl	8000de0 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e29d      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be8:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf4:	f7fc f922 	bl	8000e3c <HAL_GetREVID>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	f241 0303 	movw	r3, #4099	; 0x1003
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d80a      	bhi.n	8004c18 <HAL_RCC_OscConfig+0x250>
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	031b      	lsls	r3, r3, #12
 8004c10:	4910      	ldr	r1, [pc, #64]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
 8004c16:	e025      	b.n	8004c64 <HAL_RCC_OscConfig+0x29c>
 8004c18:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	490b      	ldr	r1, [pc, #44]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	604b      	str	r3, [r1, #4]
 8004c2c:	e01a      	b.n	8004c64 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <HAL_RCC_OscConfig+0x28c>)
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fc f8d1 	bl	8000de0 <HAL_GetTick>
 8004c3e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c42:	f7fc f8cd 	bl	8000de0 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d903      	bls.n	8004c58 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e267      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
 8004c54:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c58:	4ba0      	ldr	r3, [pc, #640]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ee      	bne.n	8004c42 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 808f 	beq.w	8004d90 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c72:	4b9a      	ldr	r3, [pc, #616]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c7a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c7c:	4b97      	ldr	r3, [pc, #604]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d007      	beq.n	8004c98 <HAL_RCC_OscConfig+0x2d0>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b18      	cmp	r3, #24
 8004c8c:	d12d      	bne.n	8004cea <HAL_RCC_OscConfig+0x322>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d128      	bne.n	8004cea <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c98:	4b90      	ldr	r3, [pc, #576]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x2e8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	2b80      	cmp	r3, #128	; 0x80
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e239      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cb0:	f7fc f8c4 	bl	8000e3c <HAL_GetREVID>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	f241 0303 	movw	r3, #4099	; 0x1003
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d80a      	bhi.n	8004cd4 <HAL_RCC_OscConfig+0x30c>
 8004cbe:	4b87      	ldr	r3, [pc, #540]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	069b      	lsls	r3, r3, #26
 8004ccc:	4983      	ldr	r1, [pc, #524]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cd2:	e05d      	b.n	8004d90 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cd4:	4b81      	ldr	r3, [pc, #516]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	497e      	ldr	r1, [pc, #504]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ce8:	e052      	b.n	8004d90 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d035      	beq.n	8004d5e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cf2:	4b7a      	ldr	r3, [pc, #488]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a79      	ldr	r2, [pc, #484]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fc f86f 	bl	8000de0 <HAL_GetTick>
 8004d02:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d06:	f7fc f86b 	bl	8000de0 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e205      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d18:	4b70      	ldr	r3, [pc, #448]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d24:	f7fc f88a 	bl	8000e3c <HAL_GetREVID>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d80a      	bhi.n	8004d48 <HAL_RCC_OscConfig+0x380>
 8004d32:	4b6a      	ldr	r3, [pc, #424]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	069b      	lsls	r3, r3, #26
 8004d40:	4966      	ldr	r1, [pc, #408]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	604b      	str	r3, [r1, #4]
 8004d46:	e023      	b.n	8004d90 <HAL_RCC_OscConfig+0x3c8>
 8004d48:	4b64      	ldr	r3, [pc, #400]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	061b      	lsls	r3, r3, #24
 8004d56:	4961      	ldr	r1, [pc, #388]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60cb      	str	r3, [r1, #12]
 8004d5c:	e018      	b.n	8004d90 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d5e:	4b5f      	ldr	r3, [pc, #380]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a5e      	ldr	r2, [pc, #376]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6a:	f7fc f839 	bl	8000de0 <HAL_GetTick>
 8004d6e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d72:	f7fc f835 	bl	8000de0 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e1cf      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d84:	4b55      	ldr	r3, [pc, #340]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f0      	bne.n	8004d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d036      	beq.n	8004e0a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d019      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004da4:	4b4d      	ldr	r3, [pc, #308]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da8:	4a4c      	ldr	r2, [pc, #304]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db0:	f7fc f816 	bl	8000de0 <HAL_GetTick>
 8004db4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db8:	f7fc f812 	bl	8000de0 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e1ac      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dca:	4b44      	ldr	r3, [pc, #272]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x3f0>
 8004dd6:	e018      	b.n	8004e0a <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd8:	4b40      	ldr	r3, [pc, #256]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ddc:	4a3f      	ldr	r2, [pc, #252]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de4:	f7fb fffc 	bl	8000de0 <HAL_GetTick>
 8004de8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dec:	f7fb fff8 	bl	8000de0 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e192      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dfe:	4b37      	ldr	r3, [pc, #220]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d036      	beq.n	8004e84 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d019      	beq.n	8004e52 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e1e:	4b2f      	ldr	r3, [pc, #188]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a2e      	ldr	r2, [pc, #184]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e2a:	f7fb ffd9 	bl	8000de0 <HAL_GetTick>
 8004e2e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e32:	f7fb ffd5 	bl	8000de0 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e16f      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e44:	4b25      	ldr	r3, [pc, #148]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <HAL_RCC_OscConfig+0x46a>
 8004e50:	e018      	b.n	8004e84 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e52:	4b22      	ldr	r3, [pc, #136]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a21      	ldr	r2, [pc, #132]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e5e:	f7fb ffbf 	bl	8000de0 <HAL_GetTick>
 8004e62:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e66:	f7fb ffbb 	bl	8000de0 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e155      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e78:	4b18      	ldr	r3, [pc, #96]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8086 	beq.w	8004f9e <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e92:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <HAL_RCC_OscConfig+0x518>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <HAL_RCC_OscConfig+0x518>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e9e:	f7fb ff9f 	bl	8000de0 <HAL_GetTick>
 8004ea2:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ea6:	f7fb ff9b 	bl	8000de0 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b64      	cmp	r3, #100	; 0x64
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e135      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eb8:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <HAL_RCC_OscConfig+0x518>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d10b      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x51c>
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	4a02      	ldr	r2, [pc, #8]	; (8004edc <HAL_RCC_OscConfig+0x514>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed8:	e032      	b.n	8004f40 <HAL_RCC_OscConfig+0x578>
 8004eda:	bf00      	nop
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	58024800 	.word	0x58024800
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10c      	bne.n	8004f06 <HAL_RCC_OscConfig+0x53e>
 8004eec:	4b8f      	ldr	r3, [pc, #572]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	4a8e      	ldr	r2, [pc, #568]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef8:	4b8c      	ldr	r3, [pc, #560]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	4a8b      	ldr	r2, [pc, #556]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004efe:	f023 0304 	bic.w	r3, r3, #4
 8004f02:	6713      	str	r3, [r2, #112]	; 0x70
 8004f04:	e01c      	b.n	8004f40 <HAL_RCC_OscConfig+0x578>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x560>
 8004f0e:	4b87      	ldr	r3, [pc, #540]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	4a86      	ldr	r2, [pc, #536]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004f14:	f043 0304 	orr.w	r3, r3, #4
 8004f18:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1a:	4b84      	ldr	r3, [pc, #528]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	4a83      	ldr	r2, [pc, #524]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6713      	str	r3, [r2, #112]	; 0x70
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0x578>
 8004f28:	4b80      	ldr	r3, [pc, #512]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	4a7f      	ldr	r2, [pc, #508]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	6713      	str	r3, [r2, #112]	; 0x70
 8004f34:	4b7d      	ldr	r3, [pc, #500]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4a7c      	ldr	r2, [pc, #496]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004f3a:	f023 0304 	bic.w	r3, r3, #4
 8004f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d015      	beq.n	8004f74 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f48:	f7fb ff4a 	bl	8000de0 <HAL_GetTick>
 8004f4c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f50:	f7fb ff46 	bl	8000de0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0de      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f66:	4b71      	ldr	r3, [pc, #452]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0ee      	beq.n	8004f50 <HAL_RCC_OscConfig+0x588>
 8004f72:	e014      	b.n	8004f9e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f74:	f7fb ff34 	bl	8000de0 <HAL_GetTick>
 8004f78:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f7c:	f7fb ff30 	bl	8000de0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e0c8      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f92:	4b66      	ldr	r3, [pc, #408]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ee      	bne.n	8004f7c <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80bd 	beq.w	8005122 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fa8:	4b60      	ldr	r3, [pc, #384]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fb0:	2b18      	cmp	r3, #24
 8004fb2:	f000 80b4 	beq.w	800511e <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	f040 8095 	bne.w	80050ea <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc0:	4b5a      	ldr	r3, [pc, #360]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a59      	ldr	r2, [pc, #356]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fb ff08 	bl	8000de0 <HAL_GetTick>
 8004fd0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fb ff04 	bl	8000de0 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e09e      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fe6:	4b51      	ldr	r3, [pc, #324]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff2:	4b4e      	ldr	r3, [pc, #312]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8004ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ff6:	4b4e      	ldr	r3, [pc, #312]	; (8005130 <HAL_RCC_OscConfig+0x768>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005002:	0112      	lsls	r2, r2, #4
 8005004:	430a      	orrs	r2, r1
 8005006:	4949      	ldr	r1, [pc, #292]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005008:	4313      	orrs	r3, r2
 800500a:	628b      	str	r3, [r1, #40]	; 0x28
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	3b01      	subs	r3, #1
 8005012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	3b01      	subs	r3, #1
 800501c:	025b      	lsls	r3, r3, #9
 800501e:	b29b      	uxth	r3, r3
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	3b01      	subs	r3, #1
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005034:	3b01      	subs	r3, #1
 8005036:	061b      	lsls	r3, r3, #24
 8005038:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800503c:	493b      	ldr	r1, [pc, #236]	; (800512c <HAL_RCC_OscConfig+0x764>)
 800503e:	4313      	orrs	r3, r2
 8005040:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005042:	4b3a      	ldr	r3, [pc, #232]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	4a39      	ldr	r2, [pc, #228]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800504e:	4b37      	ldr	r3, [pc, #220]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005052:	4b38      	ldr	r3, [pc, #224]	; (8005134 <HAL_RCC_OscConfig+0x76c>)
 8005054:	4013      	ands	r3, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800505a:	00d2      	lsls	r2, r2, #3
 800505c:	4933      	ldr	r1, [pc, #204]	; (800512c <HAL_RCC_OscConfig+0x764>)
 800505e:	4313      	orrs	r3, r2
 8005060:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005062:	4b32      	ldr	r3, [pc, #200]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	f023 020c 	bic.w	r2, r3, #12
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	492f      	ldr	r1, [pc, #188]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005070:	4313      	orrs	r3, r2
 8005072:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005074:	4b2d      	ldr	r3, [pc, #180]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	f023 0202 	bic.w	r2, r3, #2
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	492a      	ldr	r1, [pc, #168]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005082:	4313      	orrs	r3, r2
 8005084:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	4a28      	ldr	r2, [pc, #160]	; (800512c <HAL_RCC_OscConfig+0x764>)
 800508c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005090:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005092:	4b26      	ldr	r3, [pc, #152]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	4a25      	ldr	r2, [pc, #148]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800509c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800509e:	4b23      	ldr	r3, [pc, #140]	; (800512c <HAL_RCC_OscConfig+0x764>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	4a22      	ldr	r2, [pc, #136]	; (800512c <HAL_RCC_OscConfig+0x764>)
 80050a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80050aa:	4b20      	ldr	r3, [pc, #128]	; (800512c <HAL_RCC_OscConfig+0x764>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	4a1f      	ldr	r2, [pc, #124]	; (800512c <HAL_RCC_OscConfig+0x764>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b6:	4b1d      	ldr	r3, [pc, #116]	; (800512c <HAL_RCC_OscConfig+0x764>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_RCC_OscConfig+0x764>)
 80050bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c2:	f7fb fe8d 	bl	8000de0 <HAL_GetTick>
 80050c6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ca:	f7fb fe89 	bl	8000de0 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e023      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050dc:	4b13      	ldr	r3, [pc, #76]	; (800512c <HAL_RCC_OscConfig+0x764>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x702>
 80050e8:	e01b      	b.n	8005122 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ea:	4b10      	ldr	r3, [pc, #64]	; (800512c <HAL_RCC_OscConfig+0x764>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a0f      	ldr	r2, [pc, #60]	; (800512c <HAL_RCC_OscConfig+0x764>)
 80050f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f6:	f7fb fe73 	bl	8000de0 <HAL_GetTick>
 80050fa:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050fe:	f7fb fe6f 	bl	8000de0 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e009      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCC_OscConfig+0x764>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <HAL_RCC_OscConfig+0x736>
 800511c:	e001      	b.n	8005122 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3728      	adds	r7, #40	; 0x28
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	58024400 	.word	0x58024400
 8005130:	fffffc0c 	.word	0xfffffc0c
 8005134:	ffff0007 	.word	0xffff0007

08005138 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e18d      	b.n	8005468 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800514c:	4b8a      	ldr	r3, [pc, #552]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d910      	bls.n	800517c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515a:	4b87      	ldr	r3, [pc, #540]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f023 020f 	bic.w	r2, r3, #15
 8005162:	4985      	ldr	r1, [pc, #532]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800516a:	4b83      	ldr	r3, [pc, #524]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e175      	b.n	8005468 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	4b7b      	ldr	r3, [pc, #492]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005194:	429a      	cmp	r2, r3
 8005196:	d908      	bls.n	80051aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005198:	4b78      	ldr	r3, [pc, #480]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	4975      	ldr	r1, [pc, #468]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d010      	beq.n	80051d8 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695a      	ldr	r2, [r3, #20]
 80051ba:	4b70      	ldr	r3, [pc, #448]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d908      	bls.n	80051d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051c6:	4b6d      	ldr	r3, [pc, #436]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	496a      	ldr	r1, [pc, #424]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d010      	beq.n	8005206 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	4b64      	ldr	r3, [pc, #400]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d908      	bls.n	8005206 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051f4:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	495e      	ldr	r1, [pc, #376]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005202:	4313      	orrs	r3, r2
 8005204:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d010      	beq.n	8005234 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	4b59      	ldr	r3, [pc, #356]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800521e:	429a      	cmp	r2, r3
 8005220:	d908      	bls.n	8005234 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005222:	4b56      	ldr	r3, [pc, #344]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	4953      	ldr	r1, [pc, #332]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005230:	4313      	orrs	r3, r2
 8005232:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d010      	beq.n	8005262 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	4b4d      	ldr	r3, [pc, #308]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	429a      	cmp	r2, r3
 800524e:	d908      	bls.n	8005262 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005250:	4b4a      	ldr	r3, [pc, #296]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	f023 020f 	bic.w	r2, r3, #15
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4947      	ldr	r1, [pc, #284]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800525e:	4313      	orrs	r3, r2
 8005260:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d055      	beq.n	800531a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800526e:	4b43      	ldr	r3, [pc, #268]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	4940      	ldr	r1, [pc, #256]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800527c:	4313      	orrs	r3, r2
 800527e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d107      	bne.n	8005298 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005288:	4b3c      	ldr	r3, [pc, #240]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d121      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0e7      	b.n	8005468 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052a0:	4b36      	ldr	r3, [pc, #216]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d115      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0db      	b.n	8005468 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d107      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052b8:	4b30      	ldr	r3, [pc, #192]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0cf      	b.n	8005468 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052c8:	4b2c      	ldr	r3, [pc, #176]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0c7      	b.n	8005468 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052d8:	4b28      	ldr	r3, [pc, #160]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f023 0207 	bic.w	r2, r3, #7
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4925      	ldr	r1, [pc, #148]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ea:	f7fb fd79 	bl	8000de0 <HAL_GetTick>
 80052ee:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f2:	f7fb fd75 	bl	8000de0 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e0af      	b.n	8005468 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005308:	4b1c      	ldr	r3, [pc, #112]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	429a      	cmp	r2, r3
 8005318:	d1eb      	bne.n	80052f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d010      	beq.n	8005348 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	4b14      	ldr	r3, [pc, #80]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	429a      	cmp	r2, r3
 8005334:	d208      	bcs.n	8005348 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005336:	4b11      	ldr	r3, [pc, #68]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	490e      	ldr	r1, [pc, #56]	; (800537c <HAL_RCC_ClockConfig+0x244>)
 8005344:	4313      	orrs	r3, r2
 8005346:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d214      	bcs.n	8005380 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b08      	ldr	r3, [pc, #32]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 020f 	bic.w	r2, r3, #15
 800535e:	4906      	ldr	r1, [pc, #24]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b04      	ldr	r3, [pc, #16]	; (8005378 <HAL_RCC_ClockConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d005      	beq.n	8005380 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e077      	b.n	8005468 <HAL_RCC_ClockConfig+0x330>
 8005378:	52002000 	.word	0x52002000
 800537c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d010      	beq.n	80053ae <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	4b37      	ldr	r3, [pc, #220]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005398:	429a      	cmp	r2, r3
 800539a:	d208      	bcs.n	80053ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800539c:	4b34      	ldr	r3, [pc, #208]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	4931      	ldr	r1, [pc, #196]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d010      	beq.n	80053dc <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	4b2c      	ldr	r3, [pc, #176]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d208      	bcs.n	80053dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ca:	4b29      	ldr	r3, [pc, #164]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	4926      	ldr	r1, [pc, #152]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d010      	beq.n	800540a <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	4b20      	ldr	r3, [pc, #128]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d208      	bcs.n	800540a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053f8:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	491a      	ldr	r1, [pc, #104]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 8005406:	4313      	orrs	r3, r2
 8005408:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005422:	429a      	cmp	r2, r3
 8005424:	d208      	bcs.n	8005438 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005426:	4b12      	ldr	r3, [pc, #72]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	490f      	ldr	r1, [pc, #60]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 8005434:	4313      	orrs	r3, r2
 8005436:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005438:	f000 f822 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 800543c:	4601      	mov	r1, r0
 800543e:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <HAL_RCC_ClockConfig+0x338>)
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <HAL_RCC_ClockConfig+0x33c>)
 800544a:	5cd3      	ldrb	r3, [r2, r3]
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	fa21 f303 	lsr.w	r3, r1, r3
 8005454:	4a08      	ldr	r2, [pc, #32]	; (8005478 <HAL_RCC_ClockConfig+0x340>)
 8005456:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005458:	4b08      	ldr	r3, [pc, #32]	; (800547c <HAL_RCC_ClockConfig+0x344>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f7fb fc5b 	bl	8000d18 <HAL_InitTick>
 8005462:	4603      	mov	r3, r0
 8005464:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005466:	7afb      	ldrb	r3, [r7, #11]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	58024400 	.word	0x58024400
 8005474:	08008370 	.word	0x08008370
 8005478:	24040000 	.word	0x24040000
 800547c:	24040014 	.word	0x24040014

08005480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	; 0x24
 8005484:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005486:	4baf      	ldr	r3, [pc, #700]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800548e:	2b18      	cmp	r3, #24
 8005490:	f200 814e 	bhi.w	8005730 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005494:	a201      	add	r2, pc, #4	; (adr r2, 800549c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	08005501 	.word	0x08005501
 80054a0:	08005731 	.word	0x08005731
 80054a4:	08005731 	.word	0x08005731
 80054a8:	08005731 	.word	0x08005731
 80054ac:	08005731 	.word	0x08005731
 80054b0:	08005731 	.word	0x08005731
 80054b4:	08005731 	.word	0x08005731
 80054b8:	08005731 	.word	0x08005731
 80054bc:	08005527 	.word	0x08005527
 80054c0:	08005731 	.word	0x08005731
 80054c4:	08005731 	.word	0x08005731
 80054c8:	08005731 	.word	0x08005731
 80054cc:	08005731 	.word	0x08005731
 80054d0:	08005731 	.word	0x08005731
 80054d4:	08005731 	.word	0x08005731
 80054d8:	08005731 	.word	0x08005731
 80054dc:	0800552d 	.word	0x0800552d
 80054e0:	08005731 	.word	0x08005731
 80054e4:	08005731 	.word	0x08005731
 80054e8:	08005731 	.word	0x08005731
 80054ec:	08005731 	.word	0x08005731
 80054f0:	08005731 	.word	0x08005731
 80054f4:	08005731 	.word	0x08005731
 80054f8:	08005731 	.word	0x08005731
 80054fc:	08005533 	.word	0x08005533
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005500:	4b90      	ldr	r3, [pc, #576]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800550c:	4b8d      	ldr	r3, [pc, #564]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	08db      	lsrs	r3, r3, #3
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	4a8c      	ldr	r2, [pc, #560]	; (8005748 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
 800551c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800551e:	e10a      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005520:	4b89      	ldr	r3, [pc, #548]	; (8005748 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005522:	61bb      	str	r3, [r7, #24]
    break;
 8005524:	e107      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005526:	4b89      	ldr	r3, [pc, #548]	; (800574c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005528:	61bb      	str	r3, [r7, #24]
    break;
 800552a:	e104      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800552c:	4b88      	ldr	r3, [pc, #544]	; (8005750 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800552e:	61bb      	str	r3, [r7, #24]
    break;
 8005530:	e101      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005532:	4b84      	ldr	r3, [pc, #528]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800553c:	4b81      	ldr	r3, [pc, #516]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	091b      	lsrs	r3, r3, #4
 8005542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005546:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005548:	4b7e      	ldr	r3, [pc, #504]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005552:	4b7c      	ldr	r3, [pc, #496]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005556:	08db      	lsrs	r3, r3, #3
 8005558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80da 	beq.w	800572a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d05a      	beq.n	8005632 <HAL_RCC_GetSysClockFreq+0x1b2>
 800557c:	2b01      	cmp	r3, #1
 800557e:	d302      	bcc.n	8005586 <HAL_RCC_GetSysClockFreq+0x106>
 8005580:	2b02      	cmp	r3, #2
 8005582:	d078      	beq.n	8005676 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005584:	e099      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005586:	4b6f      	ldr	r3, [pc, #444]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02d      	beq.n	80055ee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005592:	4b6c      	ldr	r3, [pc, #432]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	08db      	lsrs	r3, r3, #3
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	4a6a      	ldr	r2, [pc, #424]	; (8005748 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800559e:	fa22 f303 	lsr.w	r3, r2, r3
 80055a2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055bc:	4b61      	ldr	r3, [pc, #388]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80055d0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005754 <HAL_RCC_GetSysClockFreq+0x2d4>
 80055d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80055ec:	e087      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005758 <HAL_RCC_GetSysClockFreq+0x2d8>
 80055fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005600:	4b50      	ldr	r3, [pc, #320]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005610:	ed97 6a02 	vldr	s12, [r7, #8]
 8005614:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005754 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800561c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005630:	e065      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	ee07 3a90 	vmov	s15, r3
 8005638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800563c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800575c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005644:	4b3f      	ldr	r3, [pc, #252]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005654:	ed97 6a02 	vldr	s12, [r7, #8]
 8005658:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005754 <HAL_RCC_GetSysClockFreq+0x2d4>
 800565c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800566c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005674:	e043      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005680:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005760 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005688:	4b2e      	ldr	r3, [pc, #184]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005698:	ed97 6a02 	vldr	s12, [r7, #8]
 800569c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005754 <HAL_RCC_GetSysClockFreq+0x2d4>
 80056a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056b8:	e021      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800575c <HAL_RCC_GetSysClockFreq+0x2dc>
 80056c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80056e0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005754 <HAL_RCC_GetSysClockFreq+0x2d4>
 80056e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056fc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80056fe:	4b11      	ldr	r3, [pc, #68]	; (8005744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	0a5b      	lsrs	r3, r3, #9
 8005704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005708:	3301      	adds	r3, #1
 800570a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005716:	edd7 6a07 	vldr	s13, [r7, #28]
 800571a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800571e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005722:	ee17 3a90 	vmov	r3, s15
 8005726:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005728:	e005      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
    break;
 800572e:	e002      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005732:	61bb      	str	r3, [r7, #24]
    break;
 8005734:	bf00      	nop
  }

  return sysclockfreq;
 8005736:	69bb      	ldr	r3, [r7, #24]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3724      	adds	r7, #36	; 0x24
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	58024400 	.word	0x58024400
 8005748:	03d09000 	.word	0x03d09000
 800574c:	003d0900 	.word	0x003d0900
 8005750:	017d7840 	.word	0x017d7840
 8005754:	46000000 	.word	0x46000000
 8005758:	4c742400 	.word	0x4c742400
 800575c:	4a742400 	.word	0x4a742400
 8005760:	4bbebc20 	.word	0x4bbebc20

08005764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005768:	f001 fd22 	bl	80071b0 <HAL_RCCEx_GetD1SysClockFreq>
 800576c:	4601      	mov	r1, r0
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	4a07      	ldr	r2, [pc, #28]	; (8005794 <HAL_RCC_GetHCLKFreq+0x30>)
 8005778:	5cd3      	ldrb	r3, [r2, r3]
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	fa21 f303 	lsr.w	r3, r1, r3
 8005782:	4a05      	ldr	r2, [pc, #20]	; (8005798 <HAL_RCC_GetHCLKFreq+0x34>)
 8005784:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8005786:	4b04      	ldr	r3, [pc, #16]	; (8005798 <HAL_RCC_GetHCLKFreq+0x34>)
 8005788:	681b      	ldr	r3, [r3, #0]
}
 800578a:	4618      	mov	r0, r3
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	58024400 	.word	0x58024400
 8005794:	08008370 	.word	0x08008370
 8005798:	24040004 	.word	0x24040004

0800579c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057a4:	2300      	movs	r3, #0
 80057a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057a8:	2300      	movs	r3, #0
 80057aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d03d      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c0:	d013      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80057c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c6:	d802      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80057cc:	e01f      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80057ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d2:	d013      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80057d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057d8:	d01c      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80057da:	e018      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057dc:	4baf      	ldr	r3, [pc, #700]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	4aae      	ldr	r2, [pc, #696]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80057e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057e8:	e015      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	2102      	movs	r1, #2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 fcf9 	bl	80071e8 <RCCEx_PLL2_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057fa:	e00c      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3324      	adds	r3, #36	; 0x24
 8005800:	2102      	movs	r1, #2
 8005802:	4618      	mov	r0, r3
 8005804:	f001 fda2 	bl	800734c <RCCEx_PLL3_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	75fb      	strb	r3, [r7, #23]
      break;
 8005812:	e000      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005816:	7dfb      	ldrb	r3, [r7, #23]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800581c:	4b9f      	ldr	r3, [pc, #636]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800581e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005820:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005828:	499c      	ldr	r1, [pc, #624]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800582a:	4313      	orrs	r3, r2
 800582c:	650b      	str	r3, [r1, #80]	; 0x50
 800582e:	e001      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d03d      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005844:	2b04      	cmp	r3, #4
 8005846:	d826      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005848:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005865 	.word	0x08005865
 8005854:	08005873 	.word	0x08005873
 8005858:	08005885 	.word	0x08005885
 800585c:	0800589d 	.word	0x0800589d
 8005860:	0800589d 	.word	0x0800589d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005864:	4b8d      	ldr	r3, [pc, #564]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	4a8c      	ldr	r2, [pc, #560]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800586a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800586e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005870:	e015      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3304      	adds	r3, #4
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f001 fcb5 	bl	80071e8 <RCCEx_PLL2_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005882:	e00c      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3324      	adds	r3, #36	; 0x24
 8005888:	2100      	movs	r1, #0
 800588a:	4618      	mov	r0, r3
 800588c:	f001 fd5e 	bl	800734c <RCCEx_PLL3_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005894:	e003      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
      break;
 800589a:	e000      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800589c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058a4:	4b7d      	ldr	r3, [pc, #500]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a8:	f023 0207 	bic.w	r2, r3, #7
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b0:	497a      	ldr	r1, [pc, #488]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	650b      	str	r3, [r1, #80]	; 0x50
 80058b6:	e001      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d03e      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	2b80      	cmp	r3, #128	; 0x80
 80058ce:	d01c      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80058d0:	2b80      	cmp	r3, #128	; 0x80
 80058d2:	d804      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x142>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d00d      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80058dc:	e01e      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80058de:	2bc0      	cmp	r3, #192	; 0xc0
 80058e0:	d01f      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80058e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e6:	d01e      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80058e8:	e018      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ea:	4b6c      	ldr	r3, [pc, #432]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	4a6b      	ldr	r2, [pc, #428]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80058f6:	e017      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 fc72 	bl	80071e8 <RCCEx_PLL2_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005908:	e00e      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3324      	adds	r3, #36	; 0x24
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f001 fd1b 	bl	800734c <RCCEx_PLL3_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800591a:	e005      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	75fb      	strb	r3, [r7, #23]
      break;
 8005920:	e002      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005922:	bf00      	nop
 8005924:	e000      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800592e:	4b5b      	ldr	r3, [pc, #364]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005932:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	4958      	ldr	r1, [pc, #352]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800593c:	4313      	orrs	r3, r2
 800593e:	650b      	str	r3, [r1, #80]	; 0x50
 8005940:	e001      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800594e:	2b00      	cmp	r3, #0
 8005950:	d044      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800595c:	d01f      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800595e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005962:	d805      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800596c:	d00e      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800596e:	e01f      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005970:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005974:	d01f      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005976:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800597a:	d01e      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800597c:	e018      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800597e:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	4a46      	ldr	r2, [pc, #280]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800598a:	e017      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fc28 	bl	80071e8 <RCCEx_PLL2_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800599c:	e00e      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3324      	adds	r3, #36	; 0x24
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fcd1 	bl	800734c <RCCEx_PLL3_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059ae:	e005      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
      break;
 80059b4:	e002      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80059b6:	bf00      	nop
 80059b8:	e000      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80059ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059c2:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059d0:	4932      	ldr	r1, [pc, #200]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	658b      	str	r3, [r1, #88]	; 0x58
 80059d6:	e001      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	7dfb      	ldrb	r3, [r7, #23]
 80059da:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d044      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f2:	d01f      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80059f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f8:	d805      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80059fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a02:	d00e      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a04:	e01f      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005a06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a0a:	d01f      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a10:	d01e      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005a12:	e018      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a14:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a20:	e017      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3304      	adds	r3, #4
 8005a26:	2100      	movs	r1, #0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 fbdd 	bl	80071e8 <RCCEx_PLL2_Config>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a32:	e00e      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3324      	adds	r3, #36	; 0x24
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 fc86 	bl	800734c <RCCEx_PLL3_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a44:	e005      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	75fb      	strb	r3, [r7, #23]
      break;
 8005a4a:	e002      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005a4c:	bf00      	nop
 8005a4e:	e000      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a58:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a66:	490d      	ldr	r1, [pc, #52]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	658b      	str	r3, [r1, #88]	; 0x58
 8005a6c:	e001      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
 8005a70:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d035      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d00c      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005a86:	2b10      	cmp	r3, #16
 8005a88:	d802      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d01b      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005a8e:	e017      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d00c      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005a94:	2b30      	cmp	r3, #48	; 0x30
 8005a96:	d018      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005a98:	e012      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005a9a:	bf00      	nop
 8005a9c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa0:	4baf      	ldr	r3, [pc, #700]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	4aae      	ldr	r2, [pc, #696]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005aac:	e00e      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 fb97 	bl	80071e8 <RCCEx_PLL2_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005abe:	e005      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac4:	e002      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005ac6:	bf00      	nop
 8005ac8:	e000      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ad2:	4ba3      	ldr	r3, [pc, #652]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ade:	49a0      	ldr	r1, [pc, #640]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ae4:	e001      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d042      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afe:	d01f      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b04:	d805      	bhi.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0e:	d00e      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005b10:	e01f      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005b12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b16:	d01f      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b1c:	d01e      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005b1e:	e018      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b20:	4b8f      	ldr	r3, [pc, #572]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	4a8e      	ldr	r2, [pc, #568]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b2c:	e017      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3304      	adds	r3, #4
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 fb57 	bl	80071e8 <RCCEx_PLL2_Config>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b3e:	e00e      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3324      	adds	r3, #36	; 0x24
 8005b44:	2100      	movs	r1, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 fc00 	bl	800734c <RCCEx_PLL3_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b50:	e005      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
      break;
 8005b56:	e002      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005b58:	bf00      	nop
 8005b5a:	e000      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d109      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b64:	4b7e      	ldr	r3, [pc, #504]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b68:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	497b      	ldr	r1, [pc, #492]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	650b      	str	r3, [r1, #80]	; 0x50
 8005b76:	e001      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
 8005b7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d042      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b90:	d01b      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b96:	d805      	bhi.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d022      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005ba2:	e01b      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005ba4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ba8:	d01d      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005baa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bae:	d01c      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005bb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bb4:	d01b      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005bb6:	e011      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 fb12 	bl	80071e8 <RCCEx_PLL2_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005bc8:	e012      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3324      	adds	r3, #36	; 0x24
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 fbbb 	bl	800734c <RCCEx_PLL3_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005bda:	e009      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]
      break;
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005be2:	bf00      	nop
 8005be4:	e004      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005be6:	bf00      	nop
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bf6:	4b5a      	ldr	r3, [pc, #360]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c02:	4957      	ldr	r1, [pc, #348]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	650b      	str	r3, [r1, #80]	; 0x50
 8005c08:	e001      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d044      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c24:	d01b      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c2a:	d805      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d022      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c34:	d00a      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005c36:	e01b      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3c:	d01d      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c42:	d01c      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005c44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c48:	d01b      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005c4a:	e011      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	2101      	movs	r1, #1
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 fac8 	bl	80071e8 <RCCEx_PLL2_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c5c:	e012      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3324      	adds	r3, #36	; 0x24
 8005c62:	2101      	movs	r1, #1
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 fb71 	bl	800734c <RCCEx_PLL3_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c6e:	e009      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	75fb      	strb	r3, [r7, #23]
      break;
 8005c74:	e006      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005c76:	bf00      	nop
 8005c78:	e004      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005c7a:	bf00      	nop
 8005c7c:	e002      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e000      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c8a:	4b35      	ldr	r3, [pc, #212]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c98:	4931      	ldr	r1, [pc, #196]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	658b      	str	r3, [r1, #88]	; 0x58
 8005c9e:	e001      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02d      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cb8:	d005      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cbe:	d009      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005cc4:	e00f      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc6:	4b26      	ldr	r3, [pc, #152]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	4a25      	ldr	r2, [pc, #148]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005cd2:	e00c      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	2101      	movs	r1, #1
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 fa84 	bl	80071e8 <RCCEx_PLL2_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ce4:	e003      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cea:	e000      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d109      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cf4:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d00:	4917      	ldr	r1, [pc, #92]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	650b      	str	r3, [r1, #80]	; 0x50
 8005d06:	e001      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d035      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d81b      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d65 	.word	0x08005d65
 8005d2c:	08005d39 	.word	0x08005d39
 8005d30:	08005d47 	.word	0x08005d47
 8005d34:	08005d65 	.word	0x08005d65
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d38:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	4a08      	ldr	r2, [pc, #32]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d44:	e00f      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fa4b 	bl	80071e8 <RCCEx_PLL2_Config>
 8005d52:	4603      	mov	r3, r0
 8005d54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d56:	e006      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5c:	e003      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005d5e:	bf00      	nop
 8005d60:	58024400 	.word	0x58024400
      break;
 8005d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d6c:	4bba      	ldr	r3, [pc, #744]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d70:	f023 0203 	bic.w	r2, r3, #3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	49b7      	ldr	r1, [pc, #732]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d7e:	e001      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8086 	beq.w	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d92:	4bb2      	ldr	r3, [pc, #712]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4ab1      	ldr	r2, [pc, #708]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d9e:	f7fb f81f 	bl	8000de0 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005da4:	e009      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da6:	f7fb f81b 	bl	8000de0 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b64      	cmp	r3, #100	; 0x64
 8005db2:	d902      	bls.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	75fb      	strb	r3, [r7, #23]
        break;
 8005db8:	e005      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dba:	4ba8      	ldr	r3, [pc, #672]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0ef      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d166      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005dcc:	4ba2      	ldr	r3, [pc, #648]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dd6:	4053      	eors	r3, r2
 8005dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d013      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005de0:	4b9d      	ldr	r3, [pc, #628]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dea:	4b9b      	ldr	r3, [pc, #620]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	4a9a      	ldr	r2, [pc, #616]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005df6:	4b98      	ldr	r3, [pc, #608]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	4a97      	ldr	r2, [pc, #604]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e00:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e02:	4a95      	ldr	r2, [pc, #596]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e12:	d115      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e14:	f7fa ffe4 	bl	8000de0 <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e1a:	e00b      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1c:	f7fa ffe0 	bl	8000de0 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d902      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	75fb      	strb	r3, [r7, #23]
            break;
 8005e32:	e005      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e34:	4b88      	ldr	r3, [pc, #544]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ed      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d126      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e54:	d10d      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005e56:	4b80      	ldr	r3, [pc, #512]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e64:	0919      	lsrs	r1, r3, #4
 8005e66:	4b7e      	ldr	r3, [pc, #504]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005e68:	400b      	ands	r3, r1
 8005e6a:	497b      	ldr	r1, [pc, #492]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	610b      	str	r3, [r1, #16]
 8005e70:	e005      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005e72:	4b79      	ldr	r3, [pc, #484]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	4a78      	ldr	r2, [pc, #480]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e7c:	6113      	str	r3, [r2, #16]
 8005e7e:	4b76      	ldr	r3, [pc, #472]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8c:	4972      	ldr	r1, [pc, #456]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	670b      	str	r3, [r1, #112]	; 0x70
 8005e92:	e004      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	75bb      	strb	r3, [r7, #22]
 8005e98:	e001      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d07d      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eae:	2b28      	cmp	r3, #40	; 0x28
 8005eb0:	d866      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005f87 	.word	0x08005f87
 8005ebc:	08005f81 	.word	0x08005f81
 8005ec0:	08005f81 	.word	0x08005f81
 8005ec4:	08005f81 	.word	0x08005f81
 8005ec8:	08005f81 	.word	0x08005f81
 8005ecc:	08005f81 	.word	0x08005f81
 8005ed0:	08005f81 	.word	0x08005f81
 8005ed4:	08005f81 	.word	0x08005f81
 8005ed8:	08005f5d 	.word	0x08005f5d
 8005edc:	08005f81 	.word	0x08005f81
 8005ee0:	08005f81 	.word	0x08005f81
 8005ee4:	08005f81 	.word	0x08005f81
 8005ee8:	08005f81 	.word	0x08005f81
 8005eec:	08005f81 	.word	0x08005f81
 8005ef0:	08005f81 	.word	0x08005f81
 8005ef4:	08005f81 	.word	0x08005f81
 8005ef8:	08005f6f 	.word	0x08005f6f
 8005efc:	08005f81 	.word	0x08005f81
 8005f00:	08005f81 	.word	0x08005f81
 8005f04:	08005f81 	.word	0x08005f81
 8005f08:	08005f81 	.word	0x08005f81
 8005f0c:	08005f81 	.word	0x08005f81
 8005f10:	08005f81 	.word	0x08005f81
 8005f14:	08005f81 	.word	0x08005f81
 8005f18:	08005f87 	.word	0x08005f87
 8005f1c:	08005f81 	.word	0x08005f81
 8005f20:	08005f81 	.word	0x08005f81
 8005f24:	08005f81 	.word	0x08005f81
 8005f28:	08005f81 	.word	0x08005f81
 8005f2c:	08005f81 	.word	0x08005f81
 8005f30:	08005f81 	.word	0x08005f81
 8005f34:	08005f81 	.word	0x08005f81
 8005f38:	08005f87 	.word	0x08005f87
 8005f3c:	08005f81 	.word	0x08005f81
 8005f40:	08005f81 	.word	0x08005f81
 8005f44:	08005f81 	.word	0x08005f81
 8005f48:	08005f81 	.word	0x08005f81
 8005f4c:	08005f81 	.word	0x08005f81
 8005f50:	08005f81 	.word	0x08005f81
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	08005f87 	.word	0x08005f87
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	2101      	movs	r1, #1
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 f940 	bl	80071e8 <RCCEx_PLL2_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f6c:	e00c      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3324      	adds	r3, #36	; 0x24
 8005f72:	2101      	movs	r1, #1
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 f9e9 	bl	800734c <RCCEx_PLL3_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005f7e:	e003      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	75fb      	strb	r3, [r7, #23]
      break;
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f8e:	4b32      	ldr	r3, [pc, #200]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9a:	492f      	ldr	r1, [pc, #188]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	654b      	str	r3, [r1, #84]	; 0x54
 8005fa0:	e001      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
 8005fa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d037      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d820      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08006003 	.word	0x08006003
 8005fc4:	08005fd9 	.word	0x08005fd9
 8005fc8:	08005feb 	.word	0x08005feb
 8005fcc:	08006003 	.word	0x08006003
 8005fd0:	08006003 	.word	0x08006003
 8005fd4:	08006003 	.word	0x08006003
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	2101      	movs	r1, #1
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 f902 	bl	80071e8 <RCCEx_PLL2_Config>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005fe8:	e00c      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3324      	adds	r3, #36	; 0x24
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 f9ab 	bl	800734c <RCCEx_PLL3_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005ffa:	e003      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8006000:	e000      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800600c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600e:	f023 0207 	bic.w	r2, r3, #7
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006016:	4910      	ldr	r1, [pc, #64]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006018:	4313      	orrs	r3, r2
 800601a:	654b      	str	r3, [r1, #84]	; 0x54
 800601c:	e001      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601e:	7dfb      	ldrb	r3, [r7, #23]
 8006020:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0304 	and.w	r3, r3, #4
 800602a:	2b00      	cmp	r3, #0
 800602c:	d040      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006034:	2b05      	cmp	r3, #5
 8006036:	d827      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006038:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	0800608f 	.word	0x0800608f
 8006044:	08006065 	.word	0x08006065
 8006048:	08006077 	.word	0x08006077
 800604c:	0800608f 	.word	0x0800608f
 8006050:	0800608f 	.word	0x0800608f
 8006054:	0800608f 	.word	0x0800608f
 8006058:	58024400 	.word	0x58024400
 800605c:	58024800 	.word	0x58024800
 8006060:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3304      	adds	r3, #4
 8006068:	2101      	movs	r1, #1
 800606a:	4618      	mov	r0, r3
 800606c:	f001 f8bc 	bl	80071e8 <RCCEx_PLL2_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006074:	e00c      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3324      	adds	r3, #36	; 0x24
 800607a:	2101      	movs	r1, #1
 800607c:	4618      	mov	r0, r3
 800607e:	f001 f965 	bl	800734c <RCCEx_PLL3_Config>
 8006082:	4603      	mov	r3, r0
 8006084:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006086:	e003      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	75fb      	strb	r3, [r7, #23]
      break;
 800608c:	e000      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800608e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006096:	4bb3      	ldr	r3, [pc, #716]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609a:	f023 0207 	bic.w	r2, r3, #7
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a4:	49af      	ldr	r1, [pc, #700]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	658b      	str	r3, [r1, #88]	; 0x58
 80060aa:	e001      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
 80060ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d044      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c6:	d01b      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80060c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060cc:	d805      	bhi.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d022      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80060d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060d6:	d00a      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x952>
 80060d8:	e01b      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80060da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060de:	d01d      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x980>
 80060e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060e4:	d01c      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80060e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060ea:	d01b      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80060ec:	e011      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3304      	adds	r3, #4
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 f877 	bl	80071e8 <RCCEx_PLL2_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80060fe:	e012      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3324      	adds	r3, #36	; 0x24
 8006104:	2102      	movs	r1, #2
 8006106:	4618      	mov	r0, r3
 8006108:	f001 f920 	bl	800734c <RCCEx_PLL3_Config>
 800610c:	4603      	mov	r3, r0
 800610e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006110:	e009      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
      break;
 8006116:	e006      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006118:	bf00      	nop
 800611a:	e004      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800611c:	bf00      	nop
 800611e:	e002      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006120:	bf00      	nop
 8006122:	e000      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800612c:	4b8d      	ldr	r3, [pc, #564]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800613a:	498a      	ldr	r1, [pc, #552]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800613c:	4313      	orrs	r3, r2
 800613e:	654b      	str	r3, [r1, #84]	; 0x54
 8006140:	e001      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d044      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800615c:	d01b      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800615e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006162:	d805      	bhi.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d022      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800616e:	e01b      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006174:	d01d      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006176:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800617a:	d01c      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800617c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006180:	d01b      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006182:	e011      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3304      	adds	r3, #4
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f001 f82c 	bl	80071e8 <RCCEx_PLL2_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006194:	e012      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3324      	adds	r3, #36	; 0x24
 800619a:	2102      	movs	r1, #2
 800619c:	4618      	mov	r0, r3
 800619e:	f001 f8d5 	bl	800734c <RCCEx_PLL3_Config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061a6:	e009      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	75fb      	strb	r3, [r7, #23]
      break;
 80061ac:	e006      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80061ae:	bf00      	nop
 80061b0:	e004      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80061b2:	bf00      	nop
 80061b4:	e002      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80061b6:	bf00      	nop
 80061b8:	e000      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80061ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061c2:	4b68      	ldr	r3, [pc, #416]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80061c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061d0:	4964      	ldr	r1, [pc, #400]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	658b      	str	r3, [r1, #88]	; 0x58
 80061d6:	e001      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d044      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f2:	d01b      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80061f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f8:	d805      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d022      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80061fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006202:	d00a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006204:	e01b      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800620a:	d01d      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800620c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006210:	d01c      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006212:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006216:	d01b      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006218:	e011      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3304      	adds	r3, #4
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f000 ffe1 	bl	80071e8 <RCCEx_PLL2_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800622a:	e012      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3324      	adds	r3, #36	; 0x24
 8006230:	2102      	movs	r1, #2
 8006232:	4618      	mov	r0, r3
 8006234:	f001 f88a 	bl	800734c <RCCEx_PLL3_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800623c:	e009      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	75fb      	strb	r3, [r7, #23]
      break;
 8006242:	e006      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006244:	bf00      	nop
 8006246:	e004      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006248:	bf00      	nop
 800624a:	e002      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800624c:	bf00      	nop
 800624e:	e000      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006258:	4b42      	ldr	r3, [pc, #264]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800625a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006266:	493f      	ldr	r1, [pc, #252]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006268:	4313      	orrs	r3, r2
 800626a:	658b      	str	r3, [r1, #88]	; 0x58
 800626c:	e001      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01b      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006288:	d10b      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3324      	adds	r3, #36	; 0x24
 800628e:	2102      	movs	r1, #2
 8006290:	4618      	mov	r0, r3
 8006292:	f001 f85b 	bl	800734c <RCCEx_PLL3_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	75bb      	strb	r3, [r7, #22]
 80062a0:	e009      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062a2:	4b30      	ldr	r3, [pc, #192]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80062a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b0:	492c      	ldr	r1, [pc, #176]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0310 	and.w	r3, r3, #16
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01b      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062cc:	d10b      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3324      	adds	r3, #36	; 0x24
 80062d2:	2102      	movs	r1, #2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 f839 	bl	800734c <RCCEx_PLL3_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	75bb      	strb	r3, [r7, #22]
 80062e4:	e009      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062e6:	4b1f      	ldr	r3, [pc, #124]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80062e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f4:	491b      	ldr	r1, [pc, #108]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d032      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006310:	d00d      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8006312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006316:	d016      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d111      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f000 ff60 	bl	80071e8 <RCCEx_PLL2_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800632c:	e00c      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3324      	adds	r3, #36	; 0x24
 8006332:	2102      	movs	r1, #2
 8006334:	4618      	mov	r0, r3
 8006336:	f001 f809 	bl	800734c <RCCEx_PLL3_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800633e:	e003      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	75fb      	strb	r3, [r7, #23]
      break;
 8006344:	e000      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8006346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10c      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800634e:	4b05      	ldr	r3, [pc, #20]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006352:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800635c:	4901      	ldr	r1, [pc, #4]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800635e:	4313      	orrs	r3, r2
 8006360:	658b      	str	r3, [r1, #88]	; 0x58
 8006362:	e003      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8006364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d02f      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800637e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006382:	d00c      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006384:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006388:	d015      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800638a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800638e:	d10f      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006390:	4b79      	ldr	r3, [pc, #484]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	4a78      	ldr	r2, [pc, #480]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800639a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800639c:	e00c      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3324      	adds	r3, #36	; 0x24
 80063a2:	2101      	movs	r1, #1
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 ffd1 	bl	800734c <RCCEx_PLL3_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80063ae:	e003      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	75fb      	strb	r3, [r7, #23]
      break;
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 80063b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063be:	4b6e      	ldr	r3, [pc, #440]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063cc:	496a      	ldr	r1, [pc, #424]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	654b      	str	r3, [r1, #84]	; 0x54
 80063d2:	e001      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d029      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 80063ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f0:	d007      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80063f2:	e00f      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f4:	4b60      	ldr	r3, [pc, #384]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	4a5f      	ldr	r2, [pc, #380]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80063fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006400:	e00b      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3304      	adds	r3, #4
 8006406:	2102      	movs	r1, #2
 8006408:	4618      	mov	r0, r3
 800640a:	f000 feed 	bl	80071e8 <RCCEx_PLL2_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006412:	e002      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	75fb      	strb	r3, [r7, #23]
      break;
 8006418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006420:	4b55      	ldr	r3, [pc, #340]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006424:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800642c:	4952      	ldr	r1, [pc, #328]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800642e:	4313      	orrs	r3, r2
 8006430:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006432:	e001      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006434:	7dfb      	ldrb	r3, [r7, #23]
 8006436:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3324      	adds	r3, #36	; 0x24
 8006448:	2102      	movs	r1, #2
 800644a:	4618      	mov	r0, r3
 800644c:	f000 ff7e 	bl	800734c <RCCEx_PLL3_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d02f      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646e:	d00c      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8006470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006474:	d802      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d011      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800647a:	e00d      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 800647c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006480:	d00f      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006486:	d00e      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8006488:	e006      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800648a:	4b3b      	ldr	r3, [pc, #236]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	4a3a      	ldr	r2, [pc, #232]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006494:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006496:	e007      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
      break;
 800649c:	e004      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800649e:	bf00      	nop
 80064a0:	e002      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80064a2:	bf00      	nop
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80064a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064ae:	4b32      	ldr	r3, [pc, #200]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80064b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ba:	492f      	ldr	r1, [pc, #188]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	654b      	str	r3, [r1, #84]	; 0x54
 80064c0:	e001      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064d2:	4b29      	ldr	r3, [pc, #164]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80064d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4926      	ldr	r1, [pc, #152]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80064f0:	4b21      	ldr	r3, [pc, #132]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064fe:	491e      	ldr	r1, [pc, #120]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006500:	4313      	orrs	r3, r2
 8006502:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006510:	4b19      	ldr	r3, [pc, #100]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006514:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800651c:	4916      	ldr	r1, [pc, #88]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800651e:	4313      	orrs	r3, r2
 8006520:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00d      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	4a11      	ldr	r2, [pc, #68]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006534:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006538:	6113      	str	r3, [r2, #16]
 800653a:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006544:	490c      	ldr	r1, [pc, #48]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	da08      	bge.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006556:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655e:	4906      	ldr	r1, [pc, #24]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006560:	4313      	orrs	r3, r2
 8006562:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006564:	7dbb      	ldrb	r3, [r7, #22]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	58024400 	.word	0x58024400

0800657c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b090      	sub	sp, #64	; 0x40
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800658a:	d150      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800658c:	4ba1      	ldr	r3, [pc, #644]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800658e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	2b04      	cmp	r3, #4
 800659a:	d844      	bhi.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065b9 	.word	0x080065b9
 80065a8:	080065c9 	.word	0x080065c9
 80065ac:	080065d9 	.word	0x080065d9
 80065b0:	08006621 	.word	0x08006621
 80065b4:	080065e9 	.word	0x080065e9
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fcab 	bl	8006f18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065c6:	e200      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c8:	f107 0318 	add.w	r3, r7, #24
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fa0b 	bl	80069e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065d6:	e1f8      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065d8:	f107 030c 	add.w	r3, r7, #12
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fb4f 	bl	8006c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065e6:	e1f0      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80065e8:	4b8a      	ldr	r3, [pc, #552]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065f0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d102      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80065f8:	4b87      	ldr	r3, [pc, #540]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80065fc:	e1e5      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006604:	d102      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006606:	4b85      	ldr	r3, [pc, #532]	; (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800660a:	e1de      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 800660c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006612:	d102      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006614:	4b82      	ldr	r3, [pc, #520]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006618:	e1d7      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800661e:	e1d4      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006620:	4b80      	ldr	r3, [pc, #512]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006624:	e1d1      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800662a:	bf00      	nop
 800662c:	e1cd      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006634:	d14f      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006636:	4b77      	ldr	r3, [pc, #476]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800663e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d01c      	beq.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006646:	2b80      	cmp	r3, #128	; 0x80
 8006648:	d804      	bhi.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	d00e      	beq.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006652:	e03c      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006654:	2bc0      	cmp	r3, #192	; 0xc0
 8006656:	d037      	beq.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665c:	d018      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800665e:	e036      	b.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fc57 	bl	8006f18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800666e:	e1ac      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006670:	f107 0318 	add.w	r3, r7, #24
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f9b7 	bl	80069e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800667e:	e1a4      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006680:	f107 030c 	add.w	r3, r7, #12
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fafb 	bl	8006c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800668e:	e19c      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006690:	4b60      	ldr	r3, [pc, #384]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006698:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80066a0:	4b5d      	ldr	r3, [pc, #372]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80066a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80066a4:	e191      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80066a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ac:	d102      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80066ae:	4b5b      	ldr	r3, [pc, #364]	; (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80066b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066b2:	e18a      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80066b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ba:	d102      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80066bc:	4b58      	ldr	r3, [pc, #352]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066c0:	e183      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066c6:	e180      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80066c8:	4b56      	ldr	r3, [pc, #344]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066cc:	e17d      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066d2:	bf00      	nop
 80066d4:	e179      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066dc:	d153      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80066de:	4b4d      	ldr	r3, [pc, #308]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80066e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ee:	d01f      	beq.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80066f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066f4:	d805      	bhi.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80066fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066fe:	d00f      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006700:	e03d      	b.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006702:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006706:	d037      	beq.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006708:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800670c:	d018      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800670e:	e036      	b.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fbff 	bl	8006f18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800671e:	e154      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006720:	f107 0318 	add.w	r3, r7, #24
 8006724:	4618      	mov	r0, r3
 8006726:	f000 f95f 	bl	80069e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672e:	e14c      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006730:	f107 030c 	add.w	r3, r7, #12
 8006734:	4618      	mov	r0, r3
 8006736:	f000 faa3 	bl	8006c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800673e:	e144      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006740:	4b34      	ldr	r3, [pc, #208]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006744:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006748:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800674a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006750:	4b31      	ldr	r3, [pc, #196]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006754:	e139      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800675c:	d102      	bne.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800675e:	4b2f      	ldr	r3, [pc, #188]	; (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006762:	e132      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800676a:	d102      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800676c:	4b2c      	ldr	r3, [pc, #176]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800676e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006770:	e12b      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006776:	e128      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006778:	4b2a      	ldr	r3, [pc, #168]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800677c:	e125      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800677e:	2300      	movs	r3, #0
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006782:	bf00      	nop
 8006784:	e121      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800678c:	d15d      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800678e:	4b21      	ldr	r3, [pc, #132]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006792:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006796:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800679e:	d01f      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80067a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067a4:	d805      	bhi.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80067aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ae:	d00f      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80067b0:	e047      	b.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80067b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067b6:	d041      	beq.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80067b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067bc:	d018      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80067be:	e040      	b.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fba7 	bl	8006f18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ce:	e0fc      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d0:	f107 0318 	add.w	r3, r7, #24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 f907 	bl	80069e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067de:	e0f4      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067e0:	f107 030c 	add.w	r3, r7, #12
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fa4b 	bl	8006c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ee:	e0ec      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067f0:	4b08      	ldr	r3, [pc, #32]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80067fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006802:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006804:	e0e1      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800680c:	d10c      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800680e:	4b03      	ldr	r3, [pc, #12]	; (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006812:	e0da      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006814:	58024400 	.word	0x58024400
 8006818:	03d09000 	.word	0x03d09000
 800681c:	003d0900 	.word	0x003d0900
 8006820:	017d7840 	.word	0x017d7840
 8006824:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682e:	d102      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8006830:	4b68      	ldr	r3, [pc, #416]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006834:	e0c9      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800683a:	e0c6      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800683c:	4b66      	ldr	r3, [pc, #408]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006840:	e0c3      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006846:	bf00      	nop
 8006848:	e0bf      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006850:	d153      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006852:	4b62      	ldr	r3, [pc, #392]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006856:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800685a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006862:	d01f      	beq.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006868:	d805      	bhi.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006872:	d00f      	beq.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006874:	e03d      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8006876:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800687a:	d037      	beq.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800687c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006880:	d018      	beq.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006882:	e036      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fb45 	bl	8006f18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006892:	e09a      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006894:	f107 0318 	add.w	r3, r7, #24
 8006898:	4618      	mov	r0, r3
 800689a:	f000 f8a5 	bl	80069e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068a2:	e092      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a4:	f107 030c 	add.w	r3, r7, #12
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f9e9 	bl	8006c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068b2:	e08a      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068b4:	4b49      	ldr	r3, [pc, #292]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80068b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80068be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80068c4:	4b46      	ldr	r3, [pc, #280]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80068c8:	e07f      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80068ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068d0:	d102      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80068d2:	4b44      	ldr	r3, [pc, #272]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d6:	e078      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068de:	d102      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80068e0:	4b3c      	ldr	r3, [pc, #240]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068e4:	e071      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068ea:	e06e      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80068ec:	4b3a      	ldr	r3, [pc, #232]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068f0:	e06b      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 80068f2:	2300      	movs	r3, #0
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068f6:	bf00      	nop
 80068f8:	e067      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006900:	d13d      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006902:	4b36      	ldr	r3, [pc, #216]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800690a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006912:	d00c      	beq.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006918:	d011      	beq.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d12b      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800691e:	f107 0318 	add.w	r3, r7, #24
 8006922:	4618      	mov	r0, r3
 8006924:	f000 f860 	bl	80069e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800692c:	e04d      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800692e:	f107 030c 	add.w	r3, r7, #12
 8006932:	4618      	mov	r0, r3
 8006934:	f000 f9a4 	bl	8006c80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800693c:	e045      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800693e:	4b27      	ldr	r3, [pc, #156]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006942:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006946:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800694e:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006952:	e03a      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800695a:	d102      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800695c:	4b21      	ldr	r3, [pc, #132]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006960:	e033      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006968:	d102      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800696a:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 800696c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800696e:	e02c      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006974:	e029      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800697a:	bf00      	nop
 800697c:	e025      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006984:	d11f      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006986:	4b15      	ldr	r3, [pc, #84]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800698e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699a:	d008      	beq.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800699c:	e00f      	b.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800699e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fab8 	bl	8006f18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ac:	e00d      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ae:	f107 0318 	add.w	r3, r7, #24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 f818 	bl	80069e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069bc:	e005      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069c2:	bf00      	nop
 80069c4:	e001      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3740      	adds	r7, #64	; 0x40
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	017d7840 	.word	0x017d7840
 80069d8:	00bb8000 	.word	0x00bb8000
 80069dc:	58024400 	.word	0x58024400
 80069e0:	03d09000 	.word	0x03d09000
 80069e4:	003d0900 	.word	0x003d0900

080069e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b089      	sub	sp, #36	; 0x24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069f0:	4b9d      	ldr	r3, [pc, #628]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80069fa:	4b9b      	ldr	r3, [pc, #620]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	0b1b      	lsrs	r3, r3, #12
 8006a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a04:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8006a06:	4b98      	ldr	r3, [pc, #608]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006a10:	4b95      	ldr	r3, [pc, #596]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a14:	08db      	lsrs	r3, r3, #3
 8006a16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	fb02 f303 	mul.w	r3, r2, r3
 8006a20:	ee07 3a90 	vmov	s15, r3
 8006a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 810a 	beq.w	8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d05a      	beq.n	8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d302      	bcc.n	8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d078      	beq.n	8006b34 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8006a42:	e099      	b.n	8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a44:	4b88      	ldr	r3, [pc, #544]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0320 	and.w	r3, r3, #32
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d02d      	beq.n	8006aac <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a50:	4b85      	ldr	r3, [pc, #532]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	08db      	lsrs	r3, r3, #3
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	4a84      	ldr	r2, [pc, #528]	; (8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a60:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	ee07 3a90 	vmov	s15, r3
 8006a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7a:	4b7b      	ldr	r3, [pc, #492]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006aaa:	e087      	b.n	8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c74 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abe:	4b6a      	ldr	r3, [pc, #424]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aee:	e065      	b.n	8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b02:	4b59      	ldr	r3, [pc, #356]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b32:	e043      	b.n	8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b46:	4b48      	ldr	r3, [pc, #288]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b76:	e021      	b.n	8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8a:	4b37      	ldr	r3, [pc, #220]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006bbc:	4b2a      	ldr	r3, [pc, #168]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	0a5b      	lsrs	r3, r3, #9
 8006bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be2:	ee17 2a90 	vmov	r2, s15
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006bea:	4b1f      	ldr	r3, [pc, #124]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	0c1b      	lsrs	r3, r3, #16
 8006bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c04:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c10:	ee17 2a90 	vmov	r2, s15
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006c18:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	0e1b      	lsrs	r3, r3, #24
 8006c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c3e:	ee17 2a90 	vmov	r2, s15
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c46:	e008      	b.n	8006c5a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	609a      	str	r2, [r3, #8]
}
 8006c5a:	bf00      	nop
 8006c5c:	3724      	adds	r7, #36	; 0x24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	03d09000 	.word	0x03d09000
 8006c70:	46000000 	.word	0x46000000
 8006c74:	4c742400 	.word	0x4c742400
 8006c78:	4a742400 	.word	0x4a742400
 8006c7c:	4bbebc20 	.word	0x4bbebc20

08006c80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b089      	sub	sp, #36	; 0x24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c88:	4b9d      	ldr	r3, [pc, #628]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	f003 0303 	and.w	r3, r3, #3
 8006c90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006c92:	4b9b      	ldr	r3, [pc, #620]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	0d1b      	lsrs	r3, r3, #20
 8006c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c9c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8006c9e:	4b98      	ldr	r3, [pc, #608]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca6:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006ca8:	4b95      	ldr	r3, [pc, #596]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cac:	08db      	lsrs	r3, r3, #3
 8006cae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	fb02 f303 	mul.w	r3, r2, r3
 8006cb8:	ee07 3a90 	vmov	s15, r3
 8006cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 810a 	beq.w	8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d05a      	beq.n	8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d302      	bcc.n	8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d078      	beq.n	8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8006cda:	e099      	b.n	8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cdc:	4b88      	ldr	r3, [pc, #544]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02d      	beq.n	8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ce8:	4b85      	ldr	r3, [pc, #532]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	08db      	lsrs	r3, r3, #3
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	4a84      	ldr	r2, [pc, #528]	; (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	ee07 3a90 	vmov	s15, r3
 8006d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d12:	4b7b      	ldr	r3, [pc, #492]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d42:	e087      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b6a      	ldr	r3, [pc, #424]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d86:	e065      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b59      	ldr	r3, [pc, #356]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dca:	e043      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dde:	4b48      	ldr	r3, [pc, #288]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006df2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e0e:	e021      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b37      	ldr	r3, [pc, #220]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006e54:	4b2a      	ldr	r3, [pc, #168]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	0a5b      	lsrs	r3, r3, #9
 8006e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e7a:	ee17 2a90 	vmov	r2, s15
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006e82:	4b1f      	ldr	r3, [pc, #124]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	0c1b      	lsrs	r3, r3, #16
 8006e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ea8:	ee17 2a90 	vmov	r2, s15
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006eb0:	4b13      	ldr	r3, [pc, #76]	; (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	0e1b      	lsrs	r3, r3, #24
 8006eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed6:	ee17 2a90 	vmov	r2, s15
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006ede:	e008      	b.n	8006ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	609a      	str	r2, [r3, #8]
}
 8006ef2:	bf00      	nop
 8006ef4:	3724      	adds	r7, #36	; 0x24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	58024400 	.word	0x58024400
 8006f04:	03d09000 	.word	0x03d09000
 8006f08:	46000000 	.word	0x46000000
 8006f0c:	4c742400 	.word	0x4c742400
 8006f10:	4a742400 	.word	0x4a742400
 8006f14:	4bbebc20 	.word	0x4bbebc20

08006f18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b089      	sub	sp, #36	; 0x24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f20:	4b9d      	ldr	r3, [pc, #628]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	f003 0303 	and.w	r3, r3, #3
 8006f28:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006f2a:	4b9b      	ldr	r3, [pc, #620]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	091b      	lsrs	r3, r3, #4
 8006f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f34:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f36:	4b98      	ldr	r3, [pc, #608]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f40:	4b95      	ldr	r3, [pc, #596]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f44:	08db      	lsrs	r3, r3, #3
 8006f46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	fb02 f303 	mul.w	r3, r2, r3
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f58:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 810a 	beq.w	8007178 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d05a      	beq.n	8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d302      	bcc.n	8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d078      	beq.n	8007064 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8006f72:	e099      	b.n	80070a8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f74:	4b88      	ldr	r3, [pc, #544]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d02d      	beq.n	8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f80:	4b85      	ldr	r3, [pc, #532]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	08db      	lsrs	r3, r3, #3
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	4a84      	ldr	r2, [pc, #528]	; (800719c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f90:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006faa:	4b7b      	ldr	r3, [pc, #492]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006fda:	e087      	b.n	80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8006fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fee:	4b6a      	ldr	r3, [pc, #424]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007002:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800701e:	e065      	b.n	80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800702e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007032:	4b59      	ldr	r3, [pc, #356]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007042:	ed97 6a03 	vldr	s12, [r7, #12]
 8007046:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800704a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007062:	e043      	b.n	80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007076:	4b48      	ldr	r3, [pc, #288]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007086:	ed97 6a03 	vldr	s12, [r7, #12]
 800708a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800708e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800709a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800709e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070a6:	e021      	b.n	80070ec <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80070b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ba:	4b37      	ldr	r3, [pc, #220]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071a0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80070d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070ea:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80070ec:	4b2a      	ldr	r3, [pc, #168]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	0a5b      	lsrs	r3, r3, #9
 80070f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007102:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007106:	edd7 6a07 	vldr	s13, [r7, #28]
 800710a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800710e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007112:	ee17 2a90 	vmov	r2, s15
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800711a:	4b1f      	ldr	r3, [pc, #124]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	0c1b      	lsrs	r3, r3, #16
 8007120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007130:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007134:	edd7 6a07 	vldr	s13, [r7, #28]
 8007138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007140:	ee17 2a90 	vmov	r2, s15
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007148:	4b13      	ldr	r3, [pc, #76]	; (8007198 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	0e1b      	lsrs	r3, r3, #24
 800714e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800715e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007162:	edd7 6a07 	vldr	s13, [r7, #28]
 8007166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800716e:	ee17 2a90 	vmov	r2, s15
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007176:	e008      	b.n	800718a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	609a      	str	r2, [r3, #8]
}
 800718a:	bf00      	nop
 800718c:	3724      	adds	r7, #36	; 0x24
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	58024400 	.word	0x58024400
 800719c:	03d09000 	.word	0x03d09000
 80071a0:	46000000 	.word	0x46000000
 80071a4:	4c742400 	.word	0x4c742400
 80071a8:	4a742400 	.word	0x4a742400
 80071ac:	4bbebc20 	.word	0x4bbebc20

080071b0 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071b4:	f7fe f964 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 80071b8:	4601      	mov	r1, r0
 80071ba:	4b08      	ldr	r3, [pc, #32]	; (80071dc <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	0a1b      	lsrs	r3, r3, #8
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	4a06      	ldr	r2, [pc, #24]	; (80071e0 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80071c6:	5cd3      	ldrb	r3, [r2, r3]
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	fa21 f303 	lsr.w	r3, r1, r3
 80071d0:	4a04      	ldr	r2, [pc, #16]	; (80071e4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80071d2:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80071d6:	681b      	ldr	r3, [r3, #0]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	58024400 	.word	0x58024400
 80071e0:	08008370 	.word	0x08008370
 80071e4:	24040000 	.word	0x24040000

080071e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071f6:	4b53      	ldr	r3, [pc, #332]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d101      	bne.n	8007206 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e099      	b.n	800733a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007206:	4b4f      	ldr	r3, [pc, #316]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a4e      	ldr	r2, [pc, #312]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 800720c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007212:	f7f9 fde5 	bl	8000de0 <HAL_GetTick>
 8007216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007218:	e008      	b.n	800722c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800721a:	f7f9 fde1 	bl	8000de0 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e086      	b.n	800733a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800722c:	4b45      	ldr	r3, [pc, #276]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f0      	bne.n	800721a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007238:	4b42      	ldr	r3, [pc, #264]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	031b      	lsls	r3, r3, #12
 8007246:	493f      	ldr	r1, [pc, #252]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 8007248:	4313      	orrs	r3, r2
 800724a:	628b      	str	r3, [r1, #40]	; 0x28
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	3b01      	subs	r3, #1
 8007252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	3b01      	subs	r3, #1
 800725c:	025b      	lsls	r3, r3, #9
 800725e:	b29b      	uxth	r3, r3
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	3b01      	subs	r3, #1
 8007268:	041b      	lsls	r3, r3, #16
 800726a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800726e:	431a      	orrs	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	3b01      	subs	r3, #1
 8007276:	061b      	lsls	r3, r3, #24
 8007278:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800727c:	4931      	ldr	r1, [pc, #196]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 800727e:	4313      	orrs	r3, r2
 8007280:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007282:	4b30      	ldr	r3, [pc, #192]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	492d      	ldr	r1, [pc, #180]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 8007290:	4313      	orrs	r3, r2
 8007292:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007294:	4b2b      	ldr	r3, [pc, #172]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	f023 0220 	bic.w	r2, r3, #32
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	4928      	ldr	r1, [pc, #160]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072a6:	4b27      	ldr	r3, [pc, #156]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	4a26      	ldr	r2, [pc, #152]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072ac:	f023 0310 	bic.w	r3, r3, #16
 80072b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072b2:	4b24      	ldr	r3, [pc, #144]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072b6:	4b24      	ldr	r3, [pc, #144]	; (8007348 <RCCEx_PLL2_Config+0x160>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	69d2      	ldr	r2, [r2, #28]
 80072be:	00d2      	lsls	r2, r2, #3
 80072c0:	4920      	ldr	r1, [pc, #128]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072c6:	4b1f      	ldr	r3, [pc, #124]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	4a1e      	ldr	r2, [pc, #120]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072cc:	f043 0310 	orr.w	r3, r3, #16
 80072d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d106      	bne.n	80072e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80072d8:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	4a19      	ldr	r2, [pc, #100]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072e4:	e00f      	b.n	8007306 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d106      	bne.n	80072fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80072ec:	4b15      	ldr	r3, [pc, #84]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	4a14      	ldr	r2, [pc, #80]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072f8:	e005      	b.n	8007306 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80072fa:	4b12      	ldr	r3, [pc, #72]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 80072fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fe:	4a11      	ldr	r2, [pc, #68]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 8007300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007304:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007306:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a0e      	ldr	r2, [pc, #56]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 800730c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007312:	f7f9 fd65 	bl	8000de0 <HAL_GetTick>
 8007316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007318:	e008      	b.n	800732c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800731a:	f7f9 fd61 	bl	8000de0 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d901      	bls.n	800732c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e006      	b.n	800733a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <RCCEx_PLL2_Config+0x15c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0f0      	beq.n	800731a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	58024400 	.word	0x58024400
 8007348:	ffff0007 	.word	0xffff0007

0800734c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800735a:	4b53      	ldr	r3, [pc, #332]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	f003 0303 	and.w	r3, r3, #3
 8007362:	2b03      	cmp	r3, #3
 8007364:	d101      	bne.n	800736a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e099      	b.n	800749e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800736a:	4b4f      	ldr	r3, [pc, #316]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a4e      	ldr	r2, [pc, #312]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007376:	f7f9 fd33 	bl	8000de0 <HAL_GetTick>
 800737a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800737c:	e008      	b.n	8007390 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800737e:	f7f9 fd2f 	bl	8000de0 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d901      	bls.n	8007390 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e086      	b.n	800749e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007390:	4b45      	ldr	r3, [pc, #276]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1f0      	bne.n	800737e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800739c:	4b42      	ldr	r3, [pc, #264]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	051b      	lsls	r3, r3, #20
 80073aa:	493f      	ldr	r1, [pc, #252]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	628b      	str	r3, [r1, #40]	; 0x28
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	3b01      	subs	r3, #1
 80073c0:	025b      	lsls	r3, r3, #9
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	041b      	lsls	r3, r3, #16
 80073ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	3b01      	subs	r3, #1
 80073da:	061b      	lsls	r3, r3, #24
 80073dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073e0:	4931      	ldr	r1, [pc, #196]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073e6:	4b30      	ldr	r3, [pc, #192]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	492d      	ldr	r1, [pc, #180]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80073f8:	4b2b      	ldr	r3, [pc, #172]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	4928      	ldr	r1, [pc, #160]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007406:	4313      	orrs	r3, r2
 8007408:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800740a:	4b27      	ldr	r3, [pc, #156]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	4a26      	ldr	r2, [pc, #152]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007416:	4b24      	ldr	r3, [pc, #144]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800741a:	4b24      	ldr	r3, [pc, #144]	; (80074ac <RCCEx_PLL3_Config+0x160>)
 800741c:	4013      	ands	r3, r2
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	69d2      	ldr	r2, [r2, #28]
 8007422:	00d2      	lsls	r2, r2, #3
 8007424:	4920      	ldr	r1, [pc, #128]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007426:	4313      	orrs	r3, r2
 8007428:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800742a:	4b1f      	ldr	r3, [pc, #124]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007434:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d106      	bne.n	800744a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800743c:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	4a19      	ldr	r2, [pc, #100]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007442:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007446:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007448:	e00f      	b.n	800746a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d106      	bne.n	800745e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007450:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	4a14      	ldr	r2, [pc, #80]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007456:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800745a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800745c:	e005      	b.n	800746a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	4a11      	ldr	r2, [pc, #68]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007468:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800746a:	4b0f      	ldr	r3, [pc, #60]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a0e      	ldr	r2, [pc, #56]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007476:	f7f9 fcb3 	bl	8000de0 <HAL_GetTick>
 800747a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800747c:	e008      	b.n	8007490 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800747e:	f7f9 fcaf 	bl	8000de0 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e006      	b.n	800749e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <RCCEx_PLL3_Config+0x15c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0f0      	beq.n	800747e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	58024400 	.word	0x58024400
 80074ac:	ffff0007 	.word	0xffff0007

080074b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e01d      	b.n	80074fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7f9 fb60 	bl	8000b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f000 fa7e 	bl	80079f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e01d      	b.n	8007554 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d106      	bne.n	8007532 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f815 	bl	800755c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2202      	movs	r2, #2
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3304      	adds	r3, #4
 8007542:	4619      	mov	r1, r3
 8007544:	4610      	mov	r0, r2
 8007546:	f000 fa53 	bl	80079f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2201      	movs	r2, #1
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fe3a 	bl	80081fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <HAL_TIM_PWM_Start+0x98>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <HAL_TIM_PWM_Start+0x4a>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1d      	ldr	r2, [pc, #116]	; (800760c <HAL_TIM_PWM_Start+0x9c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00e      	beq.n	80075ba <HAL_TIM_PWM_Start+0x4a>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <HAL_TIM_PWM_Start+0xa0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d009      	beq.n	80075ba <HAL_TIM_PWM_Start+0x4a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a1a      	ldr	r2, [pc, #104]	; (8007614 <HAL_TIM_PWM_Start+0xa4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d004      	beq.n	80075ba <HAL_TIM_PWM_Start+0x4a>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a18      	ldr	r2, [pc, #96]	; (8007618 <HAL_TIM_PWM_Start+0xa8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d101      	bne.n	80075be <HAL_TIM_PWM_Start+0x4e>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <HAL_TIM_PWM_Start+0x50>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689a      	ldr	r2, [r3, #8]
 80075da:	4b10      	ldr	r3, [pc, #64]	; (800761c <HAL_TIM_PWM_Start+0xac>)
 80075dc:	4013      	ands	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b06      	cmp	r3, #6
 80075e4:	d00b      	beq.n	80075fe <HAL_TIM_PWM_Start+0x8e>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ec:	d007      	beq.n	80075fe <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0201 	orr.w	r2, r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40010000 	.word	0x40010000
 800760c:	40010400 	.word	0x40010400
 8007610:	40014000 	.word	0x40014000
 8007614:	40014400 	.word	0x40014400
 8007618:	40014800 	.word	0x40014800
 800761c:	00010007 	.word	0x00010007

08007620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007636:	2302      	movs	r3, #2
 8007638:	e105      	b.n	8007846 <HAL_TIM_PWM_ConfigChannel+0x226>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2202      	movs	r2, #2
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b14      	cmp	r3, #20
 800764e:	f200 80f0 	bhi.w	8007832 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007652:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	080076ad 	.word	0x080076ad
 800765c:	08007833 	.word	0x08007833
 8007660:	08007833 	.word	0x08007833
 8007664:	08007833 	.word	0x08007833
 8007668:	080076ed 	.word	0x080076ed
 800766c:	08007833 	.word	0x08007833
 8007670:	08007833 	.word	0x08007833
 8007674:	08007833 	.word	0x08007833
 8007678:	0800772f 	.word	0x0800772f
 800767c:	08007833 	.word	0x08007833
 8007680:	08007833 	.word	0x08007833
 8007684:	08007833 	.word	0x08007833
 8007688:	0800776f 	.word	0x0800776f
 800768c:	08007833 	.word	0x08007833
 8007690:	08007833 	.word	0x08007833
 8007694:	08007833 	.word	0x08007833
 8007698:	080077b1 	.word	0x080077b1
 800769c:	08007833 	.word	0x08007833
 80076a0:	08007833 	.word	0x08007833
 80076a4:	08007833 	.word	0x08007833
 80076a8:	080077f1 	.word	0x080077f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fa36 	bl	8007b24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0208 	orr.w	r2, r2, #8
 80076c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0204 	bic.w	r2, r2, #4
 80076d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6999      	ldr	r1, [r3, #24]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	619a      	str	r2, [r3, #24]
      break;
 80076ea:	e0a3      	b.n	8007834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 faa6 	bl	8007c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6999      	ldr	r1, [r3, #24]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	021a      	lsls	r2, r3, #8
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	619a      	str	r2, [r3, #24]
      break;
 800772c:	e082      	b.n	8007834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68b9      	ldr	r1, [r7, #8]
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fb0f 	bl	8007d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0208 	orr.w	r2, r2, #8
 8007748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0204 	bic.w	r2, r2, #4
 8007758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69d9      	ldr	r1, [r3, #28]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	61da      	str	r2, [r3, #28]
      break;
 800776c:	e062      	b.n	8007834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fb75 	bl	8007e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69d9      	ldr	r1, [r3, #28]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	021a      	lsls	r2, r3, #8
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	61da      	str	r2, [r3, #28]
      break;
 80077ae:	e041      	b.n	8007834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 fbbc 	bl	8007f34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0208 	orr.w	r2, r2, #8
 80077ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 0204 	bic.w	r2, r2, #4
 80077da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077ee:	e021      	b.n	8007834 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 fbfe 	bl	8007ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800780a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800781a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	021a      	lsls	r2, r3, #8
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007830:	e000      	b.n	8007834 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007832:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop

08007850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_TIM_ConfigClockSource+0x18>
 8007864:	2302      	movs	r3, #2
 8007866:	e0b7      	b.n	80079d8 <HAL_TIM_ConfigClockSource+0x188>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4b57      	ldr	r3, [pc, #348]	; (80079e0 <HAL_TIM_ConfigClockSource+0x190>)
 8007884:	4013      	ands	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800788e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b70      	cmp	r3, #112	; 0x70
 800789e:	d02e      	beq.n	80078fe <HAL_TIM_ConfigClockSource+0xae>
 80078a0:	2b70      	cmp	r3, #112	; 0x70
 80078a2:	d812      	bhi.n	80078ca <HAL_TIM_ConfigClockSource+0x7a>
 80078a4:	2b30      	cmp	r3, #48	; 0x30
 80078a6:	f000 8084 	beq.w	80079b2 <HAL_TIM_ConfigClockSource+0x162>
 80078aa:	2b30      	cmp	r3, #48	; 0x30
 80078ac:	d806      	bhi.n	80078bc <HAL_TIM_ConfigClockSource+0x6c>
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d07f      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x162>
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d07d      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x162>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d07b      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80078ba:	e084      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80078bc:	2b50      	cmp	r3, #80	; 0x50
 80078be:	d048      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0x102>
 80078c0:	2b60      	cmp	r3, #96	; 0x60
 80078c2:	d056      	beq.n	8007972 <HAL_TIM_ConfigClockSource+0x122>
 80078c4:	2b40      	cmp	r3, #64	; 0x40
 80078c6:	d064      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x142>
      break;
 80078c8:	e07d      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80078ca:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80078ce:	d070      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x162>
 80078d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80078d4:	d809      	bhi.n	80078ea <HAL_TIM_ConfigClockSource+0x9a>
 80078d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078da:	d027      	beq.n	800792c <HAL_TIM_ConfigClockSource+0xdc>
 80078dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078e0:	d067      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x162>
 80078e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e6:	d06d      	beq.n	80079c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078e8:	e06d      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80078ea:	4a3e      	ldr	r2, [pc, #248]	; (80079e4 <HAL_TIM_ConfigClockSource+0x194>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d060      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x162>
 80078f0:	4a3d      	ldr	r2, [pc, #244]	; (80079e8 <HAL_TIM_ConfigClockSource+0x198>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d05d      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x162>
 80078f6:	4a3d      	ldr	r2, [pc, #244]	; (80079ec <HAL_TIM_ConfigClockSource+0x19c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d05a      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80078fc:	e063      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6899      	ldr	r1, [r3, #8]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f000 fc55 	bl	80081bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007920:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	609a      	str	r2, [r3, #8]
      break;
 800792a:	e04c      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	6899      	ldr	r1, [r3, #8]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f000 fc3e 	bl	80081bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800794e:	609a      	str	r2, [r3, #8]
      break;
 8007950:	e039      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6859      	ldr	r1, [r3, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	461a      	mov	r2, r3
 8007960:	f000 fbae 	bl	80080c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2150      	movs	r1, #80	; 0x50
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fc08 	bl	8008180 <TIM_ITRx_SetConfig>
      break;
 8007970:	e029      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	6859      	ldr	r1, [r3, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	461a      	mov	r2, r3
 8007980:	f000 fbcd 	bl	800811e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2160      	movs	r1, #96	; 0x60
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fbf8 	bl	8008180 <TIM_ITRx_SetConfig>
      break;
 8007990:	e019      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6859      	ldr	r1, [r3, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	461a      	mov	r2, r3
 80079a0:	f000 fb8e 	bl	80080c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2140      	movs	r1, #64	; 0x40
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fbe8 	bl	8008180 <TIM_ITRx_SetConfig>
      break;
 80079b0:	e009      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4619      	mov	r1, r3
 80079bc:	4610      	mov	r0, r2
 80079be:	f000 fbdf 	bl	8008180 <TIM_ITRx_SetConfig>
      break;
 80079c2:	e000      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80079c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	ffceff88 	.word	0xffceff88
 80079e4:	00100030 	.word	0x00100030
 80079e8:	00100040 	.word	0x00100040
 80079ec:	00100020 	.word	0x00100020

080079f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a40      	ldr	r2, [pc, #256]	; (8007b04 <TIM_Base_SetConfig+0x114>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d013      	beq.n	8007a30 <TIM_Base_SetConfig+0x40>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0e:	d00f      	beq.n	8007a30 <TIM_Base_SetConfig+0x40>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a3d      	ldr	r2, [pc, #244]	; (8007b08 <TIM_Base_SetConfig+0x118>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00b      	beq.n	8007a30 <TIM_Base_SetConfig+0x40>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a3c      	ldr	r2, [pc, #240]	; (8007b0c <TIM_Base_SetConfig+0x11c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d007      	beq.n	8007a30 <TIM_Base_SetConfig+0x40>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a3b      	ldr	r2, [pc, #236]	; (8007b10 <TIM_Base_SetConfig+0x120>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_Base_SetConfig+0x40>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a3a      	ldr	r2, [pc, #232]	; (8007b14 <TIM_Base_SetConfig+0x124>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d108      	bne.n	8007a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a2f      	ldr	r2, [pc, #188]	; (8007b04 <TIM_Base_SetConfig+0x114>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d01f      	beq.n	8007a8a <TIM_Base_SetConfig+0x9a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a50:	d01b      	beq.n	8007a8a <TIM_Base_SetConfig+0x9a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a2c      	ldr	r2, [pc, #176]	; (8007b08 <TIM_Base_SetConfig+0x118>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d017      	beq.n	8007a8a <TIM_Base_SetConfig+0x9a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a2b      	ldr	r2, [pc, #172]	; (8007b0c <TIM_Base_SetConfig+0x11c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d013      	beq.n	8007a8a <TIM_Base_SetConfig+0x9a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a2a      	ldr	r2, [pc, #168]	; (8007b10 <TIM_Base_SetConfig+0x120>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00f      	beq.n	8007a8a <TIM_Base_SetConfig+0x9a>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a29      	ldr	r2, [pc, #164]	; (8007b14 <TIM_Base_SetConfig+0x124>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00b      	beq.n	8007a8a <TIM_Base_SetConfig+0x9a>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a28      	ldr	r2, [pc, #160]	; (8007b18 <TIM_Base_SetConfig+0x128>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d007      	beq.n	8007a8a <TIM_Base_SetConfig+0x9a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a27      	ldr	r2, [pc, #156]	; (8007b1c <TIM_Base_SetConfig+0x12c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d003      	beq.n	8007a8a <TIM_Base_SetConfig+0x9a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a26      	ldr	r2, [pc, #152]	; (8007b20 <TIM_Base_SetConfig+0x130>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d108      	bne.n	8007a9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a10      	ldr	r2, [pc, #64]	; (8007b04 <TIM_Base_SetConfig+0x114>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00f      	beq.n	8007ae8 <TIM_Base_SetConfig+0xf8>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a12      	ldr	r2, [pc, #72]	; (8007b14 <TIM_Base_SetConfig+0x124>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d00b      	beq.n	8007ae8 <TIM_Base_SetConfig+0xf8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a11      	ldr	r2, [pc, #68]	; (8007b18 <TIM_Base_SetConfig+0x128>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d007      	beq.n	8007ae8 <TIM_Base_SetConfig+0xf8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a10      	ldr	r2, [pc, #64]	; (8007b1c <TIM_Base_SetConfig+0x12c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d003      	beq.n	8007ae8 <TIM_Base_SetConfig+0xf8>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a0f      	ldr	r2, [pc, #60]	; (8007b20 <TIM_Base_SetConfig+0x130>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d103      	bne.n	8007af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	691a      	ldr	r2, [r3, #16]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	615a      	str	r2, [r3, #20]
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	40010000 	.word	0x40010000
 8007b08:	40000400 	.word	0x40000400
 8007b0c:	40000800 	.word	0x40000800
 8007b10:	40000c00 	.word	0x40000c00
 8007b14:	40010400 	.word	0x40010400
 8007b18:	40014000 	.word	0x40014000
 8007b1c:	40014400 	.word	0x40014400
 8007b20:	40014800 	.word	0x40014800

08007b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f023 0201 	bic.w	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4b37      	ldr	r3, [pc, #220]	; (8007c2c <TIM_OC1_SetConfig+0x108>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 0303 	bic.w	r3, r3, #3
 8007b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f023 0302 	bic.w	r3, r3, #2
 8007b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a2d      	ldr	r2, [pc, #180]	; (8007c30 <TIM_OC1_SetConfig+0x10c>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00f      	beq.n	8007ba0 <TIM_OC1_SetConfig+0x7c>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a2c      	ldr	r2, [pc, #176]	; (8007c34 <TIM_OC1_SetConfig+0x110>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00b      	beq.n	8007ba0 <TIM_OC1_SetConfig+0x7c>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a2b      	ldr	r2, [pc, #172]	; (8007c38 <TIM_OC1_SetConfig+0x114>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d007      	beq.n	8007ba0 <TIM_OC1_SetConfig+0x7c>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a2a      	ldr	r2, [pc, #168]	; (8007c3c <TIM_OC1_SetConfig+0x118>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d003      	beq.n	8007ba0 <TIM_OC1_SetConfig+0x7c>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a29      	ldr	r2, [pc, #164]	; (8007c40 <TIM_OC1_SetConfig+0x11c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d10c      	bne.n	8007bba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f023 0308 	bic.w	r3, r3, #8
 8007ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f023 0304 	bic.w	r3, r3, #4
 8007bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a1c      	ldr	r2, [pc, #112]	; (8007c30 <TIM_OC1_SetConfig+0x10c>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00f      	beq.n	8007be2 <TIM_OC1_SetConfig+0xbe>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <TIM_OC1_SetConfig+0x110>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d00b      	beq.n	8007be2 <TIM_OC1_SetConfig+0xbe>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a1a      	ldr	r2, [pc, #104]	; (8007c38 <TIM_OC1_SetConfig+0x114>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d007      	beq.n	8007be2 <TIM_OC1_SetConfig+0xbe>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a19      	ldr	r2, [pc, #100]	; (8007c3c <TIM_OC1_SetConfig+0x118>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d003      	beq.n	8007be2 <TIM_OC1_SetConfig+0xbe>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a18      	ldr	r2, [pc, #96]	; (8007c40 <TIM_OC1_SetConfig+0x11c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d111      	bne.n	8007c06 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	621a      	str	r2, [r3, #32]
}
 8007c20:	bf00      	nop
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	fffeff8f 	.word	0xfffeff8f
 8007c30:	40010000 	.word	0x40010000
 8007c34:	40010400 	.word	0x40010400
 8007c38:	40014000 	.word	0x40014000
 8007c3c:	40014400 	.word	0x40014400
 8007c40:	40014800 	.word	0x40014800

08007c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f023 0210 	bic.w	r2, r3, #16
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4b34      	ldr	r3, [pc, #208]	; (8007d40 <TIM_OC2_SetConfig+0xfc>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	021b      	lsls	r3, r3, #8
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	f023 0320 	bic.w	r3, r3, #32
 8007c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a29      	ldr	r2, [pc, #164]	; (8007d44 <TIM_OC2_SetConfig+0x100>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d003      	beq.n	8007cac <TIM_OC2_SetConfig+0x68>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a28      	ldr	r2, [pc, #160]	; (8007d48 <TIM_OC2_SetConfig+0x104>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d10d      	bne.n	8007cc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a1e      	ldr	r2, [pc, #120]	; (8007d44 <TIM_OC2_SetConfig+0x100>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00f      	beq.n	8007cf0 <TIM_OC2_SetConfig+0xac>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a1d      	ldr	r2, [pc, #116]	; (8007d48 <TIM_OC2_SetConfig+0x104>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d00b      	beq.n	8007cf0 <TIM_OC2_SetConfig+0xac>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a1c      	ldr	r2, [pc, #112]	; (8007d4c <TIM_OC2_SetConfig+0x108>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d007      	beq.n	8007cf0 <TIM_OC2_SetConfig+0xac>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <TIM_OC2_SetConfig+0x10c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d003      	beq.n	8007cf0 <TIM_OC2_SetConfig+0xac>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a1a      	ldr	r2, [pc, #104]	; (8007d54 <TIM_OC2_SetConfig+0x110>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d113      	bne.n	8007d18 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	621a      	str	r2, [r3, #32]
}
 8007d32:	bf00      	nop
 8007d34:	371c      	adds	r7, #28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	feff8fff 	.word	0xfeff8fff
 8007d44:	40010000 	.word	0x40010000
 8007d48:	40010400 	.word	0x40010400
 8007d4c:	40014000 	.word	0x40014000
 8007d50:	40014400 	.word	0x40014400
 8007d54:	40014800 	.word	0x40014800

08007d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 0303 	bic.w	r3, r3, #3
 8007d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	021b      	lsls	r3, r3, #8
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a27      	ldr	r2, [pc, #156]	; (8007e50 <TIM_OC3_SetConfig+0xf8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d003      	beq.n	8007dbe <TIM_OC3_SetConfig+0x66>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a26      	ldr	r2, [pc, #152]	; (8007e54 <TIM_OC3_SetConfig+0xfc>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d10d      	bne.n	8007dda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	021b      	lsls	r3, r3, #8
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a1c      	ldr	r2, [pc, #112]	; (8007e50 <TIM_OC3_SetConfig+0xf8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00f      	beq.n	8007e02 <TIM_OC3_SetConfig+0xaa>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a1b      	ldr	r2, [pc, #108]	; (8007e54 <TIM_OC3_SetConfig+0xfc>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00b      	beq.n	8007e02 <TIM_OC3_SetConfig+0xaa>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a1a      	ldr	r2, [pc, #104]	; (8007e58 <TIM_OC3_SetConfig+0x100>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d007      	beq.n	8007e02 <TIM_OC3_SetConfig+0xaa>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a19      	ldr	r2, [pc, #100]	; (8007e5c <TIM_OC3_SetConfig+0x104>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d003      	beq.n	8007e02 <TIM_OC3_SetConfig+0xaa>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a18      	ldr	r2, [pc, #96]	; (8007e60 <TIM_OC3_SetConfig+0x108>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d113      	bne.n	8007e2a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	621a      	str	r2, [r3, #32]
}
 8007e44:	bf00      	nop
 8007e46:	371c      	adds	r7, #28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	40010000 	.word	0x40010000
 8007e54:	40010400 	.word	0x40010400
 8007e58:	40014000 	.word	0x40014000
 8007e5c:	40014400 	.word	0x40014400
 8007e60:	40014800 	.word	0x40014800

08007e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	021b      	lsls	r3, r3, #8
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	031b      	lsls	r3, r3, #12
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a18      	ldr	r2, [pc, #96]	; (8007f20 <TIM_OC4_SetConfig+0xbc>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00f      	beq.n	8007ee4 <TIM_OC4_SetConfig+0x80>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <TIM_OC4_SetConfig+0xc0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00b      	beq.n	8007ee4 <TIM_OC4_SetConfig+0x80>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a16      	ldr	r2, [pc, #88]	; (8007f28 <TIM_OC4_SetConfig+0xc4>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d007      	beq.n	8007ee4 <TIM_OC4_SetConfig+0x80>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <TIM_OC4_SetConfig+0xc8>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d003      	beq.n	8007ee4 <TIM_OC4_SetConfig+0x80>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a14      	ldr	r2, [pc, #80]	; (8007f30 <TIM_OC4_SetConfig+0xcc>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d109      	bne.n	8007ef8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	019b      	lsls	r3, r3, #6
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	621a      	str	r2, [r3, #32]
}
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	40010000 	.word	0x40010000
 8007f24:	40010400 	.word	0x40010400
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400
 8007f30:	40014800 	.word	0x40014800

08007f34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	041b      	lsls	r3, r3, #16
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a17      	ldr	r2, [pc, #92]	; (8007fe4 <TIM_OC5_SetConfig+0xb0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00f      	beq.n	8007faa <TIM_OC5_SetConfig+0x76>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a16      	ldr	r2, [pc, #88]	; (8007fe8 <TIM_OC5_SetConfig+0xb4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00b      	beq.n	8007faa <TIM_OC5_SetConfig+0x76>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a15      	ldr	r2, [pc, #84]	; (8007fec <TIM_OC5_SetConfig+0xb8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d007      	beq.n	8007faa <TIM_OC5_SetConfig+0x76>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a14      	ldr	r2, [pc, #80]	; (8007ff0 <TIM_OC5_SetConfig+0xbc>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d003      	beq.n	8007faa <TIM_OC5_SetConfig+0x76>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a13      	ldr	r2, [pc, #76]	; (8007ff4 <TIM_OC5_SetConfig+0xc0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d109      	bne.n	8007fbe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	021b      	lsls	r3, r3, #8
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	621a      	str	r2, [r3, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	40010000 	.word	0x40010000
 8007fe8:	40010400 	.word	0x40010400
 8007fec:	40014000 	.word	0x40014000
 8007ff0:	40014400 	.word	0x40014400
 8007ff4:	40014800 	.word	0x40014800

08007ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800803a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	051b      	lsls	r3, r3, #20
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	4313      	orrs	r3, r2
 8008046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a18      	ldr	r2, [pc, #96]	; (80080ac <TIM_OC6_SetConfig+0xb4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00f      	beq.n	8008070 <TIM_OC6_SetConfig+0x78>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a17      	ldr	r2, [pc, #92]	; (80080b0 <TIM_OC6_SetConfig+0xb8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00b      	beq.n	8008070 <TIM_OC6_SetConfig+0x78>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a16      	ldr	r2, [pc, #88]	; (80080b4 <TIM_OC6_SetConfig+0xbc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d007      	beq.n	8008070 <TIM_OC6_SetConfig+0x78>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a15      	ldr	r2, [pc, #84]	; (80080b8 <TIM_OC6_SetConfig+0xc0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <TIM_OC6_SetConfig+0x78>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a14      	ldr	r2, [pc, #80]	; (80080bc <TIM_OC6_SetConfig+0xc4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d109      	bne.n	8008084 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008076:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	029b      	lsls	r3, r3, #10
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	40010000 	.word	0x40010000
 80080b0:	40010400 	.word	0x40010400
 80080b4:	40014000 	.word	0x40014000
 80080b8:	40014400 	.word	0x40014400
 80080bc:	40014800 	.word	0x40014800

080080c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	f023 0201 	bic.w	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f023 030a 	bic.w	r3, r3, #10
 80080fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	621a      	str	r2, [r3, #32]
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800811e:	b480      	push	{r7}
 8008120:	b087      	sub	sp, #28
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	f023 0210 	bic.w	r2, r3, #16
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	031b      	lsls	r3, r3, #12
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	4313      	orrs	r3, r2
 8008152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800815a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	4313      	orrs	r3, r2
 8008164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	621a      	str	r2, [r3, #32]
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <TIM_ITRx_SetConfig+0x38>)
 8008194:	4013      	ands	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4313      	orrs	r3, r2
 800819e:	f043 0307 	orr.w	r3, r3, #7
 80081a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	609a      	str	r2, [r3, #8]
}
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	ffcfff8f 	.word	0xffcfff8f

080081bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	021a      	lsls	r2, r3, #8
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	431a      	orrs	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	609a      	str	r2, [r3, #8]
}
 80081f0:	bf00      	nop
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f003 031f 	and.w	r3, r3, #31
 800820e:	2201      	movs	r2, #1
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a1a      	ldr	r2, [r3, #32]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	43db      	mvns	r3, r3
 800821e:	401a      	ands	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a1a      	ldr	r2, [r3, #32]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f003 031f 	and.w	r3, r3, #31
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	fa01 f303 	lsl.w	r3, r1, r3
 8008234:	431a      	orrs	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	621a      	str	r2, [r3, #32]
}
 800823a:	bf00      	nop
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
	...

08008248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800825c:	2302      	movs	r3, #2
 800825e:	e045      	b.n	80082ec <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a1c      	ldr	r2, [pc, #112]	; (80082f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d004      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1b      	ldr	r2, [pc, #108]	; (80082fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d108      	bne.n	80082a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800829a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082be:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	40010000 	.word	0x40010000
 80082fc:	40010400 	.word	0x40010400

08008300 <__libc_init_array>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	4e0d      	ldr	r6, [pc, #52]	; (8008338 <__libc_init_array+0x38>)
 8008304:	4c0d      	ldr	r4, [pc, #52]	; (800833c <__libc_init_array+0x3c>)
 8008306:	1ba4      	subs	r4, r4, r6
 8008308:	10a4      	asrs	r4, r4, #2
 800830a:	2500      	movs	r5, #0
 800830c:	42a5      	cmp	r5, r4
 800830e:	d109      	bne.n	8008324 <__libc_init_array+0x24>
 8008310:	4e0b      	ldr	r6, [pc, #44]	; (8008340 <__libc_init_array+0x40>)
 8008312:	4c0c      	ldr	r4, [pc, #48]	; (8008344 <__libc_init_array+0x44>)
 8008314:	f000 f820 	bl	8008358 <_init>
 8008318:	1ba4      	subs	r4, r4, r6
 800831a:	10a4      	asrs	r4, r4, #2
 800831c:	2500      	movs	r5, #0
 800831e:	42a5      	cmp	r5, r4
 8008320:	d105      	bne.n	800832e <__libc_init_array+0x2e>
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008328:	4798      	blx	r3
 800832a:	3501      	adds	r5, #1
 800832c:	e7ee      	b.n	800830c <__libc_init_array+0xc>
 800832e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008332:	4798      	blx	r3
 8008334:	3501      	adds	r5, #1
 8008336:	e7f2      	b.n	800831e <__libc_init_array+0x1e>
 8008338:	08008388 	.word	0x08008388
 800833c:	08008388 	.word	0x08008388
 8008340:	08008388 	.word	0x08008388
 8008344:	0800838c 	.word	0x0800838c

08008348 <memset>:
 8008348:	4402      	add	r2, r0
 800834a:	4603      	mov	r3, r0
 800834c:	4293      	cmp	r3, r2
 800834e:	d100      	bne.n	8008352 <memset+0xa>
 8008350:	4770      	bx	lr
 8008352:	f803 1b01 	strb.w	r1, [r3], #1
 8008356:	e7f9      	b.n	800834c <memset+0x4>

08008358 <_init>:
 8008358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835a:	bf00      	nop
 800835c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835e:	bc08      	pop	{r3}
 8008360:	469e      	mov	lr, r3
 8008362:	4770      	bx	lr

08008364 <_fini>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	bf00      	nop
 8008368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836a:	bc08      	pop	{r3}
 800836c:	469e      	mov	lr, r3
 800836e:	4770      	bx	lr
